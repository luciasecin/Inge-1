

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (22 June 2023 20:00:08) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/customerImporter/linux64/CuisUniversity-5832.image!


----End fileIn of /home/paula/Documents/COMPUTACION/Inge1-1c2023/linux64/linux64/PinkTheme.st----!

----End fileIn of /home/paula/Documents/COMPUTACION/Inge1-1c2023/2023-1c/10-CustomerImporter/CustomerImporter.st----!

!testRun: #ImportTest #test01Import stamp: 'pau 6/22/2023 20:02:51'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'pau 6/22/2023 20:03:39'!
PASSED!
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:22:58' prior: 50624463 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8) paler.! !
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:23:05' prior: 50624756 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8) lighter.! !
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:23:12' prior: 50624761 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8) muchLighter.! !
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:24:12' prior: 50624766 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8) lighter.! !
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:25:02' prior: 50624772 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8) slightlyLighter .! !
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:25:29' prior: 50624777 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8) slightlyWhiter .! !
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:25:46' prior: 50624783 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8) slightlyWhiter.! !
!PinkTheme methodsFor: 'colors' stamp: 'pau 6/22/2023 20:26:19' prior: 50624789 overrides: 16970806!
textHighlight
	^ (Color r: 1 g: 0.584 b: 0.8)  alphaMixed: 0.6 with: Color white.! !
A very pink theme. Easy on those who are used to using pink operating systems and such.!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:28:59'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/22/2023 20:32:53' prior: 50624800!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'pau 6/22/2023 20:32:53'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 20:33:06'!
setup

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 20:33:06' prior: 50624841!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	self setup.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.! !
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 20:33:14' prior: 50624895!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.! !
!ImportTest methodsFor: 'setUp' stamp: 'pau 6/22/2023 20:33:34' overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !

!methodRemoval: ImportTest #setup stamp: 'pau 6/22/2023 20:33:34'!
setup

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction!

!testRun: #ImportTest #test01Import stamp: 'pau 6/22/2023 20:33:42'!
PASSED!
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 20:34:27' overrides: 16961402!
tearDown

	session commit.
	session close! !
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 20:34:27' prior: 50624933!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	self tearDown.

	inputStream close.! !

!testRun: #ImportTest #test01Import stamp: 'pau 6/22/2023 20:37:43'!
PASSED!
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 20:38:48' prior: 50624990!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close.! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:39:18' prior: 50624490!
test01Import
	self importCustomers 
	"Customer importCustomers "! !

!testRun: #ImportTest #test01Import stamp: 'pau 6/22/2023 20:39:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:39:51' prior: 50625065!
test01Import

	self importCustomers. 
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:40:55'!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	! !

!methodRemoval: ImportTest #test01Import stamp: 'pau 6/22/2023 20:40:55'!
test01Import

	self importCustomers. 
	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:40:58' prior: 50625077!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:41:41' prior: 50625086!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: session amountOfCustomers equals: 5. 
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:41:48' prior: 50625092!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session amountOfCustomers) equals: 5. 
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:42:22' prior: 50625099!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session amountOfCustomers) equals: 5. 
	
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'setUp' stamp: 'pau 6/22/2023 20:44:14' prior: 50624970 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:44:30'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:45:19'!
ERROR!
!DataBaseSession methodsFor: 'amountOfCustomers' stamp: 'pau 6/22/2023 20:45:38'!
amountOfCustomers
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'amountOfCustomers' stamp: 'pau 6/22/2023 20:45:44' prior: 50625130!
amountOfCustomers
	! !
!DataBaseSession methodsFor: 'amountOfCustomers' stamp: 'pau 6/22/2023 20:46:46' prior: 50625135!
amountOfCustomers
	tables ! !

----End fileIn of /home/paula/Documents/COMPUTACION/Inge1-1c2023/customerImporter/linux64/Packages/TerseGuide.pck.st----!
!DataBaseSession methodsFor: 'amountOfCustomers' stamp: 'pau 6/22/2023 20:47:24' prior: 50625139!
amountOfCustomers
	tables size! !
!DataBaseSession methodsFor: 'amountOfCustomers' stamp: 'pau 6/22/2023 20:48:18' prior: 50628065!
amountOfCustomers
	^tables size! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:48:23'!
FAILURE!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:48:24'!
FAILURE!

tables!

!methodRemoval: DataBaseSession #amountOfCustomers stamp: 'pau 6/22/2023 20:51:01'!
amountOfCustomers
	^tables size!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:51:19' prior: 50625106!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer size) equals: 5. 
	
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:51:21'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:51:38'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:51:48' prior: 50628085!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: ((session selectAllOfType: Customer )size) equals: 5. 
	
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

(session selectAllOfType: Customer )!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:52:27' prior: 50628103!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: ((session selectAllOfType: Customer )size) equals: 2. 
	
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:52:30'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:52:30'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:53:52'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:53:53'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:54:13' prior: 50628115!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer size) equals: 2. 
	
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:54:14'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:54:28' prior: 50628140!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:54:30'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:54:30'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:55:37' prior: 50628154!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	"self assert: (session )"
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:57:42' prior: 50628172!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:c| c name == 'C'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:57:43'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:58:20'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:58:36' prior: 50628184!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 4. 
	self assert: (session select: [:c| c name == 'C'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:58:37'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 20:58:48' prior: 50628204!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:c| c name == 'C'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:58:49'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 20:59:08'!
FAILURE!

(self objectsOfType: aType)!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:00:20' prior: 50628221!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:c| c firstName == 'C'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:00:21'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:02:46' prior: 50628242!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:c| c firstName == 'Pepe'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:02:50' prior: 50628259!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:c| c firstName = 'Pepe'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:02:51'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:03:27' prior: 50628272!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:customer| customer firstName = 'Pepe'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:04:06' prior: 50628289!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:customer| ^customer firstName = 'Pepe'] ofType: Customer)

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:04:11'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:04:12'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:04:34' prior: 50628303!
test01ImportCustomersAndCheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	self assert: (session select: [:customer| ^customer firstName = 'Pepe'] ofType: Customer) size equals: 1

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:04:36'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:04:37'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:05:12' prior: 50628324!
test01ImportCustomersAndCheckAmountOfCustomer

	| pepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	pepe := (session select: [:customer| ^customer firstName = 'Pepe'] ofType: Customer). 
	

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:05:32' prior: 50628345!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| ^customer firstName = 'Pepe'] ofType: Customer). 
	

	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:06:42' prior: 50628359!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| ^customer firstName = 'Pepe'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: ''.  
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:07:16' prior: 50628374!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| ^customer firstName = 'Pepe'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.  
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:07:17'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:07:18'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:07:40' prior: 50628390!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| ^customer firstName = 'Pepe'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:07:42'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:07:42'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:07:59'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:09:22' prior: 50628413!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| ^customer identificationNumber = '22333444'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:09:24'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:09:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:10:27' prior: 50628440!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	"self assert: (session selectAllOfType: Customer ) size equals: 2. "
	customerPepe := (session select: [:customer| ^customer identificationNumber = '22333444'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:10:29'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:10:29'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:10:53' prior: 50628464!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	"self assert: (session selectAllOfType: Customer ) size equals: 2. "
	customerPepe := (session select: [:customer| customer identificationNumber = '22333444'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:10:57'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:13:09' prior: 50628488!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	"self assert: (session selectAllOfType: Customer ) size equals: 2. "
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:13:10'!
ERROR!

customer!
!Customer class methodsFor: 'importing' stamp: 'pau 6/22/2023 21:15:22' prior: 50624611!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!Customer class methodsFor: 'importing' stamp: 'pau 6/22/2023 21:15:44' prior: 50628529!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth asNumber.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 21:16:17' prior: 50625029!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close.! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:16:19'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:16:19'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:16:29' prior: 50628508!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	"self assert: (session selectAllOfType: Customer ) size equals: 2. "
	customerPepe := (session select: [:customer| (customer identificationNumber) = 22333444] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:16:33'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:16:34'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:17:08' prior: 50628653!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = 22333444] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:17:09'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:18:42' prior: 50628677!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer). 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:18:57'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:18:57'!
ERROR!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:19:17'!
FAILURE!

customer!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:21:01' prior: 50628697!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:21:03'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:21:39' prior: 50628725!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom: 7. 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:21:41'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:21:52' prior: 50628746!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:21:53'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:22:04' prior: 50628767!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:22:05'!
PASSED!

!testRun: #ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:22:05'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:22:37'!
test02ImportCustomersAndCheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:22:52'!
test02CheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!methodRemoval: ImportTest #test02ImportCustomersAndCheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:22:52'!
test02ImportCustomersAndCheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:23:00'!
test01CheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	! !

!methodRemoval: ImportTest #test01ImportCustomersAndCheckAmountOfCustomer stamp: 'pau 6/22/2023 21:23:00'!
test01ImportCustomersAndCheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    
	"
	self assert: Juan perez se importo bien 
	self asssert: la addressde juan peres esta bien 
	etc
	"
	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:23:12' prior: 50628863!
test01CheckAmountOfCustomer

	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:23:21' prior: 50628829!
test02CheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	! !

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:23:22'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:23:23'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:23:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:23:58'!
test03CheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe lastName equals: 'Sanchez'.    
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:24:15' prior: 50628904!
test02CheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	! !

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:24:16'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:24:17'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:24:17'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:24:18'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:25:01' prior: 50628926!
test03CheckThatPepeIsACustomer

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:25:24' prior: 50628967!
test03CheckThatPepeIsACustomer

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 1
	

	
	! !

!testRun: #ImportTest #test03CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:25:25'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:25:31' prior: 50628978!
test03CheckThatPepeIsACustomer

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	! !

!testRun: #ImportTest #test03CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:25:33'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:25:34'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:25:35'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:25:35'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:25:47'!
test03CheckThatPepeHas2Addresses

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	! !

!methodRemoval: ImportTest #test03CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:25:47'!
test03CheckThatPepeIsACustomer

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:26:02'!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:26:47' prior: 50629043!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:27:46' prior: 50629056!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:27:55' prior: 50629068!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:29:16' prior: 50629082!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:29:21'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:29:21'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:29:22'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:29:23'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:29:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:29:55' prior: 50629096!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:29:57'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:29:57'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:29:58'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:29:59'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:29:59'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:30:35' prior: 50629127!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:31:13' prior: 50629160!
test04CheckThatPepeAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals: 'Olivos'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:32:43' prior: 50629180!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals: 'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert:  (pepeAddress1 province ) equals: 1636.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:32:54' prior: 50629201!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals: 'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert:  (pepeAddress1 province ) equals: 'BsAs'.
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:33:02'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:33:16' prior: 50629228!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals: 'BsAs'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert:  (pepeAddress1 province ) equals: 'Olivos'.
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:33:21'!
FAILURE!

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:33:26'!
FAILURE!

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:33:54'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:34:09' prior: 50629257!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert:  (pepeAddress1 province ) equals:  'BsAs'.
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:34:13'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:34:32' prior: 50629292!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'BsAs'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert:  (pepeAddress1 province ) equals:  'BsAs'.
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:34:35'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:34:50' prior: 50629321!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert:  (pepeAddress1 province ) equals:  'BsAs'.
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:34:54'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:37:27' prior: 50629350!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	"self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress2 province ) equals:  'BsAs'."
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:37:29'!
FAILURE!
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/22/2023 21:38:01' prior: 50628610!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:38:02'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:38:03'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:38:04'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:38:04'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:38:12'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:38:14'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:38:15'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:39:05'!
test04CheckThatAddressesAreReadCorrectly
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	"self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress2 province ) equals:  'BsAs'."
	
	
	
	

	
	! !

!methodRemoval: ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:39:05'!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber) = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	"self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress2 province ) equals:  'BsAs'."
	
	
	
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:41:35' prior: 50629480!
test04CheckThatAddressesAreReadCorrectly
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| customer identificationNumber = '22333444'] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	"self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress2 province ) equals:  'BsAs'."
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatAddressesAreReadCorrectly stamp: 'pau 6/22/2023 21:41:45'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:41:46'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:41:46'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:41:47'!
PASSED!

!testRun: #ImportTest #test04CheckThatAddressesAreReadCorrectly stamp: 'pau 6/22/2023 21:41:47'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:42:22' prior: 50629549!
test04CheckThatAddressesAreReadCorrectly
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	"self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress2 province ) equals:  'BsAs'."
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatAddressesAreReadCorrectly stamp: 'pau 6/22/2023 21:42:26'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:42:26'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:42:27'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:42:28'!
PASSED!

!testRun: #ImportTest #test04CheckThatAddressesAreReadCorrectly stamp: 'pau 6/22/2023 21:42:28'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:42:46' prior: 50629018!
test03CheckThatPepeHas2Addresses

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:42:53' prior: 50628940!
test02CheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:42:58'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:42:59'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:42:59'!
PASSED!

!testRun: #ImportTest #test04CheckThatAddressesAreReadCorrectly stamp: 'pau 6/22/2023 21:43:00'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:43:48'!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	"self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress2 province ) equals:  'BsAs'."
	
	
	
	

	
	! !

!methodRemoval: ImportTest #test04CheckThatAddressesAreReadCorrectly stamp: 'pau 6/22/2023 21:43:48'!
test04CheckThatAddressesAreReadCorrectly
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	"self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress2 province ) equals:  'BsAs'."
	
	
	
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:46:21' prior: 50629692!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:46:48'!
test05CheckThatJuanPerezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:47:15'!
test02CheckThatPepeSanchezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	! !

!methodRemoval: ImportTest #test02CheckThatPepeIsACustomer stamp: 'pau 6/22/2023 21:47:15'!
test02CheckThatPepeIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:47:21'!
test03CheckThatPepeSanchezHas2Addresses

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	! !

!methodRemoval: ImportTest #test03CheckThatPepeHas2Addresses stamp: 'pau 6/22/2023 21:47:21'!
test03CheckThatPepeHas2Addresses

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:47:28'!
test04CheckThatPepeSanchezAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !

!methodRemoval: ImportTest #test04CheckThatPepeAddressesAreCorrect stamp: 'pau 6/22/2023 21:47:28'!
test04CheckThatPepeAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe addresses first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:48:12' prior: 50629801!
test05CheckThatJuanPerezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	customerPepe := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Juan'.  
	self assert: customerPepe lastName equals: 'Perez'.    

	
	! !

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:48:13'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:48:14'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 21:48:15'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:48:15'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 21:48:16'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:48:17'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:48:22' prior: 50629955!
test05CheckThatJuanPerezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Juan'.  
	self assert: customerPepe lastName equals: 'Perez'.    

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:48:30' prior: 50629817!
test02CheckThatPepeSanchezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:48:52'!
test06CheckThatJuanPerezHas1Address

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 2
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:49:24' prior: 50630020!
test06CheckThatJuanPerezHas1Address

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress size ) equals: 1
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:49:35' prior: 50630034!
test06CheckThatJuanPerezHas1Address

	| customerJuan pepeAddress |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	pepeAddress := customerJuan addresses. 
	
	self assert: (pepeAddress size ) equals: 1
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:49:47' prior: 50630048!
test06CheckThatJuanPerezHas1Address

	| customerJuan juanAddress |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses. 
	
	self assert: (juanAddress size ) equals: 1
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:50:07' prior: 50629991!
test05CheckThatJuanPerezIsACustomer

	| customerJUan |
	self importCustomers. 
	
	customerJUan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJUan firstName equals: 'Juan'.  
	self assert: customerJUan lastName equals: 'Perez'.    

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:50:15' prior: 50630076!
test05CheckThatJuanPerezIsACustomer

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:51:05'!
test07CheckThatJuanPerezAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerJuan pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerJuan addresses first. 
	pepeAddress2 := customerJuan addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:51:23' prior: 50630105!
test07CheckThatJuanPerezAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerJuan juanAddress pepeAddress2 |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	pepeAddress2 := customerJuan addresses second. 
	
	self assert: (juanAddress streetName ) equals: 'San Martin'. 
	self assert: (juanAddress streetNumber ) equals: 3322. 
	self assert: (juanAddress town ) equals:'Olivos'.
	self assert: (juanAddress zipCode ) equals: 1636.
	self assert: (juanAddress province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:52:23' prior: 50630144!
test07CheckThatJuanPerezAddressesAreCorrect

	| customerJuan juanAddress |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	

	
	! !

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:52:25'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:52:46' prior: 50630183!
test07CheckThatJuanPerezAddressesAreCorrect

	| customerJuan juanAddress |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	

	
	! !

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:52:46'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:52:47'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 21:52:47'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:52:48'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 21:52:49'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:52:49'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 21:52:50'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:52:50'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:53:32'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:53:33'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 21:53:33'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:53:34'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 21:53:34'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:53:35'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 21:53:36'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:53:36'!
PASSED!
!Customer methodsFor: 'addresses' stamp: 'pau 6/22/2023 21:56:29'!
selectAddressesThatSatisfies: aBlockCondition
	^addresses select: aBlockCondition ! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:56:31'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 21:56:31'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:56:32'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 21:56:32'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:56:33'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 21:56:34'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:56:34'!
PASSED!
!Customer methodsFor: 'addresses' stamp: 'pau 6/22/2023 21:57:25'!
amountOfAddressesRegistered
	^addresses size! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:57:26'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 21:57:27'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:57:28'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 21:57:28'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:57:29'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 21:57:29'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:57:30'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:57:57' prior: 50629849!
test03CheckThatPepeSanchezHas2Addresses

	| customerPepe pepeAddress |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress := customerPepe addresses. 
	
	self assert: (pepeAddress amountOfAddressesRegistered ) equals: 2
	

	
	! !

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:57:59'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:58:18' prior: 50630337!
test03CheckThatPepeSanchezHas2Addresses

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2
	

	
	! !

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:58:23'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:58:24'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 21:58:25'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:58:25'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 21:58:26'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:58:27'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 21:58:27'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:58:28'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:58:42' prior: 50630062!
test06CheckThatJuanPerezHas1Address

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 21:58:45' prior: 50630394!
test06CheckThatJuanPerezHas1Address

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1

	

	
	! !

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 21:58:45'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 21:58:46'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 21:58:46'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 21:58:47'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 21:58:48'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 21:58:48'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 21:58:49'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 21:58:49'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 22:00:32' prior: 50629877!
test04CheckThatPepeSanchezAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															or: [anAddress streetNumber = 3322]]. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 22:00:37' prior: 50630446!
test04CheckThatPepeSanchezAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]]. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 22:00:38'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/22/2023 22:01:08' prior: 50630489!
test04CheckThatPepeSanchezAddressesAreCorrect
"No pedir adresses hay que mejorar el modelo para no violar el encapsulamiento "
	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 22:01:09'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/22/2023 22:01:10'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/22/2023 22:01:11'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/22/2023 22:01:11'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/22/2023 22:01:12'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/22/2023 22:01:12'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/22/2023 22:01:13'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/22/2023 22:01:14'!
PASSED!

----SNAPSHOT----(22 June 2023 23:30:15) CuisUniversity-5832.image priorSource: 9366758!

----QUIT----(22 June 2023 23:30:30) CuisUniversity-5832.image priorSource: 9566493!

----STARTUP---- (24 June 2023 15:33:29) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/customerImporter/linux64/CuisUniversity-5832.image!

!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:33:46' prior: 50628897!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:33:59' prior: 50630614!
test01CheckAmountOfCustomer

	| customerPepe |
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:34:14' prior: 50630621!
test01CheckAmountOfCustomer

	| customerPepe |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/24/2023 15:34:17'!
PASSED!

!testRun: #ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/24/2023 15:34:17'!
PASSED!

!testRun: #ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/24/2023 15:34:18'!
PASSED!

!testRun: #ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/24/2023 15:34:19'!
PASSED!

!testRun: #ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/24/2023 15:34:19'!
PASSED!

!testRun: #ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/24/2023 15:34:20'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:34:39' prior: 50630637!
test01CheckAmountOfCustomer

	| customerPepe |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:34:46'!
_test02CheckThatPepeSanchezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	! !

!methodRemoval: ImportTest #test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/24/2023 15:34:46'!
test02CheckThatPepeSanchezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:34:52'!
_test03CheckThatPepeSanchezHas2Addresses

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2
	

	
	! !

!methodRemoval: ImportTest #test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/24/2023 15:34:52'!
test03CheckThatPepeSanchezHas2Addresses

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:35:28' prior: 50630535!
test04CheckThatPepeSanchezAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:35:42' prior: 50630679!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:35:53' prior: 50630793!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:36:00'!
_test04CheckThatPepeSanchezAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	! !

!methodRemoval: ImportTest #test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/24/2023 15:36:00'!
test04CheckThatPepeSanchezAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:36:22' prior: 50630843!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 customerJuan |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:36:32'!
_test05CheckThatJuanPerezIsACustomer

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    

	
	! !

!methodRemoval: ImportTest #test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/24/2023 15:36:32'!
test05CheckThatJuanPerezIsACustomer

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:36:45' prior: 50630973!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 customerJuan |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1

	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:37:09' prior: 50631060!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:37:22'!
_test06CheckThatJuanPerezHas1Address

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1

	

	
	! !

!methodRemoval: ImportTest #test06CheckThatJuanPerezHas1Address stamp: 'pau 6/24/2023 15:37:22'!
test06CheckThatJuanPerezHas1Address

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1

	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:37:28'!
_test07CheckThatJuanPerezAddressesAreCorrect

	| customerJuan juanAddress |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	

	
	! !

!methodRemoval: ImportTest #test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/24/2023 15:37:28'!
test07CheckThatJuanPerezAddressesAreCorrect

	| customerJuan juanAddress |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:54:27' prior: 50631127!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:55:25' prior: 50631279!
test01CheckAmountOfCustomer

	| pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	pepeAddress1 := ((session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne addresses second. 
	
	self assert: (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne firstName equals: 'Pepe'.  
	self assert: (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne lastName equals: 'Sanchez'. 
	self assert: ((session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:54:27' prior: 50631356!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:59:30'!
customerPepe

	^ (session select: [:customer| 
		(customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 15:59:30' prior: 50631448!
test01CheckAmountOfCustomer

	| customerPepe pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	customerPepe := self customerPepe. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'. 
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:00:00' prior: 50631533!
test01CheckAmountOfCustomer

	| pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	pepeAddress1 := (self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := self customerPepe addresses second. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:00:22'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:00:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:01:20' prior: 50631606!
test01CheckAmountOfCustomer

	| pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	pepeAddress1 := (self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]] ) first . 
	pepeAddress2 := self customerPepe addresses second. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'customers' stamp: 'pau 6/24/2023 16:01:54'!
pepeFirstAdress

	^(self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]] ) first! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:02:07' prior: 50631684!
test01CheckAmountOfCustomer

	| pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	pepeAddress1 := self pepeFirstAdress. 
	pepeAddress2 := self customerPepe addresses second. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:02:09'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:02:11'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:02:13' prior: 50631764!
test01CheckAmountOfCustomer

	| pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	pepeAddress1 := self pepeFirstAdress. 
	
	pepeAddress2 := self customerPepe addresses second. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'customers' stamp: 'pau 6/24/2023 16:02:37'!
pepeSecondAdress

	^(self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]] ) first! !
!ImportTest methodsFor: 'customers' stamp: 'pau 6/24/2023 16:03:12' prior: 50631906!
pepeSecondAdress

	^(self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'Maipu' and: [anAddress streetNumber = 888]] ) first! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:03:28' prior: 50631838!
test01CheckAmountOfCustomer

	| pepeAddress1 pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	pepeAddress1 := self pepeFirstAdress. 
	
	pepeAddress2 := self pepeSecondAdress.
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:03:30'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:03:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:03:37' prior: 50631922!
test01CheckAmountOfCustomer

	| pepeAddress2 customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	pepeAddress2 := self pepeSecondAdress.
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:03:40' prior: 50631995!
test01CheckAmountOfCustomer

	| customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:03:43'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:03:46'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:04:15' prior: 50632062!
test01CheckAmountOfCustomer

	| customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) anyOne. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:04:28'!
customerJuan

	^ (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:04:28' prior: 50632135!
test01CheckAmountOfCustomer

	| customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	customerJuan := self customerJuan. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:04:37' prior: 50632209!
test01CheckAmountOfCustomer

	| customerJuan juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1.
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:04:41'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:04:43'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:05:28' prior: 50632272!
test01CheckAmountOfCustomer

	| juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	juanAddress := self customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:05:34' prior: 50632340!
test01CheckAmountOfCustomer

	| juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	juanAddress := self customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:05:36'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:05:38'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:06:00'!
juanAdress

	^ self customerJuan addresses first! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:06:00' prior: 50632391!
test01CheckAmountOfCustomer

	| juanAddress |
	
	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	juanAddress := self juanAdress. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 16:06:49' prior: 50632448!
juanAdress

	^ self customerJuan select: [:anAddress| anAddress streetName = 'sanma']. ! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 16:07:32' prior: 50632504!
juanAdress

	^ self customerJuan select: [:anAddress| anAddress streetName = 'Alem' and: [ anAddress streetNumber = 1122]]. ! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:07:47'!
ERROR!
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 16:08:20' prior: 50632510!
juanAdress

	^ (self customerJuan selectAddressesThatSatisfies: [:anAddress| anAddress streetName = 'Alem' and: [ anAddress streetNumber = 1122]]) first. ! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 16:08:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:08:42' prior: 50632453!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:58:24'!
assertCustomer

	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:58:24' prior: 50632531!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assertCustomer. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:59:01'!
assertCustomer: customerName

	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 16:59:01' prior: 50632590!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assertCustomer: 'Pepe'. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertCustomer stamp: 'pau 6/24/2023 16:59:01'!
assertCustomer

	self assert: self customerPepe firstName equals: 'Pepe'.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 16:59:01' prior: 50632634!
assertCustomer: customerName

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 16:59:36'!
assertCustomer: customerName lastName: customerLastName 

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 16:59:36' prior: 50632645!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assertCustomer: 'Pepe' lastName: 'Sanchez'. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertCustomer: stamp: 'pau 6/24/2023 16:59:36'!
assertCustomer: customerName

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: 'Sanchez'. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 16:59:36' prior: 50632709!
assertCustomer: customerName lastName: customerLastName 

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:00:25'!
assertCustomer: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:00:25' prior: 50632721!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assertCustomer: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertCustomer:lastName: stamp: 'pau 6/24/2023 17:00:25'!
assertCustomer: customerName lastName: customerLastName 

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals: 2!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:00:25' prior: 50632787!
assertCustomer: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals:amountOfAddresses! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:02:05'!
assertCustomerhasName: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals:amountOfAddresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:02:05' prior: 50632800!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assertCustomerhasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertCustomer:lastName:hasAddresses: stamp: 'pau 6/24/2023 17:02:05'!
assertCustomer: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals:amountOfAddresses!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:03:08'!
XXX: customer assertCustomerhasName: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals:amountOfAddresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:03:08' prior: 50632883!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self XXX: customer assertCustomerhasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertCustomerhasName:lastName:hasAddresses: stamp: 'pau 6/24/2023 17:03:08'!
assertCustomerhasName: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals:amountOfAddresses!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:03:38'!
assert: customer hasName: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals:amountOfAddresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:03:38' prior: 50632955!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: customer hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #XXX:assertCustomerhasName:lastName:hasAddresses: stamp: 'pau 6/24/2023 17:03:38'!
XXX: customer assertCustomerhasName: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: self customerPepe firstName equals: customerName.  
	self assert: self customerPepe lastName equals: customerLastName. 
	self assert: (self customerPepe amountOfAddressesRegistered ) equals:amountOfAddresses!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:03:51' prior: 50633014!
assert: customer hasName: customerName lastName: customerLastName hasAddresses: amountOfAddresses  

	self assert: customer firstName equals: customerName.  
	self assert: customer lastName equals: customerLastName. 
	self assert: (customer amountOfAddressesRegistered ) equals:amountOfAddresses! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:04:03' prior: 50633028!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	self assert: self customerJuan firstName equals: 'Juan'.  
	self assert: self customerJuan lastName equals: 'Perez'.    
	
	
	self assert: (self customerJuan amountOfAddressesRegistered ) equals: 1.
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:04:06'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:04:09'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:04:47' prior: 50633100!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:04:50'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:04:53'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:05:21'!
assertAddress

	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:05:21' prior: 50633152!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assertAddress.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:05:55'!
assertAddress: streetName

	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:05:55' prior: 50633214!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assertAddress: 'San Martin'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertAddress stamp: 'pau 6/24/2023 17:05:55'!
assertAddress

	self assert: (self pepeFirstAdress streetName ) equals: 'San Martin'. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:05:55' prior: 50633247!
assertAddress: streetName

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:06:18'!
assertAddress: streetName number: streetNumber 

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:06:18' prior: 50633261!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assertAddress: 'San Martin' number: 3322.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertAddress: stamp: 'pau 6/24/2023 17:06:18'!
assertAddress: streetName

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: 3322. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:06:18' prior: 50633321!
assertAddress: streetName number: streetNumber 

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:06:48'!
assertAddress: streetName number: streetNumber town: town  

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:06:48' prior: 50633336!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assertAddress: 'San Martin' number: 3322 town: 'Olivos'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertAddress:number: stamp: 'pau 6/24/2023 17:06:48'!
assertAddress: streetName number: streetNumber 

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:'Olivos'.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:06:48' prior: 50633398!
assertAddress: streetName number: streetNumber town: town  

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:07:42'!
assertAddress: streetName number: streetNumber town: town zipCode: zipCode   

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:07:43' prior: 50633414!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assertAddress: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertAddress:number:town: stamp: 'pau 6/24/2023 17:07:43'!
assertAddress: streetName number: streetNumber town: town  

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: 1636.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:07:43' prior: 50633478!
assertAddress: streetName number: streetNumber town: town zipCode: zipCode   

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:08:21'!
assertAddress: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:08:21' prior: 50633494!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assertAddress: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertAddress:number:town:zipCode: stamp: 'pau 6/24/2023 17:08:21'!
assertAddress: streetName number: streetNumber town: town zipCode: zipCode   

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:08:21' prior: 50633559!
assertAddress: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  province! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:08:37' prior: 50633628!
assertAddress: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  province.! !

----SNAPSHOT----(24 June 2023 17:09:36) CuisUniversity-5832.image priorSource: 9566582!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:10:26'!
assert: address assertAddress: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:10:26' prior: 50633576!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: assertAdd assertAddress: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assertAddress:number:town:zipCode:province: stamp: 'pau 6/24/2023 17:10:26'!
assertAddress: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  province.!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:10:42'!
assert: address street: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:10:42' prior: 50633681!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: assertAdd street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assert:assertAddress:number:town:zipCode:province: stamp: 'pau 6/24/2023 17:10:42'!
assert: address assertAddress: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (self pepeFirstAdress streetName ) equals: streetName. 
	self assert: (self pepeFirstAdress streetNumber ) equals: streetNumber. 
	self assert: (self pepeFirstAdress town ) equals:town.
	self assert: (self pepeFirstAdress zipCode ) equals: zipCode.
	self assert: (self pepeFirstAdress province ) equals:  province.!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:11:19' prior: 50633733!
assert: address street: streetName number: streetNumber town: town zipCode: zipCode province: province    

	self assert: (address streetName ) equals: streetName. 
	self assert: (address streetNumber ) equals: streetNumber. 
	self assert: (address town ) equals:town.
	self assert: (address zipCode ) equals: zipCode.
	self assert: (address province ) equals:  province.! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:11:20'!
ERROR!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:11:21'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:11:49' prior: 50633750!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: self pepeFirstAdress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:11:52'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:11:54'!
PASSED!
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:12:31'!
pepeFirstAddress

	^(self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]] ) first! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:12:31' prior: 50633823!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: (self pepeSecondAdress streetName ) equals: 'Maipu'. 
	self assert: (self pepeSecondAdress streetNumber ) equals: 888. 
	self assert: (self pepeSecondAdress town ) equals:'Florida'.
	self assert: (self pepeSecondAdress zipCode ) equals: 1122.
	self assert: (self pepeSecondAdress province ) equals:  'Buenos Aires'.

	
	
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #pepeFirstAdress stamp: 'pau 6/24/2023 17:12:31'!
pepeFirstAdress

	^(self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]] ) first!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:12:35'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:12:37'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:13:35' prior: 50633874!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeFirstAddress street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
		
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:13:37'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:14:17' prior: 50633924!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeSecondAdress street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
		
	
	self assert: (self juanAdress streetName ) equals: 'Alem'. 
	self assert: (self juanAdress streetNumber ) equals: 1122. 
	self assert: (self juanAdress town ) equals:'CABA'.
	self assert: (self juanAdress zipCode ) equals: 1001.
	self assert: (self juanAdress province ) equals:  'CABA'.
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:14:20'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:14:21'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:15:28' prior: 50633957!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeSecondAdress street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
		
	self assert: self pepeSecondAdress street: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:15:30'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:15:47' prior: 50633992!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeSecondAdress street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
		
	self assert: self juanAdress street: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:15:49'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:15:51'!
PASSED!
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:16:18'!
juanAddress

	^ (self customerJuan selectAddressesThatSatisfies: [:anAddress| anAddress streetName = 'Alem' and: [ anAddress streetNumber = 1122]]) first. ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:16:18' prior: 50634019!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeSecondAdress street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
		
	self assert: self juanAddress street: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #juanAdress stamp: 'pau 6/24/2023 17:16:18'!
juanAdress

	^ (self customerJuan selectAddressesThatSatisfies: [:anAddress| anAddress streetName = 'Alem' and: [ anAddress streetNumber = 1122]]) first. !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:16:39'!
customer

	^ (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:17:28' prior: 50634088!
customer

	^ (session select: [:customer| (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:17:42'!
customer: IdentificationType

	^ (session select: [:customer| (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer) anyOne! !

!methodRemoval: ImportTest #customer stamp: 'pau 6/24/2023 17:17:42'!
customer

	^ (session select: [:customer| (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer) anyOne!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:17:42' prior: 50634105!
customer: IdentificationType

	^ (session select: [:customer| (customer identificationType = IdentificationType) and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:18:06'!
customer: IdentificationType number: idNumber 

	^ (session select: [:customer| (customer identificationType = IdentificationType) and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer) anyOne! !

!methodRemoval: ImportTest #customer: stamp: 'pau 6/24/2023 17:18:06'!
customer: IdentificationType

	^ (session select: [:customer| (customer identificationType = IdentificationType) and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer) anyOne!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:18:06' prior: 50634130!
customer: IdentificationType number: idNumber 

	^ (session select: [:customer| (customer identificationType = IdentificationType) and: [customer identificationNumber = idNumber] ] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:18:18'!
customerId: IdentificationType number: idNumber 

	^ (session select: [:customer| (customer identificationType = IdentificationType) and: [customer identificationNumber = idNumber] ] ofType: Customer) anyOne! !

!methodRemoval: ImportTest #customer:number: stamp: 'pau 6/24/2023 17:18:18'!
customer: IdentificationType number: idNumber 

	^ (session select: [:customer| (customer identificationType = IdentificationType) and: [customer identificationNumber = idNumber] ] ofType: Customer) anyOne!
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:18:24' prior: 50634159!
customerId: IdType number: idNumber 

	^ (session select: [:customer| (customer identificationType = IdType) and: [customer identificationNumber = idNumber] ] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:18:48' prior: 50634178!
customerId: idType number: idNumber 

	^ (session select: [:customer| (customer identificationType = idType) and: [customer identificationNumber = idNumber] ] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:19:33' prior: 50632201!
customerJuan

	^ self customerId: 'C' number: '23-25666777-9'! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:19:34'!
PASSED!
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:20:02'!
selectCustomerWithId: idType number: idNumber 

	^ (session select: [:customer| (customer identificationType = idType) and: [customer identificationNumber = idNumber] ] ofType: Customer) anyOne! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:20:02' prior: 50634196!
customerJuan

	^ self selectCustomerWithId: 'C' number: '23-25666777-9'! !

!methodRemoval: ImportTest #customerId:number: stamp: 'pau 6/24/2023 17:20:02'!
customerId: idType number: idNumber 

	^ (session select: [:customer| (customer identificationType = idType) and: [customer identificationNumber = idNumber] ] ofType: Customer) anyOne!
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:23:53' prior: 50631525!
customerPepe

	^ self selectCustomerWithId: 'D' number: '22333444'. 
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:23:54'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:26:55' prior: 50634057!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeSecondAdress street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
		
	self assert: self juanAddress street: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:28:26' prior: 50634236!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self pepeFirstAddress street: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeSecondAdress street: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
		
	self assert: self juanAddress street: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:31:37' prior: 50633803!
assert: address street: streetName number: streetNumber town: town zipCode: zipCode province: province    
	
	self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]]. 
	
	self assert: (address streetName ) equals: streetName. 
	self assert: (address streetNumber ) equals: streetNumber. 
	self assert: (address town ) equals:town.
	self assert: (address zipCode ) equals: zipCode.
	self assert: (address province ) equals:  province.! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:32:02' prior: 50634284!
assert: customer street: streetName number: streetNumber town: town zipCode: zipCode province: province    
	
	self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]]. 
	
	self assert: (customer streetName ) equals: streetName. 
	self assert: (customer streetNumber ) equals: streetNumber. 
	self assert: (customer town ) equals:town.
	self assert: (customer zipCode ) equals: zipCode.
	self assert: (customer province ) equals:  province.! !
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:32:25'!
assert: customer hasAddressWithStreet: streetName number: streetNumber town: town zipCode: zipCode province: province    
	
	self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]]. 
	
	self assert: (customer streetName ) equals: streetName. 
	self assert: (customer streetNumber ) equals: streetNumber. 
	self assert: (customer town ) equals:town.
	self assert: (customer zipCode ) equals: zipCode.
	self assert: (customer province ) equals:  province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 17:32:25' prior: 50634260!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self pepeFirstAddress hasAddressWithStreet: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self pepeSecondAdress hasAddressWithStreet: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
		
	self assert: self juanAddress hasAddressWithStreet: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #assert:street:number:town:zipCode:province: stamp: 'pau 6/24/2023 17:32:25'!
assert: customer street: streetName number: streetNumber town: town zipCode: zipCode province: province    
	
	self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]]. 
	
	self assert: (customer streetName ) equals: streetName. 
	self assert: (customer streetNumber ) equals: streetNumber. 
	self assert: (customer town ) equals:town.
	self assert: (customer zipCode ) equals: zipCode.
	self assert: (customer province ) equals:  province.!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:36:11' prior: 50634322!
assert: customer hasAddressWithStreet: streetName number: streetNumber town: town zipCode: zipCode province: province    
	
	self assert: (customer selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = streetName and: 
											     anAddress streetNumber = streetNumber and:
												anAddress town  = town and: 
												anAddress zipCode  = zipCode and:
												anAddress province = province 
											] size) notEmpty . ! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:36:13'!
ERROR!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:36:13'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:37:01' prior: 50634342!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerPepe hasAddressWithStreet: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self customerPepe hasAddressWithStreet: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
		
	self assert: self juanAddress hasAddressWithStreet: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:37:02'!
ERROR!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:37:43' prior: 50634387!
assert: customer hasAddressWithStreet: streetName number: streetNumber town: town zipCode: zipCode province: province    
	
	self assert: ((customer selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = streetName and: 
											     anAddress streetNumber = streetNumber and:
												anAddress town  = town and: 
												anAddress zipCode  = zipCode and:
												anAddress province = province 
											]) size) notEmpty . ! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:37:44'!
ERROR!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:37:45'!
ERROR!
!ImportTest methodsFor: 'asserts' stamp: 'pau 6/24/2023 17:38:02' prior: 50634438!
assert: customer hasAddressWithStreet: streetName number: streetNumber town: town zipCode: zipCode province: province    
	
	self assert: (customer selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = streetName and: 
											     anAddress streetNumber = streetNumber and:
												anAddress town  = town and: 
												anAddress zipCode  = zipCode and:
												anAddress province = province 
											]) notEmpty . ! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:38:04'!
ERROR!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:38:05'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:38:22' prior: 50634410!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	
	self assert: self customerPepe hasAddressWithStreet: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	self assert: self customerPepe hasAddressWithStreet: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
		
	self assert: self customerJuan hasAddressWithStreet: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:38:24'!
PASSED!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:38:25'!
PASSED!

!methodRemoval: ImportTest #juanAddress stamp: 'pau 6/24/2023 17:38:38'!
juanAddress

	^ (self customerJuan selectAddressesThatSatisfies: [:anAddress| anAddress streetName = 'Alem' and: [ anAddress streetNumber = 1122]]) first. !

!methodRemoval: ImportTest #pepeFirstAddress stamp: 'pau 6/24/2023 17:38:40'!
pepeFirstAddress

	^(self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' and: [anAddress streetNumber = 3322]] ) first!

!methodRemoval: ImportTest #pepeSecondAdress stamp: 'pau 6/24/2023 17:38:42'!
pepeSecondAdress

	^(self customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'Maipu' and: [anAddress streetNumber = 888]] ) first!

!testRun: #ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:38:48'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:41:27' prior: 50634484!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	self assert: self customerPepe hasAddressWithStreet: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assert: self customerPepe hasAddressWithStreet: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	self assert: self customerJuan hasAddressWithStreet: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:43:51'!
customerPepeIsImplortedCorrectly

	self assert: self customerPepe hasName: 'Pepe' lastName: 'Sanchez' hasAddresses: 2. 
	self assert: self customerPepe hasAddressWithStreet: 'San Martin' number: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assert: self customerPepe hasAddressWithStreet: 'Maipu' number: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:43:51' prior: 50634540!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self customerPepeIsImplortedCorrectly.
	
	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	self assert: self customerJuan hasAddressWithStreet: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'.
	
	
	
	
	
	
	
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:44:05'!
customerJuanIsImportedCorrectly

	self assert: self customerJuan hasName: 'Juan' lastName: 'Perez' hasAddresses: 1. 
	self assert: self customerJuan hasAddressWithStreet: 'Alem' number: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:44:05' prior: 50634579!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self customerPepeIsImplortedCorrectly.
	
	self customerJuanIsImportedCorrectly.
	
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #_test07CheckThatJuanPerezAddressesAreCorrect stamp: 'pau 6/24/2023 17:44:13'!
_test07CheckThatJuanPerezAddressesAreCorrect

	| customerJuan juanAddress |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	juanAddress := customerJuan addresses first. 
	
	self assert: (juanAddress streetName ) equals: 'Alem'. 
	self assert: (juanAddress streetNumber ) equals: 1122. 
	self assert: (juanAddress town ) equals:'CABA'.
	self assert: (juanAddress zipCode ) equals: 1001.
	self assert: (juanAddress province ) equals:  'CABA'.
	
	
	
	
	

	
	!

!methodRemoval: ImportTest #_test06CheckThatJuanPerezHas1Address stamp: 'pau 6/24/2023 17:44:16'!
_test06CheckThatJuanPerezHas1Address

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	. 
	
	self assert: (customerJuan amountOfAddressesRegistered ) equals: 1

	

	
	!

!methodRemoval: ImportTest #_test05CheckThatJuanPerezIsACustomer stamp: 'pau 6/24/2023 17:44:18'!
_test05CheckThatJuanPerezIsACustomer

	| customerJuan |
	self importCustomers. 
	
	customerJuan := (session select: [:customer| (customer identificationNumber = '23-25666777-9') and: (customer identificationType = 'C')] ofType: Customer) atRandom. 
	
	self assert: customerJuan firstName equals: 'Juan'.  
	self assert: customerJuan lastName equals: 'Perez'.    

	
	!

!methodRemoval: ImportTest #_test04CheckThatPepeSanchezAddressesAreCorrect stamp: 'pau 6/24/2023 17:44:20'!
_test04CheckThatPepeSanchezAddressesAreCorrect

	| customerPepe pepeAddress1 pepeAddress2 |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	pepeAddress1 := (customerPepe selectAddressesThatSatisfies: [:anAddress | anAddress  streetName = 'San Martin' 
															and: [anAddress streetNumber = 3322]] ) first. 
	pepeAddress2 := customerPepe addresses second. 
	
	self assert: (pepeAddress1 streetName ) equals: 'San Martin'. 
	self assert: (pepeAddress1 streetNumber ) equals: 3322. 
	self assert: (pepeAddress1 town ) equals:'Olivos'.
	self assert: (pepeAddress1 zipCode ) equals: 1636.
	self assert: (pepeAddress1 province ) equals:  'BsAs'.
	
	self assert: (pepeAddress2 streetName ) equals: 'Maipu'. 
	self assert: (pepeAddress2 streetNumber ) equals: 888. 
	self assert: (pepeAddress2 town ) equals:'Florida'.
	self assert: (pepeAddress2 zipCode ) equals: 1122.
	self assert: (pepeAddress2 province ) equals:  'Buenos Aires'.
	
	"import customer va a ser un method object, desacoplar archivo del customer, sacar codigo repetido"
	
	
	
	

	
	!

!methodRemoval: ImportTest #_test03CheckThatPepeSanchezHas2Addresses stamp: 'pau 6/24/2023 17:44:22'!
_test03CheckThatPepeSanchezHas2Addresses

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: (customerPepe amountOfAddressesRegistered ) equals: 2
	

	
	!

!methodRemoval: ImportTest #_test02CheckThatPepeSanchezIsACustomer stamp: 'pau 6/24/2023 17:44:24'!
_test02CheckThatPepeSanchezIsACustomer

	| customerPepe |
	self importCustomers. 
	
	customerPepe := (session select: [:customer| (customer identificationNumber = '22333444') and: (customer identificationType = 'D')] ofType: Customer) atRandom. 
	
	self assert: customerPepe firstName equals: 'Pepe'.  
	self assert: customerPepe lastName equals: 'Sanchez'.    

	
	!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 17:44:55'!
test01TextFileWithTwoCustomersIsImportedCorrectly

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self customerPepeIsImplortedCorrectly.
	
	self customerJuanIsImportedCorrectly.
	
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #test01CheckAmountOfCustomer stamp: 'pau 6/24/2023 17:44:55'!
test01CheckAmountOfCustomer

	self importCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self customerPepeIsImplortedCorrectly.
	
	self customerJuanIsImportedCorrectly.
	
	
	
	
	
	
	
	
	!

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 17:45:00'!
PASSED!

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 17:45:01'!
PASSED!
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:47:13'!
customerInputFile
	^'C,Pepe,Sanchez,D,22333444
	A,San Martin,3322,Olivos,1636,BsAs
	A,Maipu,888,Florida,1122,Buenos Aires
	C,Juan,Perez,C,23-25666777-9
	A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'customers and addresses' stamp: 'pau 6/24/2023 17:47:40'!
inputFileWithTwoCustomers
	^'C,Pepe,Sanchez,D,22333444
	A,San Martin,3322,Olivos,1636,BsAs
	A,Maipu,888,Florida,1122,Buenos Aires
	C,Juan,Perez,C,23-25666777-9
	A,Alem,1122,CABA,1001,CABA'! !

!methodRemoval: ImportTest #customerInputFile stamp: 'pau 6/24/2023 17:47:40'!
customerInputFile
	^'C,Pepe,Sanchez,D,22333444
	A,San Martin,3322,Olivos,1636,BsAs
	A,Maipu,888,Florida,1122,Buenos Aires
	C,Juan,Perez,C,23-25666777-9
	A,Alem,1122,CABA,1001,CABA'!

a := 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'!

a nextLine!

 a:= Stream with: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'. !

 a:= ReadStream with: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'. !

 a:= ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA' from: 1 to: 10. 
!

b:= 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'. !

 a:= ReadStream on: b from: 1 to: (b size). !

a nextLine!

a nextLine!

a nextLine!

a nextLine!

a nextLine!

a nextLine!

a nextLine!

 nil !

 nil !

 nil !

 nil !

 nil !
!ImportTest methodsFor: 'inputFIle' stamp: 'pau 6/24/2023 17:58:37' prior: 50634770!
inputFileWithTwoCustomers
	| textFile |
	textFile := 'C,Pepe,Sanchez,D,22333444
	A,San Martin,3322,Olivos,1636,BsAs
	A,Maipu,888,Florida,1122,Buenos Aires
	C,Juan,Perez,C,23-25666777-9
	A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'inputFIle' stamp: 'pau 6/24/2023 17:59:12' prior: 50634821!
inputFileWithTwoCustomers
	| textFile |
	textFile := 'C,Pepe,Sanchez,D,22333444
	A,San Martin,3322,Olivos,1636,BsAs
	A,Maipu,888,Florida,1122,Buenos Aires
	C,Juan,Perez,C,23-25666777-9
	A,Alem,1122,CABA,1001,CABA'.
	
	^ ReadStream on: textFile from: 1 to: textFile size.! !

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 17:59:14'!
PASSED!

b:= 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.  

 a:= ReadStream on: b from: 1 to: b size. !

a nextLine!
!Customer class methodsFor: 'importing' stamp: 'pau 6/24/2023 18:01:38' prior: 50628569!
importCustomers

	"
	self importCustomers
	
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth asNumber.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	"! !

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 18:01:58'!
PASSED!
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/24/2023 18:02:14' prior: 50629417!
importCustomers
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.! !

a close!

UniFileStream new open: a forWrite: false.!

UniFileStream new open: b forWrite: false.!

UniFileStream new open: b forWrite: false.!
!ImportTest methodsFor: 'import customer' stamp: 'pau 6/24/2023 18:04:35'!
importCustomersFrom: inputStream
	| newCustomer line |

	"inputStream := UniFileStream new open: 'input.txt' forWrite: false."

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.! !

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 18:04:37'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 18:04:56' prior: 50634733!
test01TextFileWithTwoCustomersIsImportedCorrectly

	self importCustomersFrom: self inputFileWithTwoCustomers. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self customerPepeIsImplortedCorrectly.
	
	self customerJuanIsImportedCorrectly.
	
	
	
	
	
	
	
	
	! !

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 18:04:57'!
FAILURE!

a Customer!
!ImportTest methodsFor: 'inputFIle' stamp: 'pau 6/24/2023 18:07:19' prior: 50634831!
inputFileWithTwoCustomers
	| textFile |
	textFile := 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.
	
	^ ReadStream on: textFile from: 1 to: textFile size.! !

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 18:07:51'!
PASSED!
!ExtractToMethodObjectForm methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 18:13:54'!
shouldAutoHighlight
	self shouldBeImplemented.! !
!ExtractToMethodObjectForm methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 18:14:04' prior: 50635006!
shouldAutoHighlight
	^false! !

----SNAPSHOT----(24 June 2023 18:16:05) CuisUniversity-5832.image priorSource: 9664334!

!classDefinition: #ImportCustomer category: 'CustomerImporter' stamp: 'pau 6/24/2023 18:17:07'!
Object subclass: #ImportCustomer
	instanceVariableNames: 'databaseSession inputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportCustomer class methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 18:17:07'!
importCustomerOn: aDatabaseSession from: anInputStream
	^self new initializeImportCustomerOn: aDatabaseSession from: anInputStream! !
!ImportCustomer methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 18:17:07'!
initializeImportCustomerOn: aDatabaseSession from: anInputStream
	databaseSession := aDatabaseSession.
	inputStream := anInputStream.! !
!ImportCustomer methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 18:17:07'!
import
	| newCustomer line |

	"inputStream := UniFileStream new open: 'input.txt' forWrite: false."

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			databaseSession persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/24/2023 18:17:07' prior: 50634936!
importCustomersFrom: inputStream
	(ImportCustomer importCustomerOn: session from: inputStream) import! !

----SNAPSHOT----(24 June 2023 18:18:08) CuisUniversity-5832.image priorSource: 9707646!

!methodRemoval: Customer class #importCustomers stamp: 'pau 6/24/2023 18:18:25'!
importCustomers

	"
	self importCustomers
	
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth asNumber.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	"!

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 18:18:40'!
PASSED!

!testRun: #ImportTest #test01TextFileWithTwoCustomersIsImportedCorrectly stamp: 'pau 6/24/2023 18:18:41'!
PASSED!

----SNAPSHOT----(24 June 2023 18:19:25) CuisUniversity-5832.image priorSource: 9709768!

!methodRemoval: ImportTest #importCustomersFrom: stamp: 'pau 6/24/2023 18:19:41'!
importCustomersFrom: inputStream
	(ImportCustomer importCustomerOn: session from: inputStream) import!
!ImportTest methodsFor: 'tests' stamp: 'pau 6/24/2023 18:19:41' prior: 50634975!
test01TextFileWithTwoCustomersIsImportedCorrectly

	(ImportCustomer importCustomerOn: session from: self inputFileWithTwoCustomers) import. 
	
	self assert: (session selectAllOfType: Customer ) size equals: 2. 
	
	self customerPepeIsImplortedCorrectly.
	
	self customerJuanIsImportedCorrectly.
	
	
	
	
	
	
	
	
	! !

!methodRemoval: ImportTest #importCustomers stamp: 'pau 6/24/2023 18:19:52'!
importCustomers
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.!
!ImportCustomer methodsFor: 'evaluating' stamp: 'pau 6/24/2023 18:21:31' prior: 50635040!
import
	| newCustomer line |
	
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth .
			databaseSession persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.! !

----SNAPSHOT----(24 June 2023 18:23:35) CuisUniversity-5832.image priorSource: 9711365!

----QUIT----(24 June 2023 18:27:37) CuisUniversity-5832.image priorSource: 9714183!