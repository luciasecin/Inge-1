

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (22 May 2023 21:15:04) as /home/clinux01/Documentos/porta/portfolio/CuisUniversity-5799.image!


----End fileIn of /home/clinux01/Documentos/porta/Portfolio-Solucion.st----!

TestCase subclass: #TransfersTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransfersTest category: 'Portfolio-Solucion' stamp: 'luct 5/22/2023 21:17:04'!
TestCase subclass: #TransfersTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #TransfersTest as: #TransferenceTest stamp: 'luct 5/22/2023 21:22:37'!
Smalltalk renameClassNamed: #TransfersTest as: #TransferenceTest!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'luct 5/22/2023 21:30:34'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'nil' stamp: 'luct 5/22/2023 21:30:26'!
test01EmptyTransactionDoesntChangeAccountBalances

	|accountToTransferFrom accountToTransferTo transference |
	
	accountToTransferFrom := ReceptiveAccount new.
	accountToTransferTo := ReceptiveAccount new.
	
	transference := Transference from: accountToTransferFrom transfer: 0 to: accountToTransferTo.
	
	self assert: (accountToTransferFrom balance) equals: 0.
	self assert: (accountToTransferTo balance) equals: 0.! !

!testRun: #TransferenceTest #test01EmptyTransactionDoesntChangeAccountBalances stamp: 'luct 5/22/2023 21:30:48'!
ERROR!

!testRun: #TransferenceTest #test01EmptyTransactionDoesntChangeAccountBalances stamp: 'luct 5/22/2023 21:30:48'!
ERROR!
!Transference class methodsFor: 'instance creation' stamp: 'luct 5/22/2023 21:30:54'!
from: aReceptiveAccount transfer: aSmallInteger to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aReceptiveAccount transfer: aSmallInteger to: aReceptiveAccount3 ! !
!Transference class methodsFor: 'instance creation' stamp: 'luct 5/22/2023 21:32:07' prior: 50620636!
from: senderAccount transfer: anAmount to: receivingAccount
	
	^self new
	" initializeFrom: aReceptiveAccount transfer: aSmallInteger to: aReceptiveAccount3 "! !

!testRun: #TransferenceTest #test01EmptyTransactionDoesntChangeAccountBalances stamp: 'luct 5/22/2023 21:32:10'!
PASSED!

!testRun: #TransferenceTest #test01EmptyTransactionDoesntChangeAccountBalances stamp: 'luct 5/22/2023 21:32:20'!
PASSED!
!TransferenceTest methodsFor: 'test' stamp: 'luct 5/22/2023 21:38:05'!
test01TransactionChangesAccountBalancesCorrectly

	|senderAccount receivingAccount |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	senderAccount transfer: 10 to: receivingAccount.
	
	"transference := Transference from: accountToTransferFrom transfer: 0 to: accountToTransferTo."
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.! !

!methodRemoval: TransferenceTest #test01EmptyTransactionDoesntChangeAccountBalances stamp: 'luct 5/22/2023 21:38:10'!
test01EmptyTransactionDoesntChangeAccountBalances

	|accountToTransferFrom accountToTransferTo transference |
	
	accountToTransferFrom := ReceptiveAccount new.
	accountToTransferTo := ReceptiveAccount new.
	
	transference := Transference from: accountToTransferFrom transfer: 0 to: accountToTransferTo.
	
	self assert: (accountToTransferFrom balance) equals: 0.
	self assert: (accountToTransferTo balance) equals: 0.!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:38:15'!
ERROR!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:38:15'!
ERROR!
!ReceptiveAccount methodsFor: 'transference' stamp: 'luct 5/22/2023 21:38:25'!
transfer: aRenameMe1 to: receivingAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transference' stamp: 'luct 5/22/2023 21:39:33' prior: 50620704!
transfer: anAmount to: receivingAccount 
	^Transference from: self transfer: anAmount to: receivingAccount ! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:39:40'!
FAILURE!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:39:55'!
FAILURE!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:39:55'!
FAILURE!
!TransferenceTest methodsFor: 'test' stamp: 'luct 5/22/2023 21:40:18' prior: 50620663!
test01TransactionChangesAccountBalancesCorrectly

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := senderAccount transfer: 10 to: receivingAccount.
	
	"transference := Transference from: accountToTransferFrom transfer: 0 to: accountToTransferTo."
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:40:20'!
FAILURE!
!TransferenceTest methodsFor: 'test' stamp: 'luct 5/22/2023 21:40:34' prior: 50620728!
test01TransactionChangesAccountBalancesCorrectly

	|senderAccount receivingAccount |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.! !
!ReceptiveAccount methodsFor: 'transference' stamp: 'luct 5/22/2023 21:42:07' prior: 50620710!
transfer: anAmount to: receivingAccount 
	Deposit with: 10 to: receivingAccount.
	^Transference from: self transfer: anAmount to: receivingAccount ! !
!ReceptiveAccount methodsFor: 'transference' stamp: 'luct 5/22/2023 21:42:56' prior: 50620763!
transfer: anAmount to: receivingAccount 
	Deposit register: 10 on: receivingAccount.
	Withdraw register: 10 on: self.! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:43:00'!
PASSED!
!TransferenceTest methodsFor: 'test' stamp: 'luct 5/22/2023 21:47:08'!
test02TransactionChangesAccountBalancesCorrectly

	|senderAccount receivingAccount |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.! !
!TransferenceTest methodsFor: 'test' stamp: 'luct 5/22/2023 21:50:37' prior: 50620749!
test01TransactionChangesAccountBalancesCorrectly

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.! !

!methodRemoval: TransferenceTest #test02TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:50:41'!
test02TransactionChangesAccountBalancesCorrectly

	|senderAccount receivingAccount |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.!

!methodRemoval: ReceptiveAccount #transfer:to: stamp: 'luct 5/22/2023 21:50:59'!
transfer: anAmount to: receivingAccount 
	Deposit register: 10 on: receivingAccount.
	Withdraw register: 10 on: self.!
!Transference class methodsFor: 'instance creation' stamp: 'luct 5/22/2023 21:51:19' prior: 50620648!
from: senderAccount transfer: anAmount to: receivingAccount
	Deposit register: 10 on: receivingAccount.
	Withdraw register: 10 on: self.
	^self new! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:51:26'!
ERROR!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:51:26'!
ERROR!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:51:36'!
ERROR!
!Transference class methodsFor: 'instance creation' stamp: 'luct 5/22/2023 21:52:01' prior: 50620831!
from: senderAccount transfer: anAmount to: receivingAccount
	Deposit register: 10 on: receivingAccount.
	Withdraw register: 10 on: senderAccount 
	^self new! !
!Transference class methodsFor: 'instance creation' stamp: 'luct 5/22/2023 21:52:02' prior: 50620851!
from: senderAccount transfer: anAmount to: receivingAccount
	Deposit register: 10 on: receivingAccount.
	Withdraw register: 10 on: senderAccount.
	^self new! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:52:04'!
PASSED!
!TransferenceTest methodsFor: 'test' stamp: 'luct 5/22/2023 21:53:31'!
test02TransactionKnowsSenderAccount

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.! !

!methodRemoval: TransferenceTest #test02TransactionKnowsSenderAccount stamp: 'luct 5/22/2023 21:53:38'!
test02TransactionKnowsSenderAccount

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'luct 5/22/2023 21:53:40'!
PASSED!

----SNAPSHOT----(22 May 2023 21:53:45) CuisUniversity-5799.image priorSource: 9222790!

----STARTUP---- (28 May 2023 11:28:41) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!

!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 11:44:07'!
test02SenderOfTransferenceKnowsItsReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.! !
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 11:52:10'!
test02TransferenceKnowsItsSenderAndReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sender) equals: senderAccount .
	self assert: (transference receiver) equals: receivingAccount .! !

!methodRemoval: TransferenceTest #test02SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 11:52:13'!
test02SenderOfTransferenceKnowsItsReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount balance) equals: -10.
	self assert: (receivingAccount balance) equals: 10.!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 11:52:15'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 11:52:15'!
ERROR!
!Transference methodsFor: 'sender\' stamp: 'lucy 5/28/2023 11:52:27'!
sender
	self shouldBeImplemented.! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 11:52:46'!
Object subclass: #Transference
	instanceVariableNames: 'sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'sender\' stamp: 'lucy 5/28/2023 11:52:40' prior: 50620961!
sender
	^sender.! !

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 11:52:49'!
FAILURE!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 11:52:49'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 11:52:50'!
ERROR!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 11:55:58'!
Object subclass: #Transference
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'nil' stamp: 'lucy 5/28/2023 11:55:55'!
initializeWithSender: aSenderAccount andReceiver: aReceivingAccount
	
	sender := aSenderAccount .
	receiver := aReceivingAccount .
! !
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/28/2023 11:56:22' prior: 50620860!
from: senderAccount transfer: anAmount to: receivingAccount
	Deposit register: 10 on: receivingAccount.
	Withdraw register: 10 on: senderAccount.
	^self new initializeWithSender: senderAccount andReceiver: receivingAccount ! !
!Transference methodsFor: 'nil' stamp: 'lucy 5/28/2023 11:56:55'!
receiver

	^receiver.! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 11:57:11'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 11:57:11'!
PASSED!
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 12:00:59'!
test03SenderAndReceiverHaveRegisteredTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount hasRegistered: (transference sent)).
	self assert: (receivingAccount hasRegistered: (transference received)).! !

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:01:05'!
ERROR!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:03:42'!
Object subclass: #Transference
	instanceVariableNames: 'sender receiver sent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:03:43'!
Object subclass: #Transference
	instanceVariableNames: 'sender receiver sent received'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 12:03:40'!
initializeWithAmount: anAmount from: aSenderAccount to: aReceivingAccount 
	
	sent :=Deposit register: 10 on: aReceivingAccount.
	received := Withdraw register: 10 on: aSenderAccount.
	sender := aSenderAccount .
	receiver := aReceivingAccount .
! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 12:03:52' prior: 50621060!
initializeWithAmount: anAmount from: aSenderAccount to: aReceivingAccount 
	
	sent :=Deposit register: anAmount on: aReceivingAccount.
	received := Withdraw register: anAmount on: aSenderAccount.
	sender := aSenderAccount .
	receiver := aReceivingAccount .
! !

!methodRemoval: Transference #initializeWithSender:andReceiver: stamp: 'lucy 5/28/2023 12:03:56'!
initializeWithSender: aSenderAccount andReceiver: aReceivingAccount
	
	sender := aSenderAccount .
	receiver := aReceivingAccount .
!
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/28/2023 12:04:39' prior: 50621003!
from: senderAccount transfer: anAmount to: receivingAccount
	^self new initializeWithAmount: anAmount from: senderAccount to: receivingAccount ! !
!Transference methodsFor: 'sender' stamp: 'lucy 5/28/2023 12:04:57'!
sent 

	^sent! !
!Transference methodsFor: 'receiver' stamp: 'lucy 5/28/2023 12:05:08'!
received

	^received! !

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:05:29'!
FAILURE!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:06:38'!
FAILURE!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:06:38'!
FAILURE!

transference !

transference!
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 12:07:51' prior: 50621071!
initializeWithAmount: anAmount from: aSenderAccount to: aReceivingAccount 
	
	received :=Deposit register: anAmount on: aReceivingAccount.
	sent := Withdraw register: anAmount on: aSenderAccount.
	sender := aSenderAccount .
	receiver := aReceivingAccount .
! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 12:07:58'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 12:07:58'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:07:58'!
PASSED!
!Transference methodsFor: 'receiver' stamp: 'lucy 5/28/2023 12:11:54'!
receivedTransaction

	^received! !

!methodRemoval: Transference #received stamp: 'lucy 5/28/2023 12:11:54'!
received

	^received!
!Transference methodsFor: 'receiver' stamp: 'lucy 5/28/2023 12:12:08'!
receiverAccount

	^receiver.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:12:08' prior: 50620924!
test02TransferenceKnowsItsSenderAndReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sender) equals: senderAccount .
	self assert: (transference receiverAccount) equals: receivingAccount .! !

!methodRemoval: Transference #receiver stamp: 'lucy 5/28/2023 12:12:08'!
receiver

	^receiver.!
!Transference methodsFor: 'sender' stamp: 'lucy 5/28/2023 12:12:24'!
senderAccount
	^sender.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:12:24' prior: 50621151!
test02TransferenceKnowsItsSenderAndReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference senderAccount) equals: senderAccount .
	self assert: (transference receiverAccount) equals: receivingAccount .! !

!methodRemoval: Transference #sender stamp: 'lucy 5/28/2023 12:12:24'!
sender
	^sender.!
!Transference methodsFor: 'sender' stamp: 'lucy 5/28/2023 12:12:38'!
sentTransaction 

	^sent! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:12:38' prior: 50621024!
test03SenderAndReceiverHaveRegisteredTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount hasRegistered: (transference sentTransaction)).
	self assert: (receivingAccount hasRegistered: (transference received)).! !

!methodRemoval: Transference #sent stamp: 'lucy 5/28/2023 12:12:38'!
sent 

	^sent!
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 12:12:51' prior: 50621197!
test03SenderAndReceiverHaveRegisteredTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount hasRegistered: (transference sentTransaction)).
	self assert: (receivingAccount hasRegistered: (transference receivedTransaction )).! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 12:12:55'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 12:12:55'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:12:55'!
PASSED!
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 12:20:56'!
test04SenderOfTransferenceKnowsItsReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction) receiver.! !
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 12:21:39' prior: 50621244!
test04SenderOfTransferenceKnowsItsReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiver) equals: receivingAccount.! !

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 12:21:41'!
ERROR!

Transference subclass: #TransferenceIn
	instanceVariableNames: 'sender receiver sent received'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceIn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceIn category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:22:18'!
Transference subclass: #TransferenceIn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceOut category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:22:22'!
Transference subclass: #TransferenceOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 12:25:40' prior: 50621117!
initializeWithAmount: anAmount from: aSenderAccount to: aReceivingAccount 
	
	TransferenceOut new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
	TransferenceIn new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
	"received :=Deposit register: anAmount on: aReceivingAccount.
	sent := Withdraw register: anAmount on: aSenderAccount.
	sender := aSenderAccount .
	receiver := aReceivingAccount ."
! !
!TransferenceIn methodsFor: 'nil' stamp: 'lucy 5/28/2023 12:25:49'!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

! !
!TransferenceOut methodsFor: 'nil' stamp: 'lucy 5/28/2023 12:25:54'!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 12:26:07' prior: 50621305!
initializeWithAmount: anAmount from: aSenderAccount to: aReceivingAccount 
	
	TransferenceOut new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
	TransferenceIn new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:27:04' prior: 50621322!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

	received :=Deposit register: anAmount on: aReceivingAccount.
	receiver := aReceivingAccount.! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:28:22' prior: 50621345!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

	received := Deposit register: anAmount on: aReceivingAccount.
	receiver := aReceivingAccount.
	sender := aSenderAccount.! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:28:39' prior: 50621327!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

	sent := Withdraw register: anAmount on: aSenderAccount.
	sender := aSenderAccount .
	receiver := aReceivingAccount .! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:30:15'!
Object subclass: #Transference
	instanceVariableNames: 'sender receiver sent received sentTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:30:16'!
Object subclass: #Transference
	instanceVariableNames: 'sender receiver sent received sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 12:30:13' prior: 50621333!
initializeWithAmount: anAmount from: aSenderAccount to: aReceivingAccount 
	
	sentTransaction := TransferenceOut new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
	receivedTransaction := TransferenceIn new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
! !
!Transference methodsFor: 'sender' stamp: 'lucy 5/28/2023 12:30:47' prior: 50621192!
sentTransaction 

	^sentTransaction! !

!methodRemoval: Transference #senderAccount stamp: 'lucy 5/28/2023 12:30:51'!
senderAccount
	^sender.!

!methodRemoval: Transference #receiverAccount stamp: 'lucy 5/28/2023 12:30:59'!
receiverAccount

	^receiver.!
!Transference methodsFor: 'receiver' stamp: 'lucy 5/28/2023 12:31:05' prior: 50621139!
receivedTransaction

	^receivedTransaction ! !

Object subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:31:22'!
Object subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceIn
	instanceVariableNames: 'account receiver sent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceIn category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:31:51'!
Transference subclass: #TransferenceIn
	instanceVariableNames: 'account receiver sent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceIn
	instanceVariableNames: 'account sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceIn category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:33:01'!
Transference subclass: #TransferenceIn
	instanceVariableNames: 'account sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceIn
	instanceVariableNames: 'sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceIn category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:33:08'!
Transference subclass: #TransferenceIn
	instanceVariableNames: 'sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceOut
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceOut category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:33:14'!
Transference subclass: #TransferenceOut
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:37:03'!
receiverAccount

	^receiver ! !
!TransferenceIn methodsFor: 'nil' stamp: 'lucy 5/28/2023 12:37:21'!
senderAccount

	^sender ! !

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 12:38:25'!
ERROR!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 12:38:25'!
ERROR!
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 12:38:36' prior: 50621257!
test04SenderOfTransferenceKnowsItsReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount.! !

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 12:38:39'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 12:38:42'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 12:38:46'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 12:38:46'!
ERROR!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:38:50'!
FAILURE!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 12:38:50'!
FAILURE!
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 12:39:47' prior: 50621174!
test02TransferenceKnowsItsSenderAndReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference receivedTransaction senderAccount) equals: senderAccount .
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount .! !

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 12:39:55'!
PASSED!

----SNAPSHOT----(28 May 2023 12:42:47) CuisUniversity-5799.image priorSource: 9256089!

AccountTransaction subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:43:07'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(28 May 2023 12:43:17) CuisUniversity-5799.image priorSource: 9277039!
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:44:53' prior: 50621354!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

	Deposit register: anAmount on: aReceivingAccount.
	sender := aSenderAccount.! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 12:45:07' prior: 50621364!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

	Withdraw register: anAmount on: aSenderAccount.
	receiver := aReceivingAccount .! !

Object subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 12:46:32'!
Object subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference class methodsFor: 'nil' stamp: 'lucy 5/28/2023 12:53:32'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!TransferenceIn class methodsFor: 'nil' stamp: 'lucy 5/28/2023 12:53:49'!
for! !

!methodRemoval: Transference class #register:on: stamp: 'lucy 5/28/2023 12:55:20'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction!
!Transference methodsFor: 'nil' stamp: 'lucy 5/28/2023 12:58:43'!
affectBalance: aBalance

	self subclassResponsibility ! !

!methodRemoval: Transference #affectBalance: stamp: 'lucy 5/28/2023 12:59:13'!
affectBalance: aBalance

	self subclassResponsibility !
!TransferenceOut class methodsFor: 'nil' stamp: 'lucy 5/28/2023 13:02:46'!
forReceiverAccount: aReceiverAccount send: anAmount

	^self new initializeAmount: anAmount to: aReceiverAccount.! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:03:04'!
initializeAmount: anAmount to: aReceivingAccount.

	receiver := aReceivingAccount .! !

!methodRemoval: TransferenceOut #initializeAmount:from:to: stamp: 'lucy 5/28/2023 13:03:08'!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

	Withdraw register: anAmount on: aSenderAccount.
	receiver := aReceivingAccount .!
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:03:27'!
initializeAmount: anAmount from: aSenderAccount
	sender := aSenderAccount.! !

!methodRemoval: TransferenceIn #initializeAmount:from:to: stamp: 'lucy 5/28/2023 13:03:30'!
initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.

	Deposit register: anAmount on: aReceivingAccount.
	sender := aSenderAccount.!
!TransferenceIn class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:04:19'!
forSenderAccount: aSenderAccount receive: anAmount

	^self new initializeAmount: anAmount from: aSenderAccount .! !

!methodRemoval: TransferenceIn class #for stamp: 'lucy 5/28/2023 13:04:22'!
for!
!TransferenceIn class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:04:30'!
formSenderAccount: aSenderAccount receive: anAmount

	^self new initializeAmount: anAmount from: aSenderAccount .! !

!methodRemoval: TransferenceIn class #forSenderAccount:receive: stamp: 'lucy 5/28/2023 13:04:32'!
forSenderAccount: aSenderAccount receive: anAmount

	^self new initializeAmount: anAmount from: aSenderAccount .!
!TransferenceIn class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:04:42'!
fromSenderAccount: aSenderAccount receive: anAmount

	^self new initializeAmount: anAmount from: aSenderAccount .! !

!methodRemoval: TransferenceIn class #formSenderAccount:receive: stamp: 'lucy 5/28/2023 13:04:44'!
formSenderAccount: aSenderAccount receive: anAmount

	^self new initializeAmount: anAmount from: aSenderAccount .!
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/28/2023 13:08:16' prior: 50621090!
from: senderAccount transfer: anAmount to: receivingAccount

	|transferenceIn transferenceOut|
	
	transferenceIn := TransferenceIn fromSenderAccount: senderAccount receive: anAmount.
	transferenceOut  := TransferenceOut forReceiverAccount: receivingAccount send: anAmount.
	
	senderAccount register: transferenceOut.
	receivingAccount register: transferenceIn.
	
	^self new initializeWithAmount: anAmount from: senderAccount to: receivingAccount ! !
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/28/2023 13:08:47' prior: 50621705!
from: senderAccount transfer: anAmount to: receivingAccount

	|transferenceIn transferenceOut|
	
	transferenceIn := TransferenceIn fromSenderAccount: senderAccount receive: anAmount.
	transferenceOut  := TransferenceOut forReceiverAccount: receivingAccount send: anAmount.
	
	senderAccount register: transferenceOut.
	receivingAccount register: transferenceIn.
	
	^self new initializeWith: transferenceIn and: transferenceOut.! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:09:43'!
initializeWith: transferenceIn and: transferenceOut
	
	sentTransaction := transferenceOut.
	receivedTransaction := transferenceIn.
! !

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:10:02'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:10:09'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:10:20'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:10:26'!
ERROR!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:10:26'!
ERROR!

!methodRemoval: Transference #initializeWithAmount:from:to: stamp: 'lucy 5/28/2023 13:10:48'!
initializeWithAmount: anAmount from: aSenderAccount to: aReceivingAccount 
	
	sentTransaction := TransferenceOut new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
	receivedTransaction := TransferenceIn new initializeAmount: anAmount from: aSenderAccount to: aReceivingAccount.
!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 13:11:10'!
Object subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'nil' stamp: 'lucy 5/28/2023 13:11:07'!
affectBalance: aBalance

	^aBalance + value! !
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/28/2023 13:11:42' prior: 50621723!
from: senderAccount transfer: anAmount to: receivingAccount

	|transferenceIn transferenceOut|
	
	transferenceIn := TransferenceIn fromSenderAccount: senderAccount receive: anAmount.
	transferenceOut  := TransferenceOut forReceiverAccount: receivingAccount send: anAmount.
	
	senderAccount register: transferenceOut.
	receivingAccount register: transferenceIn.
	
	^self new initializeWith: transferenceIn and: transferenceOut forAmount: anAmount .! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:12:08'!
initializeWith: transferenceIn and: transferenceOut forAmount: anAmount
	
	sentTransaction := transferenceOut.
	receivedTransaction := transferenceIn.
! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:12:17' prior: 50621807!
initializeWith: transferenceIn and: transferenceOut forAmount: anAmount
	
	sentTransaction := transferenceOut.
	receivedTransaction := transferenceIn.
	value := anAmount 
! !

!methodRemoval: Transference #initializeWith:and: stamp: 'lucy 5/28/2023 13:12:23'!
initializeWith: transferenceIn and: transferenceOut
	
	sentTransaction := transferenceOut.
	receivedTransaction := transferenceIn.
!
!Transference methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:13:05' prior: 50621785!
affectBalance: aBalance

	self subclassResponsibility ! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:13:25' overrides: 50621831!
affectBalance: aBalance

	^aBalance + value! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:13:32' overrides: 50621831!
affectBalance: aBalance

	^aBalance - value! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:13:46'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:13:46'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:13:46'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:13:46'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:13:46'!
ERROR!
!Transference methodsFor: 'balance' stamp: 'lucy 5/28/2023 13:14:17' overrides: 16902254!
value

	^value! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:14:20'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:14:20'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:14:20'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:14:20'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:14:20'!
ERROR!

transference!

transaction!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:16:08'!
ERROR!

transaction!

----SNAPSHOT----(28 May 2023 13:21:28) CuisUniversity-5799.image priorSource: 9277594!

----SNAPSHOT----(28 May 2023 13:21:51) CuisUniversity-5799.image priorSource: 9287717!

----SNAPSHOT----(28 May 2023 13:23:31) CuisUniversity-5799.image priorSource: 9287805!

----STARTUP---- (28 May 2023 13:24:40) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!

!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:26:55'!
initializeSend: anAmount from: senderAccount to: receivingAccount

	|transferenceOut|
	
	sentTransaction := TransferenceIn fromSenderAccount: senderAccount receive: anAmount.
	receivedTransaction := TransferenceOut forReceiverAccount: receivingAccount send: anAmount.
	
	senderAccount register: transferenceOut.
	receivingAccount register: receivedTransaction.
	value := anAmount 
! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:27:12' prior: 50621904!
initializeSend: anAmount from: senderAccount to: receivingAccount
	
	sentTransaction := TransferenceIn fromSenderAccount: senderAccount receive: anAmount.
	receivedTransaction := TransferenceOut forReceiverAccount: receivingAccount send: anAmount.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
	value := anAmount 
! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:27:45' prior: 50621919!
initializeSend: anAmount from: senderAccount to: receivingAccount

	value := anAmount.
	
	sentTransaction := TransferenceIn fromSenderAccount: senderAccount.
	receivedTransaction := TransferenceOut forReceiverAccount: receivingAccount.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !

!methodRemoval: Transference #initializeWith:and:forAmount: stamp: 'lucy 5/28/2023 13:28:09'!
initializeWith: transferenceIn and: transferenceOut forAmount: anAmount
	
	sentTransaction := transferenceOut.
	receivedTransaction := transferenceIn.
	value := anAmount 
!
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/28/2023 13:28:53' prior: 50621790!
from: senderAccount transfer: anAmount to: receivingAccount
	
	^self new initializeSend: anAmount from: senderAccount to: receivingAccount ! !
!TransferenceIn class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:29:22'!
fromSenderAccount: aSenderAccount

	^self new initializeReceiveFrom: aSenderAccount .! !

!methodRemoval: TransferenceIn class #fromSenderAccount:receive: stamp: 'lucy 5/28/2023 13:29:27'!
fromSenderAccount: aSenderAccount receive: anAmount

	^self new initializeAmount: anAmount from: aSenderAccount .!
!TransferenceOut class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:29:51'!
forReceiverAccount: aReceiverAccount

	^self new initializeSendTo: aReceiverAccount.! !

!methodRemoval: TransferenceOut class #forReceiverAccount:send: stamp: 'lucy 5/28/2023 13:29:54'!
forReceiverAccount: aReceiverAccount send: anAmount

	^self new initializeAmount: anAmount to: aReceiverAccount.!
!TransferenceOut class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:30:44'!
ftoReceiverAccount: aReceiverAccount

	^self new initializeSendTo: aReceiverAccount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:30:44' prior: 50621934!
initializeSend: anAmount from: senderAccount to: receivingAccount

	value := anAmount.
	
	sentTransaction := TransferenceIn fromSenderAccount: senderAccount.
	receivedTransaction := TransferenceOut ftoReceiverAccount: receivingAccount.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !

!methodRemoval: TransferenceOut class #forReceiverAccount: stamp: 'lucy 5/28/2023 13:30:44'!
forReceiverAccount: aReceiverAccount

	^self new initializeSendTo: aReceiverAccount.!
!TransferenceOut class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:30:51'!
toReceiverAccount: aReceiverAccount

	^self new initializeSendTo: aReceiverAccount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:30:51' prior: 50621996!
initializeSend: anAmount from: senderAccount to: receivingAccount

	value := anAmount.
	
	sentTransaction := TransferenceIn fromSenderAccount: senderAccount.
	receivedTransaction := TransferenceOut toReceiverAccount: receivingAccount.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !

!methodRemoval: TransferenceOut class #ftoReceiverAccount: stamp: 'lucy 5/28/2023 13:30:51'!
ftoReceiverAccount: aReceiverAccount

	^self new initializeSendTo: aReceiverAccount.!
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:31:32'!
initializeSendTo: aReceivingAccount.

	receiver := aReceivingAccount .! !

!methodRemoval: TransferenceOut #initializeAmount:to: stamp: 'lucy 5/28/2023 13:31:35'!
initializeAmount: anAmount to: aReceivingAccount.

	receiver := aReceivingAccount .!
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:31:54'!
initializeReceiveFrom: aSenderAccount
	sender := aSenderAccount.! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:31:56' prior: 50622051!
initializeReceiveFrom: aSenderAccount

	sender := aSenderAccount.! !

!methodRemoval: TransferenceIn #initializeAmount:from: stamp: 'lucy 5/28/2023 13:31:58'!
initializeAmount: anAmount from: aSenderAccount
	sender := aSenderAccount.!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:32:05'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:32:05'!
ERROR!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:32:05'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:32:05'!
ERROR!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:32:20'!
ERROR!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:32:20'!
ERROR!
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:33:28' prior: 50622021!
initializeSend: anAmount from: senderAccount to: receivingAccount

	value := anAmount.
	
	receivedTransaction := TransferenceIn fromSenderAccount: senderAccount.
	sentTransaction := TransferenceOut toReceiverAccount: receivingAccount.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:33:30'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:33:30'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:33:30'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:33:30'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:33:30'!
ERROR!

!methodRemoval: Transference #value stamp: 'lucy 5/28/2023 13:34:10'!
value

	^value!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:34:19'!
ERROR!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:34:19'!
ERROR!
!Transference methodsFor: 'balance' stamp: 'lucy 5/28/2023 13:36:23' prior: 50621831!
affectBalance: aBalance

	self affectBalanceWithValue: value! !
!Transference methodsFor: 'balance' stamp: 'lucy 5/28/2023 13:36:45' prior: 50622132!
affectBalance: aBalance

	^self affectBalance: aBalance WithValue: value! !
!Transference methodsFor: 'balance' stamp: 'lucy 5/28/2023 13:37:11'!
affectBalance: aBalance WithValue: aValue

	self subclassResponsibility ! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:37:35' overrides: 50622142!
affectBalance: aBalance WithValue: aValue

	^aBalance + aValue! !

!methodRemoval: TransferenceIn #affectBalance: stamp: 'lucy 5/28/2023 13:37:39'!
affectBalance: aBalance

	^aBalance + value!
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:37:50' overrides: 50622142!
affectBalance: aBalance WithValue: aValue

	^aBalance - aValue! !

!methodRemoval: TransferenceOut #affectBalance: stamp: 'lucy 5/28/2023 13:37:54'!
affectBalance: aBalance

	^aBalance - value!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:37:55'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:37:55'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:37:55'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:37:55'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:37:55'!
ERROR!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:38:29'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:38:29'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:38:29'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:38:29'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:38:29'!
ERROR!

transaction!

!methodRemoval: Transference #affectBalance:WithValue: stamp: 'lucy 5/28/2023 13:40:06'!
affectBalance: aBalance WithValue: aValue

	self subclassResponsibility !
!Transference methodsFor: 'balance' stamp: 'lucy 5/28/2023 13:40:20' prior: 50622137!
affectBalance: aBalance

	self subclassResponsibility ! !
!Transference methodsFor: 'balance' stamp: 'lucy 5/28/2023 13:40:29' overrides: 16902254!
value

	^value! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/28/2023 13:40:54' prior: 50622090!
initializeSend: anAmount from: senderAccount to: receivingAccount

	value := anAmount.
	
	receivedTransaction := TransferenceIn fromSenderAccount: senderAccount inTransference: self.
	sentTransaction := TransferenceOut toReceiverAccount: receivingAccount inTransference: self.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !
!TransferenceIn class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:41:43'!
fromSenderAccount: aSenderAccount inTransference: aTransference

	^self new initializeReceiveFrom: aSenderAccount inTransference: aTransference .! !

!methodRemoval: TransferenceIn class #fromSenderAccount: stamp: 'lucy 5/28/2023 13:41:51'!
fromSenderAccount: aSenderAccount

	^self new initializeReceiveFrom: aSenderAccount .!
!TransferenceOut class methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:42:15'!
toReceiverAccount: aReceiverAccount inTransference: aTransference

	^self new initializeSendTo: aReceiverAccount inTransference: aTransference .! !

!methodRemoval: TransferenceOut class #toReceiverAccount: stamp: 'lucy 5/28/2023 13:42:18'!
toReceiverAccount: aReceiverAccount

	^self new initializeSendTo: aReceiverAccount.!

!classDefinition: #TransferenceOut category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 13:42:55'!
Transference subclass: #TransferenceOut
	instanceVariableNames: 'receiver transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:42:53'!
initializeSendTo: aReceivingAccount inTransference: aTransference.

	transference := aTransference .
	receiver := aReceivingAccount .! !

!methodRemoval: TransferenceOut #initializeSendTo: stamp: 'lucy 5/28/2023 13:42:58'!
initializeSendTo: aReceivingAccount.

	receiver := aReceivingAccount .!

!classDefinition: #TransferenceIn category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 13:43:11'!
Transference subclass: #TransferenceIn
	instanceVariableNames: 'sender transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:43:10'!
initializeReceiveFrom: aSenderAccount inTransference: aTransference.

	transference := aTransference .
	sender := aSenderAccount.! !

!methodRemoval: TransferenceIn #initializeReceiveFrom: stamp: 'lucy 5/28/2023 13:43:15'!
initializeReceiveFrom: aSenderAccount

	sender := aSenderAccount.!
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:43:27' overrides: 50622210!
affectBalance: aBalance
	^aBalance + transference value! !

!methodRemoval: TransferenceIn #affectBalance:WithValue: stamp: 'lucy 5/28/2023 13:43:29'!
affectBalance: aBalance WithValue: aValue

	^aBalance + aValue!
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:43:42' overrides: 50622210!
affectBalance: aBalance

	^aBalance - transference value! !

!methodRemoval: TransferenceOut #affectBalance:WithValue: stamp: 'lucy 5/28/2023 13:43:45'!
affectBalance: aBalance WithValue: aValue

	^aBalance - aValue!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:43:49'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:43:49'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:43:49'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:43:49'!
PASSED!

----SNAPSHOT----(28 May 2023 13:43:54) CuisUniversity-5799.image priorSource: 9287893!

----SNAPSHOT----(28 May 2023 13:45:17) CuisUniversity-5799.image priorSource: 9302002!

----STARTUP---- (28 May 2023 13:45:46) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!


!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:45:48'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:45:51'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:45:51'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:45:51'!
PASSED!

!testRun: #TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:45:51'!
PASSED!

----STARTUP---- (28 May 2023 13:47:43) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!

!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 13:49:07' prior: 50622304 overrides: 50622210!
affectBalance: aBalance

	^aBalance + transference value! !
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 13:51:27'!
test04SenderAndReceiverOfTransferenceKnowEachOther

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount.
	self assert: (transference receivedTransaction senderAccount) equals: senderAccount.! !

!methodRemoval: TransferenceTest #test04SenderOfTransferenceKnowsItsReceiver stamp: 'lucy 5/28/2023 13:51:29'!
test04SenderOfTransferenceKnowsItsReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount.!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 13:51:31'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 13:51:31'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 13:51:31'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/28/2023 13:51:31'!
PASSED!

----SNAPSHOT----(28 May 2023 13:52:08) CuisUniversity-5799.image priorSource: 9302090!

----SNAPSHOT----(28 May 2023 13:52:22) CuisUniversity-5799.image priorSource: 9303987!

----STARTUP---- (28 May 2023 17:36:44) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!

!TransferenceIn methodsFor: 'sender' stamp: 'lucy 5/28/2023 17:42:06'!
senderTransaction

	^transference sentTransaction ! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 17:42:31'!
receiverTransaction

	^transference receivedTransaction ! !
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/28/2023 17:44:42'!
test05CanNavigateToAndFromBothEndsOfTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverTransaction) equals: transference receivedTransaction.
	self assert: (transference receivedTransaction senderTransaction) equals: transference sentTransaction.! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 17:45:22'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 17:45:22'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 17:45:22'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/28/2023 17:45:22'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/28/2023 17:45:22'!
PASSED!

----SNAPSHOT----(28 May 2023 17:45:34) CuisUniversity-5799.image priorSource: 9304075!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 17:51:39'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'nil' stamp: 'lucy 5/28/2023 17:59:42'!
test01EmptyAccountSumaryHasOnlyBalance0
	
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 18:03:45'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:03:38' prior: 50622471!
test01EmptyAccountSumaryHasOnlyBalance0
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary forAccount: account.
	expectedSummary := 'Balance = 0'.

	self assert: (summary print) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:03:52'!
ERROR!
!AccountSummary class methodsFor: 'create' stamp: 'lucy 5/28/2023 18:04:05'!
forAccount: account 
	self shouldBeImplemented.! !
!AccountSummary class methodsFor: 'create' stamp: 'lucy 5/28/2023 18:05:38' prior: 50622498!
forAccount: account 
	^self new initializeWithAccount: account.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:05:42'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 18:05:52'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'lucy 5/28/2023 18:05:52'!
initializeWithAccount: account 
	self shouldBeImplemented.
	account_CHANGE_ME := account.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 18:06:25'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account_CHANGE_ME account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'lucy 5/28/2023 18:06:20' prior: 50622520!
initializeWithAccount: anAccount 
	account := anAccount.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:06:27'!
FAILURE!

Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 18:07:23'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:07:36'!
FAILURE!

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:07:36'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:07:56' prior: 50622484!
test01EmptyAccountSumaryHasOnlyBalance0
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary forAccount: account.
	expectedSummary := 'Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:08:02'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:08:02'!
ERROR!
!AccountSummary methodsFor: 'print' stamp: 'lucy 5/28/2023 18:08:10'!
printSummary
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'print' stamp: 'lucy 5/28/2023 18:08:52' prior: 50622582!
printSummary
	^'Balance = 0'.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:09:00'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:10:01'!
test02AccountWithDepositCorrectlyPrintsSummary
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary forAccount: account.
	expectedSummary := 'Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:10:08'!
test01EmptyAccountSummaryHasOnlyBalance0
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary forAccount: account.
	expectedSummary := 'Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.! !

!methodRemoval: AccountSummaryTest #test01EmptyAccountSumaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:10:08'!
test01EmptyAccountSumaryHasOnlyBalance0
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary forAccount: account.
	expectedSummary := 'Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:11:01' prior: 50622595!
test02AccountWithDepositCorrectlyPrintsSummary
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary forAccount: account.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.! !

----SNAPSHOT----(28 May 2023 18:28:10) CuisUniversity-5799.image priorSource: 9305760!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'lucy 5/28/2023 18:38:46'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'lucy 5/28/2023 18:38:45' prior: 50620427 overrides: 16920235!
initialize
	
	super initialize.
	transactions := OrderedCollection new.
	summary := AccountSummary forAccount: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'lucy 5/28/2023 18:40:19' prior: 50620439!
register: aTransaction

	aTransaction addToSummary: summary.
	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'lucy 5/28/2023 18:40:45'!
summary
	^summary.
	
	! !

!methodRemoval: AccountSummary #initializeWithAccount: stamp: 'lucy 5/28/2023 18:45:15'!
initializeWithAccount: anAccount 
	account := anAccount.!

!methodRemoval: AccountSummary #printSummary stamp: 'lucy 5/28/2023 18:45:17'!
printSummary
	^'Balance = 0'.!

!methodRemoval: AccountSummaryTest #test02AccountWithDepositCorrectlyPrintsSummary stamp: 'lucy 5/28/2023 18:45:43'!
test02AccountWithDepositCorrectlyPrintsSummary
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary forAccount: account.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'lucy 5/28/2023 18:45:57' prior: 50622656 overrides: 16920235!
initialize
	
	super initialize.
	transactions := OrderedCollection new.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:46:12' prior: 50622607!
test01EmptyAccountSummaryHasOnlyBalance0
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	expectedSummary := 'Balance = 0'.

	self assert: (account printSummary) equals: expectedSummary.! !

!classRemoval: #AccountSummary stamp: 'lucy 5/28/2023 18:46:19'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /home/lucy/Documents/portfolio2/portfolio2/Packages/TerseGuide.pck.st----!

arrayx := #(1 2 3).!

arrayx := #(1 2 3).
arrayx inject: '' into: [:number | number asString ]!

(arrayx asOrderedCollection) inject: '' into: [:number | number asString ]!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 18:51:13' prior: 50622669!
summary
	
	"transactions collect: [:aTransaction | "
	
	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 18:51:32' prior: 50625644!
summary
	^'Balance = 0'
	"transactions collect: [:aTransaction | "
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:51:34'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:51:34'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 18:52:02'!
printSummary
	^'Balance = 0'
	"transactions collect: [:aTransaction | "
	
	! !

!methodRemoval: ReceptiveAccount #summary stamp: 'lucy 5/28/2023 18:52:02'!
summary
	^'Balance = 0'
	"transactions collect: [:aTransaction | "
	
	!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:52:08'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:52:39'!
test01AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	expectedSummary := 'Depósito por 100.
	Balance = 0'.

	self assert: (account printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:52:45'!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	expectedSummary := 'Depósito por 100.
	Balance = 0'.

	self assert: (account printSummary) equals: expectedSummary.! !

!methodRemoval: AccountSummaryTest #test01AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:52:45'!
test01AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	expectedSummary := 'Depósito por 100.
	Balance = 0'.

	self assert: (account printSummary) equals: expectedSummary.!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:52:51'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:52:51'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:53:11' prior: 50625686!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 0'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:53:15'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:53:15'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 18:53:42' prior: 50625661!
printSummary
	^'Depósito por 100.
	Balance = 0'.
	"transactions collect: [:aTransaction | "
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:53:44'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:53:44'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 18:54:40' prior: 50625735!
printSummary

	transactions isEmpty ifTrue: [^'Balance = 0'].
	^'Depósito por 100.
	Balance = 100'.
	"transactions collect: [:aTransaction | "
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:54:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:54:44'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:54:44'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/28/2023 18:55:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/28/2023 18:55:23'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:55:28'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:55:28'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:55:28'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'lucy 5/28/2023 18:55:43' prior: 50622663!
register: aTransaction

	transactions add: aTransaction 
! !

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:55:44'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lucy 5/28/2023 18:55:52' prior: 50625716!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:56:00'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 18:56:04'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:56:04'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 18:57:41'!
test02AccountWithTwoDepositsPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 18:57:48'!
test03AccountWithTwoDepositsPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.! !

!methodRemoval: AccountSummaryTest #test02AccountWithTwoDepositsPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:57:48'!
test02AccountWithTwoDepositsPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 18:58:50'!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.! !

!methodRemoval: AccountSummaryTest #test03AccountWithTwoDepositsPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 18:58:53'!
test03AccountWithTwoDepositsPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 18:59:10' prior: 50625956!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:00:03' prior: 50625982!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
	Extracción por 50.
	Balance = 50'.

	self assert: (account printSummary) equals: expectedSummary.! !

'holas/n'!

'holas'/n!

hola:= String with: Character cr.
'assda',hola,'asasdas'!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:08:36' prior: 50625749!
printSummary

	|transactionSummary newLine|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: #Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	transactionSummary := transactionSummary, 'Balance =', self balance, '.'.
	^transactionSummary
	
	! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:08:43'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:08:43'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:09:13' prior: 50626012!
printSummary

	|transactionSummary newLine|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: #Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	transactionSummary := transactionSummary, 'Balance =', self balance asString, '.'.
	^transactionSummary
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:09:16'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:09:16'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:09:16'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:09:22'!
FAILURE!

account printSummary!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:10:33' prior: 50626039!
printSummary

	|transactionSummary newLine|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: #Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	transactionSummary := transactionSummary value, 'Balance =', self balance asString, '.'.
	^transactionSummary
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:10:36'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:10:36'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:10:36'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:10:37'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:13:07' prior: 50626074!
printSummary

	|transactionSummary newLine|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	transactionSummary := transactionSummary value, 'Balance =', self balance asString, '.'.
	^transactionSummary
	
	! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:13:14'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:13:14'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:13:30'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:13:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:14:05' prior: 50626109!
printSummary

	|transactionSummary newLine|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	transactionSummary := transactionSummary asString, 'Balance =', self balance asString, '.'.
	^transactionSummary
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:14:08'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:14:08'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:14:08'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:15:33' prior: 50626144!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := 'Balance =', self balance asString, '.'.
	transactionSummary := transactionSummary asString, balance.
	^transactionSummary
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:15:36'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:15:36'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:15:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:17:30' prior: 50626175!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := 'Balance =', self balance asString, '.'.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary asString
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:17:32'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:17:32'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:17:32'!
FAILURE!

account printSummary!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:18:50' prior: 50626207!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := 'Balance =', self balance asString, '.'.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary
	
	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:19:52' prior: 50626240!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := 'Balance =', self balance asString, '.'.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary inject: '' into: [:aString | aString.]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:19:56'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:19:56'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:19:56'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:20:05'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:22:45' prior: 50626261!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := 'Balance =', self balance asString, '.'.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary inject: '' into: [:a :string | a,string]
	
	! !

transactionSummary := #('hola' 'aa' 'sda').
transactionSummary inject: '' into: [:a :string | a,string]!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:24:07' prior: 50626298!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := 'Balance =', self balance asString, '.'.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | summary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:24:10'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:24:10'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:24:10'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:24:25'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:24:40' prior: 50626324!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := 'Balance =', self balance asString, '.'.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:24:43'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:24:43'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:24:43'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:24:52'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:25:45' prior: 50626362!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := ('Balance =', self balance asString, '.') asString.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:25:56'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:26:41' prior: 50626401!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary := transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:27:12' prior: 50626428!
printSummary

	|transactionSummary newLine balance|
	newLine := String with: Character cr.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:27:33'!
FAILURE!

account printSummary!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:28:08'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:28:52' prior: 50626451!
printSummary

	|transactionSummary newLine balance|
	newLine := ('
	') asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:28:54'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:28:54'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:28:54'!
FAILURE!

account printSummary!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:29:33' prior: 50626483!
printSummary

	|transactionSummary newLine balance|
	newLine := ('
') asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:29:35'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:29:35'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:29:35'!
FAILURE!

account printSummary!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:30:07'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:30:18' prior: 50625995!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50'.

	self assert: (account printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:30:22' prior: 50625899!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:30:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:30:25'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:30:25'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:30:30'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:30:30'!
FAILURE!

account printSummary!

account printSummary!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:31:44' prior: 50626571!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:31:45'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:31:45'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:31:49'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:31:52'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:31:56'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:31:56'!
FAILURE!

account printSummary!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:32:52' prior: 50626603!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
	Balance = 100.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:32:55'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:32:55'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:33:01' prior: 50626640!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:02'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:02'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:06'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:33:14' prior: 50626557!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:16'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:33:21'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:21'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:33:21'!
PASSED!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:34:28' prior: 50626518!
printSummary

	|transactionSummary newLine balance|
	newLine := (String with: Character cr).
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:34:30'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:34:30'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:34:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/28/2023 19:36:36' prior: 50626724!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:['Extracción por ', aTransaction value asString, '.',newLine]	].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/28/2023 19:36:38'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:36:38'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:36:38'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/28/2023 19:39:03'!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:39:08'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/28/2023 19:39:19'!
FAILURE!

----SNAPSHOT----(28 May 2023 19:39:28) CuisUniversity-5799.image priorSource: 9311781!

----QUIT----(28 May 2023 19:39:40) CuisUniversity-5799.image priorSource: 9445156!

----STARTUP---- (29 May 2023 19:53:59) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-Summary/portfolio2/CuisUniversity-5799.image!

!TransferenceTest methodsFor: 'test' stamp: 'pau 5/29/2023 19:59:53'!
test06CantTransferenceYourself

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverTransaction) equals: transference receivedTransaction.
	self assert: (transference receivedTransaction senderTransaction) equals: transference sentTransaction.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/29/2023 20:22:03'!
test05WorksInPortfolio
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary.! !

----QUIT----(30 May 2023 11:12:25) CuisUniversity-5799.image priorSource: 9445244!

----STARTUP---- (31 May 2023 15:44:43) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-Summary/portfolio2/CuisUniversity-5799.image!


----QUIT----(31 May 2023 15:45:07) CuisUniversity-5799.image priorSource: 9446403!

----STARTUP---- (31 May 2023 15:49:40) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!


!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:50:00'!
FAILURE!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 15:50:00'!
FAILURE!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!

!testRun: #TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 15:50:00'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 15:50:29' prior: 50626791!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	"| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary."! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 15:50:38' prior: 50626839!
test05WorksInPortfolio
	
	"| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary."! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

!testRun: #TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 15:50:40'!
PASSED!

AccountTransaction subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/31/2023 15:50:59'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 15:51:06'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 15:51:06'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 15:51:06'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 15:51:06'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 15:51:06'!
PASSED!

!testRun: #TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 15:51:06'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 15:52:25'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 15:53:13'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 15:53:13'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 15:53:13'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 15:53:13'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 15:53:13'!
PASSED!

!testRun: #TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 15:53:13'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 15:53:34' prior: 50626990!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:53:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 15:56:26' prior: 50626758!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Deposit) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	['Entrada por transferencia de ' , aTransaction value asString, '.',newLine]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 15:56:34'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:56:34'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:56:34'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:56:34'!
FAILURE!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 15:56:34'!
PASSED!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 15:57:39' prior: 50627343!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Withdraw) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	['Entrada por transferencia de ' , aTransaction value asString, '.',newLine]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 15:57:43'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:57:43'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:57:43'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:57:43'!
FAILURE!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 15:57:43'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 15:57:43'!
FAILURE!

account printSummary!

----STARTUP---- (31 May 2023 15:59:30) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!

!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 15:50:29' prior: 50626791!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	"| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary."! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 15:50:38' prior: 50626839!
test05WorksInPortfolio
	
	"| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary."! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/31/2023 15:59:37'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lucy 5/31/2023 15:59:37'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'sentTransaction receivedTransaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 15:53:34' prior: 50627443!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 15:56:26' prior: 50626758!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Deposit) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	['Entrada por transferencia de ' , aTransaction value asString, '.',newLine]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 15:57:39' prior: 50627499!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Withdraw) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	['Entrada por transferencia de ' , aTransaction value asString, '.',newLine]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

----SNAPSHOT----(31 May 2023 16:00:11) CuisUniversity-5799.image priorSource: 9446635!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:01:32' prior: 50627486!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: (ReceptiveAccount new) transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:01:37'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:01:37'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:01:37'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:01:37'!
FAILURE!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:01:37'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:01:37'!
FAILURE!

account!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:04:05' prior: 50627556!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: (ReceptiveAccount new) transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 30.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:04:07'!
FAILURE!

account printSummary!
!TransferenceIn methodsFor: 'sender' stamp: 'lucy 5/31/2023 16:08:08'!
amountReceived

	^transference value! !
!TransferenceOut methodsFor: 'initialization' stamp: 'lucy 5/31/2023 16:09:10'!
amountSent

	^transference value! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:09:18'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:09:18'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:09:18'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:09:18'!
FAILURE!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:09:18'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:09:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:09:39' prior: 50627526!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Withdraw) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	['Entrada por transferencia de ' , aTransaction amountReceived asString, '.',newLine]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:09:42'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:09:42'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:09:42'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:09:42'!
PASSED!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:09:42'!
PASSED!
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/31/2023 16:10:42' prior: 50626822!
test06CantTransferenceYourself

	|account transference|
	
	account := ReceptiveAccount new.
	
	transference := Transference from: account transfer: 10 to: account.
	
	self assert: (transference sentTransaction receiverTransaction) equals: transference receivedTransaction.
	self assert: (transference receivedTransaction senderTransaction) equals: transference sentTransaction.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!

!testRun: #TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 16:13:09'!
PASSED!
!Transference methodsFor: 'initialization' stamp: 'lucy 5/31/2023 16:13:35' prior: 50622219!
initializeSend: anAmount from: senderAccount to: receivingAccount

	(senderAccount = receivingAccount ) ifTrue: [].

	value := anAmount.
	
	receivedTransaction := TransferenceIn fromSenderAccount: senderAccount inTransference: self.
	sentTransaction := TransferenceOut toReceiverAccount: receivingAccount inTransference: self.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/31/2023 16:15:12' prior: 50627687!
test06CantTransferenceYourself

	|account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference class canNotTransferToYourselfErrorMessage equals: anError messageText.]! !
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/31/2023 16:15:17' prior: 50627844!
test06CantTransferenceYourself

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference class canNotTransferToYourselfErrorMessage equals: anError messageText.]! !
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/31/2023 16:15:30'!
test06CanNotTransferToYourself

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference class canNotTransferToYourselfErrorMessage equals: anError messageText.]! !

!methodRemoval: TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 16:15:30'!
test06CantTransferenceYourself

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference class canNotTransferToYourselfErrorMessage equals: anError messageText.]!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:15:36'!
FAILURE!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:15:36'!
FAILURE!
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/31/2023 16:16:37'!
canNotTransferToYourselfErrorMessage 
	
	^'Cannot transfer money to yourself'! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/31/2023 16:17:17' prior: 50627828!
initializeSend: anAmount from: senderAccount to: receivingAccount

	(senderAccount = receivingAccount ) ifTrue: [self error: self class canNotTransferToYourselfErrorMessage].

	value := anAmount.
	
	receivedTransaction := TransferenceIn fromSenderAccount: senderAccount inTransference: self.
	sentTransaction := TransferenceOut toReceiverAccount: receivingAccount inTransference: self.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:17:25'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:17:25'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:17:25'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:17:25'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:17:25'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:17:25'!
ERROR!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:17:25'!
ERROR!
!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/31/2023 16:20:09' prior: 50627871!
test06CanNotTransferToYourself

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference canNotTransferToYourselfErrorMessage equals: anError messageText.]! !

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:20:11'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:20:11'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:20:11'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:20:11'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:20:11'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:20:11'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:20:11'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:20:43'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:20:46'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:20:46'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:20:46'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:20:46'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:20:46'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:20:46'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:20:50'!
PASSED!

----STARTUP---- (31 May 2023 16:22:23) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!

!TransferenceTest methodsFor: 'test' stamp: 'lucy 5/31/2023 16:24:11'!
test06CanNotTransferToYourself

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference canNotTransferToYourselfErrorMessage equals: anError messageText.]! !

!methodRemoval: TransferenceTest #test06CantTransferenceYourself stamp: 'lucy 5/31/2023 16:24:15'!
test06CantTransferenceYourself

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverTransaction) equals: transference receivedTransaction.
	self assert: (transference receivedTransaction senderTransaction) equals: transference sentTransaction.!
!Transference class methodsFor: 'instance creation' stamp: 'lucy 5/31/2023 16:24:49'!
canNotTransferToYourselfErrorMessage 
	
	^'Cannot transfer money to yourself'! !
!Transference methodsFor: 'initialization' stamp: 'lucy 5/31/2023 16:25:04' prior: 50622219!
initializeSend: anAmount from: senderAccount to: receivingAccount

	(senderAccount = receivingAccount ) ifTrue: [self error: self class canNotTransferToYourselfErrorMessage].

	value := anAmount.
	
	receivedTransaction := TransferenceIn fromSenderAccount: senderAccount inTransference: self.
	sentTransaction := TransferenceOut toReceiverAccount: receivingAccount inTransference: self.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:25:21'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:25:21'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:25:21'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:25:21'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:25:21'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:25:21'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:25:57' prior: 50627486!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: (ReceptiveAccount new) transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 30.'.

	self assert: (account printSummary) equals: expectedSummary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:26:56' prior: 50627526!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Withdraw) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	['Entrada por transferencia de ' , aTransaction amountReceived asString, '.',newLine]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	! !
!TransferenceIn methodsFor: 'sender' stamp: 'lucy 5/31/2023 16:27:12'!
amountReceived

	^transference value! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:27:29'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:27:29'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:27:29'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:27:29'!
PASSED!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:27:29'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:28:31'!
test05AccountWithTransferenceOutPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: account transfer: 30 to:  (ReceptiveAccount new).
	expectedSummary := 'Salida por transferencia de 30.
Balance = -30.'.

	self assert: (account printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:28:37'!
ERROR!
!TransferenceOut methodsFor: 'balance' stamp: 'lucy 5/31/2023 16:29:10'!
amountSent

	^transference value! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:30:37' prior: 50627649!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Withdraw) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	[(aTransaction isKindOf: TransferenceOut) 
																ifTrue: ['Salida por transferencia de ' , aTransaction amountReceived asString, '.',newLine]
																ifFalse: 	['Entrada por transferencia de ' , aTransaction amountReceived asString, '.',newLine]]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:40'!
ERROR!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:40'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:30:55' prior: 50627720!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Withdraw) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	[(aTransaction isKindOf: TransferenceOut) 
																ifTrue: ['Salida por transferencia de ' , aTransaction amountReceived asString, '.',newLine]
																ifFalse: 	['Entrada por transferencia de ' , aTransaction amountSent asString, '.',newLine]]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:30:58'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:58'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:58'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:58'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:30:58'!
ERROR!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:30:58'!
PASSED!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:31:26' prior: 50627780!
printSummary

	|transactionSummary newLine balance|
	newLine := '
' asString.
	transactions isEmpty ifTrue: [^'Balance = 0'].
	transactionSummary := transactions collect: [:aTransaction | (aTransaction isKindOf: Deposit)
														ifTrue: ['Depósito por ', aTransaction value asString, '.',newLine]
														ifFalse:[(aTransaction isKindOf: Withdraw) 
															ifTrue: ['Extracción por ', aTransaction value asString, '.',newLine]
															ifFalse: 	[(aTransaction isKindOf: TransferenceOut) 
																ifTrue: ['Salida por transferencia de ' , aTransaction amountSent asString, '.',newLine]
																ifFalse: 	['Entrada por transferencia de ' , aTransaction amountReceived asString, '.',newLine]]]].
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string]
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:31:28'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:31:28'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:31:28'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:31:28'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:31:28'!
PASSED!

!testRun: #AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:31:28'!
PASSED!

----SNAPSHOT----(31 May 2023 16:31:32) CuisUniversity-5799.image priorSource: 9468862!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:36:48'!
testWorksInPortfolio
	
	"| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary."! !

!methodRemoval: AccountSummaryTest #test05WorksInPortfolio stamp: 'lucy 5/31/2023 16:36:48'!
test05WorksInPortfolio
	
	"| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary."!

Object subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodObject category: 'Portfolio-Solucion' stamp: 'lucy 5/31/2023 16:37:31'!
Object subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodObject methodsFor: 'nil' stamp: 'lucy 5/31/2023 16:38:14'!
printSummaryForAccount: anAccount

	^anAccount printSummary! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:38:44' prior: 50622702!
test01EmptyAccountSummaryHasOnlyBalance0
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	expectedSummary := 'Balance = 0'.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:38:49'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:38:49'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:38:49'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:38:49'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:38:49'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:38:49'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:39:08' prior: 50626659!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:39:15' prior: 50626694!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50.'.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:39:25' prior: 50627636!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: (ReceptiveAccount new) transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 30.'.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 16:39:34' prior: 50627699!
test05AccountWithTransferenceOutPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: account transfer: 30 to:  (ReceptiveAccount new).
	expectedSummary := 'Salida por transferencia de 30.
Balance = -30.'.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:39:37'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:39:40'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:39:40'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:39:40'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:39:40'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:39:40'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:39:40'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:45:00'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'lucy 5/31/2023 16:45:23'!
addToSummary: aSummaryCollection! !
!AccountTransaction methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:45:49'!
addToSummary: aSummaryCollection! !
!AccountTransaction methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:45:55' prior: 50628311!
addToSummary: aSummaryCollection

	self subclassResponsibility ! !
!Deposit methodsFor: 'balance' stamp: 'lucy 5/31/2023 16:46:06' prior: 50628307 overrides: 50628315!
addToSummary: aSummaryCollection

	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 16:46:45'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'lucy 5/31/2023 16:48:25' prior: 50628321 overrides: 50628315!
addToSummary: aSummaryCollection

	aSummaryCollection add: 'Depósito por ', self value asString, '.'.
	^aSummaryCollection 
	! !
!Transference methodsFor: 'balance' stamp: 'lucy 5/31/2023 16:49:07' overrides: 50628315!
addToSummary: aSummaryCollection

	self subclassResponsibility ! !
!TransferenceIn methodsFor: 'balance' stamp: 'lucy 5/31/2023 16:49:56' overrides: 50628462!
addToSummary: aSummaryCollection

	aSummaryCollection add: 'Entrada por transferencia de ', self  asString, '.'.
	^aSummaryCollection 
	
	! !
!TransferenceIn methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:50:21' prior: 50628467 overrides: 50628462!
addToSummary: aSummaryCollection

	aSummaryCollection add: 'Entrada por transferencia de ', self amountReceived asString, '.'.
	^aSummaryCollection 
	
	! !
!TransferenceOut methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:51:21' overrides: 50628462!
addToSummary: aSummaryCollection

	aSummaryCollection add: 'Salida por transferencia de ', self amountReceived asString, '.'.
	^aSummaryCollection 
	
! !
!Withdraw methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:52:25' overrides: 50628315!
addToSummary: aSummaryCollection

	aSummaryCollection add: 'Extracción por ', self value asString, '.'.
	^aSummaryCollection 
! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:55:07' prior: 50627836!
printSummary

	|transactionSummary newLine balance|
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	transactions do: [:aTransaction | aTransaction addToSummary: transactionSummary].
	
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine]
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:55:10'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:10'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:10'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:10'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:10'!
ERROR!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:55:10'!
PASSED!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:55:29' prior: 50628498!
printSummary

	|transactionSummary newLine balance|
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	transactions do: [:aTransaction | aTransaction addToSummary: transactionSummary].
	
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	
	^transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:55:31'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:31'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:31'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:31'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:31'!
ERROR!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:55:31'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:55:33'!
FAILURE!

MethodObject new printSummaryForAccount: account!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:57:38' prior: 50628539!
printSummary

	|transactionSummary newLine balance|
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	transactions do: [:aTransaction | aTransaction addToSummary: transactionSummary].
	
	balance := String new.
	balance := ('Balance = ', self balance asString, '.') asString.
	transactionSummary add: balance.
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'lucy 5/31/2023 16:57:49'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:59:08' prior: 50628585!
printSummary

	|transactionSummary newLine balance summary|
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	transactions do: [:aTransaction | aTransaction addToSummary: transactionSummary].
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance
	
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:59:13'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:13'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:13'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:13'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:13'!
ERROR!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:59:13'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:13'!
ERROR!
!TransferenceOut methodsFor: 'summary' stamp: 'lucy 5/31/2023 16:59:26' prior: 50628483 overrides: 50628462!
addToSummary: aSummaryCollection

	aSummaryCollection add: 'Salida por transferencia de ', self amountSent asString, '.'.
	^aSummaryCollection 
	
! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 16:59:29'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:29'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:29'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:29'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 16:59:29'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 16:59:29'!
PASSED!

----SNAPSHOT----(31 May 2023 17:09:01) CuisUniversity-5799.image priorSource: 9479688!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 17:09:04'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:14:20'!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	expectedSummary := 'Balance = 0'.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:16:41'!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account portfolio deposit expectedSummary|
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:17:36' prior: 50628824!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| account portfolio deposit expectedSummary|
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:18:47' prior: 50628847!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| portfolio expectedSummary|
	
	portfolio := Portfolio new.
	expectedSummary := 'Balance = 0'.

	self assert: (MethodObject new printSummaryForAccount: portfolio) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:18:58' prior: 50628834!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	"| account portfolio deposit expectedSummary|
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.

	self assert: (MethodObject new printSummaryForAccount: account) equals: expectedSummary."! !

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:19:03'!
ERROR!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:19:40' prior: 50628860!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| portfolio expectedSummary|
	
	portfolio := Portfolio new.
	expectedSummary := 'Balance = 0'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 17:19:48'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 17:19:48'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 17:19:48'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 17:19:48'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 17:19:48'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 17:19:48'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:19:53'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:19:53'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:19:53'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:19:53'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:19:53'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:19:53'!
ERROR!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:19:53'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:19:53'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:19:53'!
ERROR!
!MethodObject methodsFor: 'portfolio' stamp: 'lucy 5/31/2023 17:20:08'!
printSummaryForPortfolio: portfolio 
	self shouldBeImplemented.! !
!MethodObject methodsFor: 'portfolio' stamp: 'lucy 5/31/2023 17:20:24' prior: 50628954!
printSummaryForPortfolio: portfolio 
	
	^'Balance = 0'.! !
!MethodObject methodsFor: 'portfolio' stamp: 'lucy 5/31/2023 17:23:14' prior: 50628959!
printSummaryForPortfolio: portfolio 
	
	^'Balance = 0.'.! !

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:23:27'!
FAILURE!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:23:27'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:23:40' prior: 50628888!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| portfolio expectedSummary|
	
	portfolio := Portfolio new.
	expectedSummary := 'Balance = 0.'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:23:49' prior: 50628980!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| portfolio expectedSummary|
	
	portfolio := Portfolio new.
	expectedSummary := 'Balance = 0'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!MethodObject methodsFor: 'portfolio' stamp: 'lucy 5/31/2023 17:24:10' prior: 50628964!
printSummaryForPortfolio: portfolio 
	
	^'Balance = 0'.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:24:19'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:24:20'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:24:20'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:24:20'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:24:20'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:24:20'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:24:20'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:24:20'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:24:57' prior: 50628871!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account portfolio deposit expectedSummary|
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:25:12' prior: 50629037!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account portfolio expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:25:30'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:25:30'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:25:30'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:25:30'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:25:30'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:25:30'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:25:30'!
FAILURE!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:25:30'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:25:30'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'lucy 5/31/2023 17:26:49'!
printSummary

	! !
!Portfolio methodsFor: 'summary' stamp: 'lucy 5/31/2023 17:30:48' prior: 50629100!
printSummary

	|accountsSummary newLine balance summary|
	
	accounts isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	accountsSummary := OrderedCollection new.
	^accounts do: [:anAccount | anAccount printSummary].

	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:30:59'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:30:59'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:30:59'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:30:59'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:30:59'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:30:59'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:30:59'!
FAILURE!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:30:59'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:30:59'!
FAILURE!
!MethodObject methodsFor: 'portfolio' stamp: 'lucy 5/31/2023 17:31:32' prior: 50629002!
printSummaryForPortfolio: portfolio 
	
	^portfolio printSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:31:34'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:31:34'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:31:34'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:31:34'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:31:34'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:31:34'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:31:34'!
FAILURE!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:31:34'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:31:34'!
FAILURE!
!Portfolio methodsFor: 'summary' stamp: 'lucy 5/31/2023 17:32:08' prior: 50629104!
printSummary

	|accountsSummary newLine |
	
	accounts isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	accountsSummary := OrderedCollection new.
	^accounts first printSummary.

	! !
!Portfolio methodsFor: 'summary' stamp: 'lucy 5/31/2023 17:32:18' prior: 50629188!
printSummary

	
	
	accounts isEmpty ifTrue: [^'Balance = 0'].
	^accounts first printSummary.

	! !
!Portfolio methodsFor: 'summary' stamp: 'lucy 5/31/2023 17:32:26' prior: 50629197!
printSummary

	accounts isEmpty ifTrue: [^'Balance = 0'].
	^accounts first printSummary.

	! !

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:32:33'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:32:36'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:34:43' prior: 50629052!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account1 account2 portfolio expectedSummary|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account2.
	portfolio := Portfolio with: account1 with: account2.
	
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:35:21'!
test08PortfolioWithTwoAccountsPrintsSummaryCorrectly
	
	| account1 account2 portfolio expectedSummary|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account2.
	portfolio := Portfolio with: account1 with: account2.
	
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50.'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lucy 5/31/2023 17:25:12' prior: 50629242!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account portfolio expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (MethodObject new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:36:09'!
FAILURE!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:36:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 17:37:15'!
addTransactionsToSummary: transactionSummary

	^ transactions do: [:aTransaction | aTransaction addToSummary: transactionSummary]! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'lucy 5/31/2023 17:37:15' prior: 50628617!
printSummary

	|transactionSummary newLine balance summary|
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	self addTransactionsToSummary: transactionSummary.
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance
	
	! !
!Portfolio methodsFor: 'summary' stamp: 'lucy 5/31/2023 17:38:38' prior: 50629203!
printSummary

	|transactionSummary newLine balance summary|
	
	accounts isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsToSummary: transactionSummary].
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance

	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:38:40'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!testRun: #AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:38:48'!
PASSED!

!methodRemoval: AccountSummaryTest #testWorksInPortfolio stamp: 'lucy 5/31/2023 17:38:58'!
testWorksInPortfolio
	
	"| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: ReceptiveAccount new transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 50.'.

	self assert: (account printSummary) equals: expectedSummary."!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:39:02'!
PASSED!

----SNAPSHOT----(31 May 2023 17:39:49) CuisUniversity-5799.image priorSource: 9505319!

----SNAPSHOT----(31 May 2023 17:39:58) CuisUniversity-5799.image priorSource: 9530585!

----QUIT----(31 May 2023 17:40:06) CuisUniversity-5799.image priorSource: 9530673!

----STARTUP---- (31 May 2023 17:42:44) as /home/lucy/Documents/portfolio2/portfolio2/CuisUniversity-5799.image!


!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'lucy 5/31/2023 17:42:50'!
PASSED!

----STARTUP---- (31 May 2023 17:45:34) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-summary/portfolio2/CuisUniversity-5799.image!


!classRenamed: #MethodObject as: #AccountSummary stamp: 'pau 5/31/2023 17:47:26'!
Smalltalk renameClassNamed: #MethodObject as: #AccountSummary!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50627967!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (AccountSummary new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50627934!
test01EmptyAccountSummaryHasOnlyBalance0
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	expectedSummary := 'Balance = 0'.

	self assert: (AccountSummary new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50629259!
test08PortfolioWithTwoAccountsPrintsSummaryCorrectly
	
	| account1 account2 portfolio expectedSummary|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account2.
	portfolio := Portfolio with: account1 with: account2.
	
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50.'.

	self assert: (AccountSummary new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50628991!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| portfolio expectedSummary|
	
	portfolio := Portfolio new.
	expectedSummary := 'Balance = 0'.

	self assert: (AccountSummary new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50627995!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: (ReceptiveAccount new) transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 30.'.

	self assert: (AccountSummary new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50629277!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account portfolio expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	self assert: (AccountSummary new printSummaryForPortfolio: portfolio) equals: expectedSummary.! !
!ExtractToMethodObjectTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50500379!
methodObjectClassName

	^#AccountSummary! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50628009!
test05AccountWithTransferenceOutPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Transference from: account transfer: 30 to:  (ReceptiveAccount new).
	expectedSummary := 'Salida por transferencia de 30.
Balance = -30.'.

	self assert: (AccountSummary new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:47:27' prior: 50627980!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary|
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50.'.

	self assert: (AccountSummary new printSummaryForAccount: account) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:00'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 5/31/2023 17:48:07'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 5/31/2023 17:48:07'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 5/31/2023 17:48:07'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 5/31/2023 17:48:07'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 5/31/2023 17:48:07'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 5/31/2023 17:48:07'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 17:48:29'!
PASSED!

Object subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 17:54:16'!
Object subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'nil' stamp: 'pau 5/31/2023 17:54:55'!
test01AccountWithNoTransferenceGivesZero

	! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 17:55:44'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 17:55:36' prior: 50629718!
test01AccountWithNoTransferenceGivesZero

	| account |
	
	account := ReceptiveAccount new.

	self assert: (TransferNet transferNet: account) equals: 0.! !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 17:56:14'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 17:56:16'!
ERROR!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 17:56:16'!
ERROR!
!TransferNet class methodsFor: 'transferNet' stamp: 'pau 5/31/2023 17:56:30'!
transferNet: account 
	self shouldBeImplemented.! !
!TransferNet class methodsFor: 'transferNet' stamp: 'pau 5/31/2023 17:56:35' prior: 50629757!
transferNet: account 
	^0! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 17:56:36'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:00:06'!
test02AccountThatOnlyHasOneTrasferenceToAnotherAccount

	| accountSending accountReceiving account tranference |
	
	accountSending := ReceptiveAccount new.
	accountReceiving := ReceptiveAccount new.
	tranference := Transference .

	self assert: (TransferNet transferNet: account) equals: 0.! !

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:00:58'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'receivingAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:01:39' prior: 50629769!
test02AccountThatOnlyHasOneTrasferenceToAnotherAccount

	| senderAccount account tranference accountReceiving |
	
	senderAccount := ReceptiveAccount new.
	accountReceiving := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.

	self assert: (TransferNet transferNet: account) equals: 0.! !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:01:56'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:02:29' prior: 50629790!
test02AccountThatOnlyHasOneTrasferenceToAnotherAccount

	| senderAccount receivingAccount tranference |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.

	self assert: (TransferNet transferNet: receivingAccount) equals: 10.! !

!testRun: #TransferNetTest #test02AccountThatOnlyHasOneTrasferenceToAnotherAccount stamp: 'pau 5/31/2023 18:02:45'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:04:33' prior: 50629730!
test01AccountWithNoTransferenceGivesZero

	| account  tranferNet|
	
	account := ReceptiveAccount new.
	tranferNet := TransferNet for: account. 
	
	self assert: (tranferNet tranferNet ) equals: 0.! !
!TransferNet class methodsFor: 'transferNet' stamp: 'pau 5/31/2023 18:04:52'!
for: account! !

!methodRemoval: TransferNet class #transferNet: stamp: 'pau 5/31/2023 18:04:55'!
transferNet: account 
	^0!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:05:06'!
ERROR!
!TransferNet class methodsFor: 'tranfer net' stamp: 'pau 5/31/2023 18:05:30'!
tranferNet
	self shouldBeImplemented.! !
!TransferNet class methodsFor: 'tranfer net' stamp: 'pau 5/31/2023 18:05:35' prior: 50629853!
tranferNet
	^0! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:05:39'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:05:39'!
PASSED!

!testRun: #TransferNetTest #test02AccountThatOnlyHasOneTrasferenceToAnotherAccount stamp: 'pau 5/31/2023 18:05:39'!
ERROR!

!testRun: #TransferNetTest #test02AccountThatOnlyHasOneTrasferenceToAnotherAccount stamp: 'pau 5/31/2023 18:05:39'!
ERROR!
!TransferNet methodsFor: 'nil' stamp: 'pau 5/31/2023 18:05:51'!
tranferNet
	^0! !

!methodRemoval: TransferNet class #tranferNet stamp: 'pau 5/31/2023 18:06:01'!
tranferNet
	^0!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:06:10'!
ERROR!
!TransferNet class methodsFor: 'transferNet' stamp: 'pau 5/31/2023 18:06:29' prior: 50629843!
for: account
	^self new! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:06:30'!
PASSED!

!testRun: #TransferNetTest #test02AccountThatOnlyHasOneTrasferenceToAnotherAccount stamp: 'pau 5/31/2023 18:06:30'!
ERROR!

!testRun: #TransferNetTest #test02AccountThatOnlyHasOneTrasferenceToAnotherAccount stamp: 'pau 5/31/2023 18:06:30'!
ERROR!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:06:36'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:07:10' prior: 50629816!
test02AccountThatOnlyHasOneTrasferenceToAnotherAccount

	| senderAccount receivingAccount tranference tranferNet |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	tranferNet := TransferNet for: senderAccount. 
	
	self assert: (tranferNet tranferNet) equals: 10.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:08:02'!
test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference

	| senderAccount receivingAccount tranference tranferNet |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	tranferNet := TransferNet for: receivingAccount. 
	
	self assert: (tranferNet tranferNet) equals: 10.! !

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:08:05'!
FAILURE!

!methodRemoval: TransferNetTest #test02AccountThatOnlyHasOneTrasferenceToAnotherAccount stamp: 'pau 5/31/2023 18:08:28'!
test02AccountThatOnlyHasOneTrasferenceToAnotherAccount

	| senderAccount receivingAccount tranference tranferNet |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	tranferNet := TransferNet for: senderAccount. 
	
	self assert: (tranferNet tranferNet) equals: 10.!
!TransferNet class methodsFor: 'transferNet' stamp: 'pau 5/31/2023 18:09:07' prior: 50629886!
for: account
	^self new initializeWithAccount: account ! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:09:12'!
ERROR!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:09:12'!
ERROR!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:09:14'!
ERROR!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:09:23'!
Object subclass: #TransferNet
	instanceVariableNames: 'account_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialize' stamp: 'pau 5/31/2023 18:09:23'!
initializeWithAccount: account 
	self shouldBeImplemented.
	account_CHANGE_ME := account.! !
!TransferNet methodsFor: 'initialize' stamp: 'pau 5/31/2023 18:10:27' prior: 50629981!
initializeWithAccount: anAccount 
	
	"account := anAccount."! !

Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:10:32'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialize' stamp: 'pau 5/31/2023 18:10:40' prior: 50629987!
initializeWithAccount: anAccount 
	
	account := anAccount.! !
!TransferNet methodsFor: 'tranfer net' stamp: 'pau 5/31/2023 18:11:07' prior: 50629876!
tranferNet
	^ account calculateTranferNet! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'pau 5/31/2023 18:13:22'!
calculateTransferNet! !
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 5/31/2023 18:16:05' prior: 50630013!
calculateTransferNet

	|tranferNet|
	tranferNet := 0. 
	
	^transactions do:[:aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [tranferNet := tranferNet + aTransaction]
		ifFalse:[].
		]! !
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 5/31/2023 18:17:01' prior: 50630017!
calculateTransferNet

	|tranferNet|
	tranferNet := 0. 
	
	^transactions do:[:aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [tranferNet := tranferNet + aTransaction amountReceived ]
		ifFalse:[tranferNet := tranferNet + aTransaction amountSent ].
		]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 5/31/2023 18:17:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 18:17:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 18:17:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 5/31/2023 18:17:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 5/31/2023 18:17:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 5/31/2023 18:17:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 5/31/2023 18:17:02'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:17:09'!
ERROR!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:17:09'!
ERROR!
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 5/31/2023 18:18:05'!
calculateTranferNet

	|tranferNet|
	tranferNet := 0. 
	
	^transactions do:[:aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [tranferNet := tranferNet + aTransaction amountReceived ]
		ifFalse:[tranferNet := tranferNet + aTransaction amountSent ].
		]! !

!methodRemoval: ReceptiveAccount #calculateTransferNet stamp: 'pau 5/31/2023 18:18:05'!
calculateTransferNet

	|tranferNet|
	tranferNet := 0. 
	
	^transactions do:[:aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [tranferNet := tranferNet + aTransaction amountReceived ]
		ifFalse:[tranferNet := tranferNet + aTransaction amountSent ].
		]!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:18:12'!
FAILURE!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:18:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 5/31/2023 18:18:57' prior: 50630075!
calculateTranferNet

	|tranferNet|
	tranferNet := 0. 
	
	transactions do:[:aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [tranferNet := tranferNet + aTransaction amountReceived ]
		ifFalse:[tranferNet := tranferNet + aTransaction amountSent ].
		].
	^tranferNet ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 5/31/2023 18:18:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 18:18:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 18:18:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 5/31/2023 18:18:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 5/31/2023 18:18:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 5/31/2023 18:18:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 5/31/2023 18:18:58'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:19:01'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:19:01'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:19:46'!
test02ReceivingAccountOfOnlyOneTranferenceThenTranferNet

	| senderAccount receivingAccount tranference tranferNet |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	tranferNet := TransferNet for: senderAccount. 
	
	self assert: (tranferNet tranferNet) equals: -10.! !

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNet stamp: 'pau 5/31/2023 18:19:48'!
FAILURE!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNet stamp: 'pau 5/31/2023 18:20:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 5/31/2023 18:20:29' prior: 50630108!
calculateTranferNet

	|tranferNet|
	tranferNet := 0. 
	
	transactions do:[:aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [tranferNet := tranferNet + aTransaction amountReceived ]
		ifFalse:[tranferNet := tranferNet - aTransaction amountSent ].
		].
	^tranferNet ! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:21:23'!
test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount

	| senderAccount receivingAccount tranference tranferNet |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	tranferNet := TransferNet for: senderAccount. 
	
	self assert: (tranferNet tranferNet) equals: -10.! !

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 18:21:25'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:21:25'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNet stamp: 'pau 5/31/2023 18:21:25'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:21:25'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 18:21:25'!
PASSED!

!methodRemoval: TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNet stamp: 'pau 5/31/2023 18:21:29'!
test02ReceivingAccountOfOnlyOneTranferenceThenTranferNet

	| senderAccount receivingAccount tranference tranferNet |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	tranferNet := TransferNet for: senderAccount. 
	
	self assert: (tranferNet tranferNet) equals: -10.!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 18:21:37'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:21:37'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:21:37'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 18:21:37'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:23:37'!
test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences

	| senderAccount receivingAccount tranferNet tranference1 tranference2 tranference3 |
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference1 := Transference from: senderAccount transfer: 100 to: receivingAccount.
	tranference2 := Transference from: receivingAccount transfer: 10 to: senderAccount.
	tranference3 := Transference from: senderAccount transfer: 100 to: receivingAccount.
	tranferNet := TransferNet for: senderAccount. 
	
	self assert: (tranferNet tranferNet) equals: 290.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:23:53' prior: 50630263!
test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences

	| account1 receivingAccount tranferNet tranference1 tranference2 tranference3 |
	
	account1 := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	tranference1 := Transference from: account1 transfer: 100 to: receivingAccount.
	tranference2 := Transference from: receivingAccount transfer: 10 to: account1.
	tranference3 := Transference from: account1 transfer: 100 to: receivingAccount.
	tranferNet := TransferNet for: account1. 
	
	self assert: (tranferNet tranferNet) equals: 290.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:24:02' prior: 50630286!
test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences

	| account1 account2 tranferNet tranference1 tranference2 tranference3 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	tranference1 := Transference from: account1 transfer: 100 to: account2.
	tranference2 := Transference from: account2 transfer: 10 to: account1.
	tranference3 := Transference from: account1 transfer: 100 to: account2.
	tranferNet := TransferNet for: account1. 
	
	self assert: (tranferNet tranferNet) equals: 290.! !

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 18:24:07'!
FAILURE!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 18:24:23'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:24:33' prior: 50630308!
test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences

	| account1 account2 tranferNet tranference1 tranference2 tranference3 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	tranference1 := Transference from: account1 transfer: 100 to: account2.
	tranference2 := Transference from: account2 transfer: 10 to: account1.
	tranference3 := Transference from: account1 transfer: 100 to: account2.
	tranferNet := TransferNet for: account2. 
	
	self assert: (tranferNet tranferNet) equals: 290.! !

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 18:24:42'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:25:06' prior: 50630338!
test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences

	| account1 account2 tranferNet tranference1 tranference2 tranference3 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	tranference1 := Transference from: account1 transfer: 100 to: account2.
	tranference2 := Transference from: account2 transfer: 10 to: account1.
	tranference3 := Transference from: account1 transfer: 100 to: account2.
	tranferNet := TransferNet for: account2. 
	
	self assert: (tranferNet tranferNet) equals: 290.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:27:21' prior: 50630363!
test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences

	| account1 account2 tranferNet tranference1 tranference2 tranference3 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	tranference1 := Transference from: account1 transfer: 100 to: account2.
	tranference2 := Transference from: account2 transfer: 10 to: account1.
	tranference3 := Transference from: account1 transfer: 100 to: account2.
	tranferNet := TransferNet for: account2. 
	
	self assert: (tranferNet tranferNet) equals: 190.! !

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 18:27:25'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:27:25'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:27:25'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 18:27:25'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 18:27:26'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:28:57'!
test05TranferNetOfAPortfolio

	| account1 account2 tranferNet tranference1 tranference2 tranference3 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	tranference1 := Transference from: account1 transfer: 100 to: account2.
	tranference2 := Transference from: account2 transfer: 10 to: account1.
	tranference3 := Transference from: account1 transfer: 100 to: account2.
	tranferNet := TransferNet for: account2. 
	
	self assert: (tranferNet tranferNet) equals: 190.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:29:01' prior: 50630425!
test05TranferNetOfAPortfolio

	! !

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:30:26'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:30:18'!
test05TranferNetOfAnEmptyPortfolioIs0

	| portfolio tranferNet |
	
	portfolio := Portfolio new.
	transferNet := TransferNet for: portfolio . 

	self assert: (tranferNet tranferNet) equals: 0.! !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:30:38'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: TransferNetTest #test05TranferNetOfAPortfolio stamp: 'pau 5/31/2023 18:30:42'!
test05TranferNetOfAPortfolio

	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:30:50' prior: 50630456!
test05TranferNetOfAnEmptyPortfolioIs0

	| portfolio tranferNet transferNet |
	
	portfolio := Portfolio new.
	transferNet := TransferNet for: portfolio. 

	self assert: (tranferNet tranferNet) equals: 0.! !

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:30:58'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:31:46'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:32:08'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'pau 5/31/2023 18:32:35'!
calculateTranferNet! !

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:33:02'!
ERROR!

transferNet!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:33:18'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:33:22'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:33:31'!
ERROR!

!classDefinition: 'TransferNetTest class' category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:34:16'!
TransferNetTest class
	instanceVariableNames: 'ranferNetOfAnEmptyPortfolioIs0'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:34:32' prior: 50630482!
test05TranferNetOfAnEmptyPortfolioIs0
	| portfolio transferNet |
	
	portfolio := Portfolio new.
	transferNet := TransferNet for: portfolio. 

	self assert: (transferNet tranferNet) equals: 0.! !

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:34:33'!
FAILURE!
!Portfolio methodsFor: 'transferNet' stamp: 'pau 5/31/2023 18:34:47' prior: 50630501!
calculateTranferNet
	^0! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 5/31/2023 18:34:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 5/31/2023 18:34:48'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:35:14'!
test05TranferNetOfAnPortfolioThatHasOneAccountWithTranference
	| portfolio transferNet |
	
	portfolio := Portfolio new.
	transferNet := TransferNet for: portfolio. 

	self assert: (transferNet tranferNet) equals: 0.! !

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:37:37'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'receptiveAccont1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:37:46' prior: 50630600!
test05TranferNetOfAnPortfolioThatHasOneAccountWithTranference
	| portfolio transferNet receptiveAccont2 |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	
	"tranference := Transference for: rece
	transferNet := TransferNet for: portfolio. "

	self assert: (transferNet tranferNet) equals: 0.! !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:37:54'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:38:08'!
test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference
	| portfolio transferNet receptiveAccont2 |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	
	"tranference := Transference for: rece
	transferNet := TransferNet for: portfolio. "

	self assert: (transferNet tranferNet) equals: 0.! !

!methodRemoval: TransferNetTest #test05TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 18:38:08'!
test05TranferNetOfAnPortfolioThatHasOneAccountWithTranference
	| portfolio transferNet receptiveAccont2 |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	
	"tranference := Transference for: rece
	transferNet := TransferNet for: portfolio. "

	self assert: (transferNet tranferNet) equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:39:49' prior: 50630646!
test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference
	| portfolio transferNet receptiveAccont1 receptiveAccont2 tranference |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	portfolio add: receptiveAccont1. 
	
	tranference := Transference from:  receptiveAccont1  transfer: 100  to:receptiveAccont2 . 

	transferNet := TransferNet for: portfolio. 

	self assert: (transferNet tranferNet) equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:39:56' prior: 50630676!
test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference
	| portfolio transferNet receptiveAccont1 receptiveAccont2 tranference |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	portfolio add: receptiveAccont1. 
	
	tranference := Transference from:  receptiveAccont1  transfer: 100  to:receptiveAccont2 . 

	transferNet := TransferNet for: portfolio. 

	self assert: (transferNet tranferNet) equals: -100.! !

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 18:39:59'!
FAILURE!
!Portfolio methodsFor: 'transferNet' stamp: 'pau 5/31/2023 18:44:09' prior: 50630538!
calculateTranferNet
	
	|tranferNet|
	tranferNet := 0.
	
	accounts do: [:anAccount | tranferNet := tranferNet  + tranferNet calculateTranferNet].
	
	^tranferNet ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 5/31/2023 18:44:34'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 18:44:52'!
ERROR!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 18:44:52'!
ERROR!
!Portfolio methodsFor: 'transferNet' stamp: 'pau 5/31/2023 18:45:20' prior: 50630717!
calculateTranferNet
	
	|tranferNet|
	tranferNet := 0.
	
	accounts do: [:anAccount | tranferNet := tranferNet  + anAccount calculateTranferNet].
	
	^tranferNet ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 5/31/2023 18:45:21'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 18:45:26'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:45:29'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:45:29'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 18:45:29'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 18:45:29'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:45:29'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 18:45:29'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 18:48:33'!
test07
	| portfolio transferNet receptiveAccont1 receptiveAccont2 tranference |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	portfolio add: receptiveAccont2. 
	
	tranference := Transference from:  receptiveAccont1  transfer: 100  to:receptiveAccont2 . 

	transferNet := TransferNet for: portfolio. 

	self assert: (transferNet tranferNet) equals: 100.! !

!testRun: #TransferNetTest #test07 stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'pau 5/31/2023 18:48:36'!
PASSED!

!methodRemoval: TransferNetTest #test07 stamp: 'pau 5/31/2023 18:48:49'!
test07
	| portfolio transferNet receptiveAccont1 receptiveAccont2 tranference |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	portfolio add: receptiveAccont2. 
	
	tranference := Transference from:  receptiveAccont1  transfer: 100  to:receptiveAccont2 . 

	transferNet := TransferNet for: portfolio. 

	self assert: (transferNet tranferNet) equals: 100.!

Object subclass: #ReportGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportGenerator category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:56:09'!
Object subclass: #ReportGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:56:28'!
ReportGenerator subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 18:56:39'!
ReportGenerator subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(31 May 2023 19:35:35) CuisUniversity-5799.image priorSource: 9530761!
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 5/31/2023 19:46:54' prior: 50630179!
calculateTranferNet

	^transactions inject:0 into:[:tranferNet :aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [ aTransaction amountReceived ]
		ifFalse:[ aTransaction amountSent negated ].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 5/31/2023 19:46:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 19:46:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 19:46:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 5/31/2023 19:46:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 5/31/2023 19:46:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 5/31/2023 19:46:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 5/31/2023 19:46:55'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 5/31/2023 19:47:01'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 5/31/2023 19:47:01'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 5/31/2023 19:47:01'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 5/31/2023 19:47:01'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 5/31/2023 19:47:01'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 5/31/2023 19:47:01'!
PASSED!
!Portfolio methodsFor: 'transferNet' stamp: 'pau 5/31/2023 19:49:21' prior: 50630791!
calculateTranferNet
	
	^accounts inject: 0 into: [:tranferNet :anAccount | tranferNet  + anAccount calculateTranferNet].
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 5/31/2023 19:49:22'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 19:49:29'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 19:49:36'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 19:49:36'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 19:49:36'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 19:49:36'!
FAILURE!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 19:49:36'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 19:49:36'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 19:49:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 5/31/2023 19:50:55' prior: 50630988!
calculateTranferNet

	^transactions inject:0 into:[:tranferNet :aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [ tranferNet + aTransaction amountReceived ]
		ifFalse:[ tranferNet + aTransaction amountSent negated ].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 5/31/2023 19:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 19:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 5/31/2023 19:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 5/31/2023 19:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 5/31/2023 19:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 5/31/2023 19:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 5/31/2023 19:50:56'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 5/31/2023 19:51:05'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 19:51:05'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 5/31/2023 19:51:05'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 5/31/2023 19:51:05'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 5/31/2023 19:51:05'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 5/31/2023 19:51:05'!
PASSED!

----SNAPSHOT----(31 May 2023 19:54:10) CuisUniversity-5799.image priorSource: 9578684!

----SNAPSHOT----(31 May 2023 19:54:40) CuisUniversity-5799.image priorSource: 9586667!

----QUIT----(31 May 2023 19:54:44) CuisUniversity-5799.image priorSource: 9586755!

----STARTUP---- (31 May 2023 19:55:33) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-summary/portfolio2/CuisUniversity-5799.image!


----QUIT----(31 May 2023 19:55:40) CuisUniversity-5799.image priorSource: 9586843!

----STARTUP---- (31 May 2023 19:56:34) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-summary/portfolio2/CuisUniversity-5799.image!


!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 19:57:13'!
ReportGenerator subclass: #TransferNet
	instanceVariableNames: 'account tranferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialize' stamp: 'pau 5/31/2023 19:57:20' prior: 50630004!
initializeWithAccount: anAccount 
	tranferNet := 0.
	account := anAccount.! !
!TransferNet methodsFor: 'tranfer net' stamp: 'pau 5/31/2023 19:57:35' prior: 50630009!
tranferNet
	account calculateTranferNet.
	^tranferNet ! !
!AccountSummary class methodsFor: 'nil' stamp: 'pau 5/31/2023 20:01:49'!
for: anAccount
	^self new initializeWith: anAccount ! !

ReportGenerator subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 20:02:18'!
ReportGenerator subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #AccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'pau 5/31/2023 20:02:33'!
ReportGenerator subclass: #AccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'nil' stamp: 'pau 5/31/2023 20:03:10'!
initializeWith: anAccount 
	account := anAccount.
	summary := ''.! !
!AccountSummary methodsFor: 'nil' stamp: 'pau 5/31/2023 20:03:57'!
printSummary
	account printSummary. ! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:04:32' prior: 50629513!
test01EmptyAccountSummaryHasOnlyBalance0
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary for: account. 
	expectedSummary := 'Balance = 0'.

	self assert: (AccountSummary new printSummaryForAccount: account) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:04:53' prior: 50631314!
test01EmptyAccountSummaryHasOnlyBalance0
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary for: account. 
	expectedSummary := 'Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:04:54'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 20:05:19' prior: 50631309!
printSummary
	^account printSummary. ! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:05:44'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:05:44'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:06:18' prior: 50629500!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100.'.
	
	summary := AccountSummary for: account. 
	self assert: (summary printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:20'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:20'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:06:37' prior: 50629604!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50.'.

	summary := AccountSummary for: account. 
	self assert: (summary printSummary)equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:06:52' prior: 50629554!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Transference from: (ReceptiveAccount new) transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 30.'.

	summary := AccountSummary for: account. 
	self assert: (summary printSummary)equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:54'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:06:54'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:07:00' prior: 50629589!
test05AccountWithTransferenceOutPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Transference from: account transfer: 30 to:  (ReceptiveAccount new).
	expectedSummary := 'Salida por transferencia de 30.
Balance = -30.'.

	summary := AccountSummary for: account. 
	self assert: (summary printSummary)equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:07:21' prior: 50629543!
test06EmptyPortfolioSummaryHasOnlyBalance0
	
	| portfolio expectedSummary summary |
	
	portfolio := Portfolio new.
	expectedSummary := 'Balance = 0'.

	summary := AccountSummary for: portfolio . 
	self assert: (summary printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:07:34' prior: 50629569!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account portfolio expectedSummary summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	expectedSummary := 'Depósito por 100.
Balance = 100.'.

	summary := AccountSummary for: portfolio . 
	self assert: (summary printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:07:43' prior: 50629524!
test08PortfolioWithTwoAccountsPrintsSummaryCorrectly
	
	| account1 account2 portfolio expectedSummary summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account2.
	portfolio := Portfolio with: account1 with: account2.
	
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50.'.

	summary := AccountSummary for: portfolio . 
	self assert: (summary printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:07:51'!
PASSED!

!methodRemoval: AccountSummary #printSummaryForAccount: stamp: 'pau 5/31/2023 20:08:01'!
printSummaryForAccount: anAccount

	^anAccount printSummary!

!methodRemoval: AccountSummary #printSummaryForPortfolio: stamp: 'pau 5/31/2023 20:08:02'!
printSummaryForPortfolio: portfolio 
	
	^portfolio printSummary.!
!AccountSummary methodsFor: 'initialize' stamp: 'pau 5/31/2023 20:10:51' prior: 50631304!
initializeWith: anAccount 
	account := anAccount.
	summary := ''.! !
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:11:16' prior: 50631341!
printSummary
	^account printSummary: self. ! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:11:45'!
printSummary: aSummary

	|transactionSummary newLine balance summary|
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	self addTransactionsToSummary: transactionSummary.
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance
	
	! !

!methodRemoval: ReceptiveAccount #printSummary stamp: 'pau 5/31/2023 20:11:48'!
printSummary

	|transactionSummary newLine balance summary|
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	self addTransactionsToSummary: transactionSummary.
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance
	
	!
!Portfolio methodsFor: 'summary' stamp: 'pau 5/31/2023 20:11:57'!
printSummary: aSummary

	|transactionSummary newLine balance summary|
	
	accounts isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsToSummary: transactionSummary].
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance

	! !

!methodRemoval: Portfolio #printSummary stamp: 'pau 5/31/2023 20:12:00'!
printSummary

	|transactionSummary newLine balance summary|
	
	accounts isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	transactionSummary := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsToSummary: transactionSummary].
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance

	!
!AccountSummary methodsFor: 'initialize' stamp: 'pau 5/31/2023 20:12:39' prior: 50631597!
initializeWith: anAccount 
	account := anAccount.
	summary := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:14:11' prior: 50631607!
printSummary: aSummary

	|newLine |
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.
	self addTransactionsToSummary: aSummary.
"
	transactionSummary := OrderedCollection new.
	self addTransactionsToSummary: transactionSummary.
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance"
	
	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:14:19' prior: 50631680!
printSummary: aSummary

	|newLine |
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.
	self addTransactionsToSummary: aSummary.
"
	transactionSummary := OrderedC
	ollection new.
	self addTransactionsToSummary: transactionSummary.
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance"
	
	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:15:45' prior: 50629329!
addTransactionsToSummary: aSummary

	"^ transactions do: [:aTransaction | aTransaction addToSummary: transactionSummary]"
	
	^ transactions do:[:aTransaction| aTransaction addToSummary: aSummary]! !
!Deposit methodsFor: 'summary' stamp: 'pau 5/31/2023 20:16:51' prior: 50628455 overrides: 50628315!
addToSummary: aSummary
	aSummary addDepositToSummaryFor: self value. 
	
	"
	aSummaryCollection add: 'Depósito por ', self value asString, '.'.
	^aSummaryCollection "
	! !
!Deposit methodsFor: 'summary' stamp: 'pau 5/31/2023 20:17:28' prior: 50631725 overrides: 50628315!
addToSummary: aSummary
	aSummary addDepositToSummaryFor: value. 
	
	"
	aSummaryCollection add: 'Depósito por ', self value asString, '.'.
	^aSummaryCollection "
	! !
!AccountSummary methodsFor: 'nil' stamp: 'pau 5/31/2023 20:18:01'!
addDepositToSummaryFor: aDepositedValue
	! !
!Deposit methodsFor: 'summary' stamp: 'pau 5/31/2023 20:18:13' prior: 50631734 overrides: 50628315!
addToSummary: aSummary
	aSummary addDepositToSummaryFor: value. 
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 20:19:06' prior: 50631742!
addDepositToSummaryFor: aDepositedValue

	summary add: 'Depósito por ', aDepositedValue asString, '.'.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 20:20:03'!
addWithdrawToSummaryFor: aWithdrawedValue

	summary add: 'Extracción por ', aWithdrawedValue asString, '.'.
	! !
!Withdraw methodsFor: 'summary' stamp: 'pau 5/31/2023 20:20:46' prior: 50628491 overrides: 50628315!
addToSummary: aSummary

	aSummary addWithdrawToSummaryFor: value.! !
!AccountSummary methodsFor: 'nil' stamp: 'pau 5/31/2023 20:22:16'!
addTranferenceInToSummaryFor: amountReceived

	summary add: 'Entrada por transferencia de ', amountReceived asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'pau 5/31/2023 20:22:34'!
addTranferenceOutToSummaryFor: amountSent

	summary add: 'Salida por transferencia de ', amountSent asString, '.'.! !
!TransferenceIn methodsFor: 'summary' stamp: 'pau 5/31/2023 20:22:57' prior: 50628475 overrides: 50628462!
addToSummary: aSummary

	aSummary addTranferenceInToSummaryFor: value.
	
	! !
!TransferenceOut methodsFor: 'summary' stamp: 'pau 5/31/2023 20:23:09' prior: 50628662 overrides: 50628462!
addToSummary: aSummary

	aSummary addTranferenceOutToSummaryFor: value.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:24:42' prior: 50631715!
addTransactionsToSummary: aSummary

	^ transactions do:[:aTransaction| aTransaction addToSummary: aSummary]! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:24:55' prior: 50631798!
addTransactionsToSummary: aSummary

	transactions do:[:aTransaction| aTransaction addToSummary: aSummary]! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:25:48' prior: 50631697!
printSummary: aSummary

	|newLine |
	
	transactions isEmpty ifTrue: [^'Balance = 0'].
	
	newLine := '
' asString.

	self addTransactionsToSummary: aSummary.
	"
	
	summary := transactionSummary inject: '' into: [:finalSummary :string | finalSummary,string,newLine].
	balance := ('Balance = ', self balance asString, '.') asString.
	
	^summary,balance"
	
	! !
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:27:15' prior: 50631603!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,@81].
	
	balance := ('Balance = ', account balance, '.') asString.
	
	^summary,balance! !
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:27:29' prior: 50631827!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,@81].
	
	balance := ('Balance = ', account balance, '.') asString.
	
	^summary,balance! !
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:29:39' prior: 50631838!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,Character cr].
	
	balance := ('Balance = ', account balance, '.') asString.
	
	^summary,balance! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 5/31/2023 20:30:20' prior: 50631812!
printSummary: aSummary

	self addTransactionsToSummary: aSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:30:58'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:30:58'!
ERROR!
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:31:23' prior: 50631849!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,Character cr].
	
	balance := ('Balance = ', account balance asString, '.') asString.
	
	^summary,balance! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:31:33'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:31:33'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:31:33'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:31:33'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:31:33'!
ERROR!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:31:33'!
FAILURE!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:31:33'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:31:33'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:31:37'!
FAILURE!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:31:37'!
FAILURE!

summary printSummary!
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:34:00' prior: 50631873!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,Character cr].
	
	balance := ('Balance = ', account balance asString, '.') asString.
	
	^summary,balance asString! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:34:50'!
FAILURE!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:34:50'!
FAILURE!

summary,balance asString!
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:35:57' prior: 50631923!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,Character cr].
	
	balance := ('Balance = ', account balance asString, '.') asString.
	
	^final_summary,balance! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:36:01'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:36:24' prior: 50631326!
test01EmptyAccountSummaryHasOnlyBalance0
	
	| account summary expectedSummary|
	
	account := ReceptiveAccount new.
	summary := AccountSummary for: account. 
	expectedSummary := 'Balance = 0'.

	self assert: (summary printSummary) equals: expectedSummary.! !
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:36:32' prior: 50631943!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,Character cr].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:36:41'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:36:41'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:41'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:41'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:41'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:41'!
ERROR!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:36:41'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:41'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:41'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:36:46'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:36:46'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:46'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:46'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:46'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:46'!
ERROR!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:36:46'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:46'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:46'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:36:55'!
ERROR!
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:37:25' prior: 50631969!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,Character cr asString].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:37:35' prior: 50632053!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,(Character cr asString)].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:37:37'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:37:37'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:37:37'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:37:37'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:37:37'!
FAILURE!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:37:37'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:37:37'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:37:37'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:37:40'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:38:00' prior: 50631380!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100'.
	
	summary := AccountSummary for: account. 
	self assert: (summary printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:38:02' prior: 50632112!
test02AccountWithDepositPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	expectedSummary := 'Depósito por 100.
Balance = 100'.
	
	summary := AccountSummary for: account. 
	self assert: (summary printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:38:03'!
FAILURE!

a := Character cr!

a := Character crCharacter !

a := Character numericValue: 10.!

a := Character numericValue: 10.!

a!

a!

a := Character numericValue: 13.!

a := Character numericValue: 12.!

a := Character numericValue: 10.!
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:44:25' prior: 50632065!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string,(Character numericValue: 10 asString)].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 20:44:30'!
FAILURE!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 5/31/2023 20:44:30'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:38'!
ERROR!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:44:47'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:44:47'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:47'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:47'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:47'!
ERROR!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:47'!
ERROR!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:44:47'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:47'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:47'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:44:50'!
ERROR!
!AccountSummary methodsFor: 'print summary' stamp: 'pau 5/31/2023 20:45:33' prior: 50632150!
printSummary
	| balance final_summary |
	account printSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string, ((Character numericValue: 10) asString)].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:45:41'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:43'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:45:46'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:46'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:46'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:46'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:46'!
FAILURE!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:45:46'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:46'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:46'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:45:52'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:46:06' prior: 50631428!
test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50'.

	summary := AccountSummary for: account. 
	self assert: (summary printSummary)equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:46:10' prior: 50631443!
test04AccountWithTransferenceInPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Transference from: (ReceptiveAccount new) transfer: 30 to: account.
	expectedSummary := 'Entrada por transferencia de 30.
Balance = 30'.

	summary := AccountSummary for: account. 
	self assert: (summary printSummary)equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:46:16' prior: 50631493!
test05AccountWithTransferenceOutPrintsSummaryCorrectly
	
	| account expectedSummary summary |
	
	account := ReceptiveAccount new.
	Transference from: account transfer: 30 to:  (ReceptiveAccount new).
	expectedSummary := 'Salida por transferencia de 30.
Balance = -30'.

	summary := AccountSummary for: account. 
	self assert: (summary printSummary)equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:46:23' prior: 50631519!
test07PortfolioWithOneAccountPrintsSummaryCorrectly
	
	| account portfolio expectedSummary summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	expectedSummary := 'Depósito por 100.
Balance = 100'.

	summary := AccountSummary for: portfolio . 
	self assert: (summary printSummary) equals: expectedSummary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'pau 5/31/2023 20:46:26' prior: 50631534!
test08PortfolioWithTwoAccountsPrintsSummaryCorrectly
	
	| account1 account2 portfolio expectedSummary summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account2.
	portfolio := Portfolio with: account1 with: account2.
	
	expectedSummary := 'Depósito por 100.
Extracción por 50.
Balance = 50'.

	summary := AccountSummary for: portfolio . 
	self assert: (summary printSummary) equals: expectedSummary.! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:46:29'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:29'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:29'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:29'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:29'!
FAILURE!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 20:46:29'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:29'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:29'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:39'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:41'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 20:46:41'!
FAILURE!

----SNAPSHOT----(31 May 2023 20:47:13) CuisUniversity-5799.image priorSource: 9587075!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 21:06:18'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 21:06:18'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:18'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:18'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:18'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:18'!
FAILURE!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 21:06:18'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:18'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:18'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:24'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:06:24'!
FAILURE!
!Deposit methodsFor: 'summary' stamp: 'pau 5/31/2023 21:07:06' prior: 50631747 overrides: 50628315!
addToSummary: aSummary
	aSummary addDepositToSummaryWith: self. 
	! !
!Withdraw methodsFor: 'summary' stamp: 'pau 5/31/2023 21:07:19' prior: 50631766 overrides: 50628315!
addToSummary: aSummary

	aSummary addWithdrawToSummaryWith: self.! !
!TransferenceIn methodsFor: 'summary' stamp: 'pau 5/31/2023 21:07:33' prior: 50631786 overrides: 50628462!
addToSummary: aSummary

	aSummary addTranferenceInToSummaryWith: self.
	
	! !
!TransferenceOut methodsFor: 'summary' stamp: 'pau 5/31/2023 21:07:43' prior: 50631792 overrides: 50628462!
addToSummary: aSummary

	aSummary addTranferenceOutToSummaryWith:self.! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:08:04'!
addDepositToSummaryWith: aDepositedValue

	summary add: 'Depósito por ', aDepositedValue asString, '.'.
	! !

!methodRemoval: AccountSummary #addDepositToSummaryFor: stamp: 'pau 5/31/2023 21:08:04'!
addDepositToSummaryFor: aDepositedValue

	summary add: 'Depósito por ', aDepositedValue asString, '.'.
	!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:08:17' prior: 50632461!
addDepositToSummaryWith: aDeposited

	summary add: 'Depósito por ', aDeposited asString, '.'.
	! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:08:26'!
addTranferenceInToSummaryWith: amountReceived

	summary add: 'Entrada por transferencia de ', amountReceived asString, '.'.! !

!methodRemoval: AccountSummary #addTranferenceInToSummaryFor: stamp: 'pau 5/31/2023 21:08:26'!
addTranferenceInToSummaryFor: amountReceived

	summary add: 'Entrada por transferencia de ', amountReceived asString, '.'.!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:08:41' prior: 50632480!
addTranferenceInToSummaryWith: transferIn

	summary add: 'Entrada por transferencia de ', transferIn asString, '.'.! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:08:48' prior: 50632474!
addDepositToSummaryWith: aDeposited

	summary add: 'Depósito por ', aDeposited value asString, '.'.
	! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:08:53' prior: 50632495!
addTranferenceInToSummaryWith: transferIn

	summary add: 'Entrada por transferencia de ', transferIn value asString, '.'.! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:09:02'!
addTranferenceOutToSummaryWith: amountSent

	summary add: 'Salida por transferencia de ', amountSent asString, '.'.! !

!methodRemoval: AccountSummary #addTranferenceOutToSummaryFor: stamp: 'pau 5/31/2023 21:09:02'!
addTranferenceOutToSummaryFor: amountSent

	summary add: 'Salida por transferencia de ', amountSent asString, '.'.!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:09:12' prior: 50632516!
addTranferenceOutToSummaryWith: aTransferenceOut

	summary add: 'Salida por transferencia de ', aTransferenceOut asString, '.'.! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:09:16' prior: 50632530!
addTranferenceOutToSummaryWith: aTransferenceOut

	summary add: 'Salida por transferencia de ', aTransferenceOut value asString, '.'.! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:09:26'!
addWithdrawToSummaryWith: aWithdrawedValue

	summary add: 'Extracción por ', aWithdrawedValue asString, '.'.
	! !

!methodRemoval: AccountSummary #addWithdrawToSummaryFor: stamp: 'pau 5/31/2023 21:09:26'!
addWithdrawToSummaryFor: aWithdrawedValue

	summary add: 'Extracción por ', aWithdrawedValue asString, '.'.
	!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:09:42' prior: 50632546!
addWithdrawToSummaryWith: aWithdraw

	summary add: 'Extracción por ', aWithdraw asString, '.'.
	! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:09:47' prior: 50632560!
addWithdrawToSummaryWith: aWithdraw

	summary add: 'Extracción por ', aWithdraw value asString, '.'.
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 21:10:19'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:21'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:24'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 21:10:27'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:27'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:27'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:27'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:27'!
FAILURE!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 5/31/2023 21:10:27'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:27'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:27'!
ERROR!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 21:10:30'!
FAILURE!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:11:07' prior: 50632509!
addTranferenceInToSummaryWith: transferIn

	summary add: 'Entrada por transferencia de ', transferIn asString, '.'.! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 5/31/2023 21:11:31' prior: 50632621!
addTranferenceInToSummaryWith: transferIn

	summary add: 'Entrada por transferencia de ', transferIn value asString, '.'.! !

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 22:39:12'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 22:39:18'!
FAILURE!

an AccountSummary!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 5/31/2023 23:19:51'!
FAILURE!

----QUIT----(31 May 2023 23:20:58) CuisUniversity-5799.image priorSource: 9623670!

----STARTUP---- (1 June 2023 09:59:10) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-summary/portfolio2/CuisUniversity-5799.image!

!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 6/1/2023 10:02:19' prior: 50632628!
addTranferenceInToSummaryWith: transferIn

	summary add: 'Entrada por transferencia de ', transferIn amountReceived asString, '.'.! !
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 6/1/2023 10:02:26' prior: 50632538!
addTranferenceOutToSummaryWith: aTransferenceOut

	summary add: 'Salida por transferencia de ', aTransferenceOut amountSent asString, '.'.! !

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:02:33'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:02:33'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:02:33'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:02:33'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:02:33'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:02:33'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:02:33'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:02:33'!
ERROR!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:02:33'!
ERROR!
!Portfolio methodsFor: 'summary' stamp: 'pau 6/1/2023 10:05:04' prior: 50631639!
printSummary: aSummary

	accounts do: [ :anAccount | anAccount addTransactionsToSummary: aSummary ].
	

	! !

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:05:12'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:05:12'!
PASSED!
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 6/1/2023 10:10:39'!
calculateTranferNet: aTranferNet

	transactions do: [:aTransaction | aTransaction addToTranferNet: aTranferNet]
	 "inject:0 into:[:tranferNet :aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [ tranferNet + aTransaction amountReceived ]
		ifFalse:[ tranferNet + aTransaction amountSent negated ].
		]."! !

!methodRemoval: ReceptiveAccount #calculateTranferNet stamp: 'pau 6/1/2023 10:10:43'!
calculateTranferNet

	^transactions inject:0 into:[:tranferNet :aTransaction | 
		(aTransaction isKindOf: TransferenceIn) ifTrue: [ tranferNet + aTransaction amountReceived ]
		ifFalse:[ tranferNet + aTransaction amountSent negated ].
		].!
!TransferNet methodsFor: 'tranfer net' stamp: 'pau 6/1/2023 10:11:07' prior: 50631269!
tranferNet
	account calculateTranferNet: self. 
	^tranferNet ! !
!Deposit methodsFor: 'nil' stamp: 'pau 6/1/2023 10:12:25'!
addToTranferNet: aTranferNet
	aTranferNet addDepositToTranferNet: self.! !
!Withdraw methodsFor: 'nil' stamp: 'pau 6/1/2023 10:12:47'!
addToTranferNet: aTranferNet
	aTranferNet addWithdrawToTranferNet: self.! !
!TransferenceIn methodsFor: 'nil' stamp: 'pau 6/1/2023 10:13:43'!
addToTranferNet: aTranferNet
	aTranferNet addWithdrawToTranferNet: self.! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:13:54' prior: 50632785!
addToTranferNet: aTranferNet
	aTranferNet addTranferInToTranferNet: self.! !
!TransferenceOut methodsFor: 'nil' stamp: 'pau 6/1/2023 10:14:10'!
addToTranferNet: aTranferNet
	aTranferNet addTranferOutToTranferNet: self.! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:14:21'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:14:21'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:14:21'!
ERROR!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:14:21'!
ERROR!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:14:21'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:14:21'!
ERROR!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:14:21'!
ERROR!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:14:25'!
ERROR!
!TransferNet methodsFor: 'tranfer net' stamp: 'pau 6/1/2023 10:14:35'!
addTranferInToTranferNet: aTransferenceIn 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'tranfer net' stamp: 'pau 6/1/2023 10:15:43' prior: 50632834!
addTranferInToTranferNet: aTransferenceIn 
	tranferNet := tranferNet + aTransferenceIn amountReceived . ! !
!TransferNet methodsFor: 'nil' stamp: 'pau 6/1/2023 10:16:06'!
addTranferOutToTranferNet: aTransferenceIn 
	tranferNet := tranferNet + aTransferenceIn amountSent. ! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:16:31'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:16:31'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:16:31'!
FAILURE!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:16:31'!
FAILURE!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:16:31'!
ERROR!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:16:31'!
ERROR!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:16:41'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:16:41'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:16:41'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:16:41'!
FAILURE!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:16:41'!
FAILURE!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:16:41'!
ERROR!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:16:41'!
ERROR!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:17:50'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:18:01' prior: 50632845!
addTranferOutToTranferNet: aTransferenceIn 
	tranferNet := tranferNet - aTransferenceIn amountSent. ! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:18:06'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:18:06'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:18:06'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:18:06'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:18:06'!
ERROR!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:18:06'!
ERROR!
!Portfolio methodsFor: 'transferNet' stamp: 'pau 6/1/2023 10:20:02'!
calculateTranferNet: aSummary
	
	accounts do:[:anAccount| anAccount calculateTranferNet: aSummary]
		"^accounts inject: 0 into: [:tranferNet :anAccount | tranferNet  + anAccount calculateTranferNet]."
! !

!methodRemoval: Portfolio #calculateTranferNet stamp: 'pau 6/1/2023 10:20:05'!
calculateTranferNet
	
	^accounts inject: 0 into: [:tranferNet :anAccount | tranferNet  + anAccount calculateTranferNet].
!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:20:12'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:20:12'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:20:12'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:20:12'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:20:12'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:20:12'!
PASSED!
!Portfolio methodsFor: 'transferNet' stamp: 'pau 6/1/2023 10:20:31' prior: 50632943!
calculateTranferNet: aSummary
	accounts do:[:anAccount| anAccount calculateTranferNet: aSummary]! !
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 6/1/2023 10:20:40' prior: 50632747!
calculateTranferNet: aTranferNet

	transactions do: [:aTransaction | aTransaction addToTranferNet: aTranferNet]
	! !
!AccountSummary methodsFor: 'print summary' stamp: 'pau 6/1/2023 10:21:31' prior: 50632214!
printSummary
	| balance final_summary |
	account addTransactionsToSummary: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string, ((Character numericValue: 10) asString)].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !

!methodRemoval: ReceptiveAccount #printSummary: stamp: 'pau 6/1/2023 10:21:40'!
printSummary: aSummary

	self addTransactionsToSummary: aSummary.!
!Portfolio methodsFor: 'summary' stamp: 'pau 6/1/2023 10:22:08'!
addTransactionsToSummary: aSummary

	accounts do: [ :anAccount | anAccount addTransactionsToSummary: aSummary ].
	

	! !

!methodRemoval: Portfolio #printSummary: stamp: 'pau 6/1/2023 10:22:08'!
printSummary: aSummary

	accounts do: [ :anAccount | anAccount addTransactionsToSummary: aSummary ].
	

	!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:22:25'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:22:25'!
PASSED!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 6/1/2023 10:33:54'!
addDepositTo: aDeposited

	summary add: 'Depósito por ', aDeposited value asString, '.'.
	! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:33:54' prior: 50632437 overrides: 50628315!
addToSummary: aSummary
	aSummary addDepositTo: self. 
	! !

!methodRemoval: AccountSummary #addDepositToSummaryWith: stamp: 'pau 6/1/2023 10:33:54'!
addDepositToSummaryWith: aDeposited

	summary add: 'Depósito por ', aDeposited value asString, '.'.
	!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 6/1/2023 10:34:07'!
addTranferenceInTo: transferIn

	summary add: 'Entrada por transferencia de ', transferIn amountReceived asString, '.'.! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:34:07' prior: 50632449 overrides: 50628462!
addToSummary: aSummary

	aSummary addTranferenceInTo: self.
	
	! !

!methodRemoval: AccountSummary #addTranferenceInToSummaryWith: stamp: 'pau 6/1/2023 10:34:07'!
addTranferenceInToSummaryWith: transferIn

	summary add: 'Entrada por transferencia de ', transferIn amountReceived asString, '.'.!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 6/1/2023 10:34:21'!
addTranferenceOutTo: aTransferenceOut

	summary add: 'Salida por transferencia de ', aTransferenceOut amountSent asString, '.'.! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:34:21' prior: 50632455 overrides: 50628462!
addToSummary: aSummary

	aSummary addTranferenceOutTo:self.! !

!methodRemoval: AccountSummary #addTranferenceOutToSummaryWith: stamp: 'pau 6/1/2023 10:34:21'!
addTranferenceOutToSummaryWith: aTransferenceOut

	summary add: 'Salida por transferencia de ', aTransferenceOut amountSent asString, '.'.!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 6/1/2023 10:34:35'!
addWithdrawTo: aWithdraw

	summary add: 'Extracción por ', aWithdraw value asString, '.'.
	! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:34:35' prior: 50632443 overrides: 50628315!
addToSummary: aSummary

	aSummary addWithdrawTo: self.! !

!methodRemoval: AccountSummary #addWithdrawToSummaryWith: stamp: 'pau 6/1/2023 10:34:35'!
addWithdrawToSummaryWith: aWithdraw

	summary add: 'Extracción por ', aWithdraw value asString, '.'.
	!
!TransferNet methodsFor: 'tranfer net' stamp: 'pau 6/1/2023 10:34:56'!
addTranferInTo: aTransferenceIn 
	tranferNet := tranferNet + aTransferenceIn amountReceived . ! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:34:56' prior: 50632791!
addToTranferNet: aTranferNet
	aTranferNet addTranferInTo: self.! !

!methodRemoval: TransferNet #addTranferInToTranferNet: stamp: 'pau 6/1/2023 10:34:56'!
addTranferInToTranferNet: aTransferenceIn 
	tranferNet := tranferNet + aTransferenceIn amountReceived . !
!TransferNet methodsFor: 'add tranference -private-' stamp: 'pau 6/1/2023 10:35:40'!
addTranferOutTo: aTransferenceIn 
	tranferNet := tranferNet - aTransferenceIn amountSent. ! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:35:40' prior: 50632796!
addToTranferNet: aTranferNet
	aTranferNet addTranferOutTo: self.! !

!methodRemoval: TransferNet #addTranferOutToTranferNet: stamp: 'pau 6/1/2023 10:35:40'!
addTranferOutToTranferNet: aTransferenceIn 
	tranferNet := tranferNet - aTransferenceIn amountSent. !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:35:44'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:35:44'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:35:44'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:35:44'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:35:44'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:35:44'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:35:48'!
PASSED!
!AccountTransaction methodsFor: 'summary' stamp: 'pau 6/1/2023 10:36:45'!
addTo: aSummaryCollection

	self subclassResponsibility ! !
!Deposit methodsFor: 'summary' stamp: 'pau 6/1/2023 10:36:45' overrides: 50633227!
addTo: aSummary
	aSummary addDepositTo: self. 
	! !
!Transference methodsFor: 'summary' stamp: 'pau 6/1/2023 10:36:45' overrides: 50633227!
addTo: aSummaryCollection

	self subclassResponsibility ! !
!TransferenceIn methodsFor: 'summary' stamp: 'pau 6/1/2023 10:36:45' overrides: 50633237!
addTo: aSummary

	aSummary addTranferenceInTo: self.
	
	! !
!TransferenceOut methodsFor: 'summary' stamp: 'pau 6/1/2023 10:36:45' overrides: 50633237!
addTo: aSummary

	aSummary addTranferenceOutTo:self.! !
!Withdraw methodsFor: 'summary' stamp: 'pau 6/1/2023 10:36:45' overrides: 50633227!
addTo: aSummary

	aSummary addWithdrawTo: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:36:45' prior: 50631805!
addTransactionsToSummary: aSummary

	transactions do:[:aTransaction| aTransaction addTo: aSummary]! !

!methodRemoval: AccountTransaction #addToSummary: stamp: 'pau 6/1/2023 10:36:45'!
addToSummary: aSummaryCollection

	self subclassResponsibility !

!methodRemoval: Deposit #addToSummary: stamp: 'pau 6/1/2023 10:36:45'!
addToSummary: aSummary
	aSummary addDepositTo: self. 
	!

!methodRemoval: Transference #addToSummary: stamp: 'pau 6/1/2023 10:36:45'!
addToSummary: aSummaryCollection

	self subclassResponsibility !

!methodRemoval: TransferenceIn #addToSummary: stamp: 'pau 6/1/2023 10:36:45'!
addToSummary: aSummary

	aSummary addTranferenceInTo: self.
	
	!

!methodRemoval: TransferenceOut #addToSummary: stamp: 'pau 6/1/2023 10:36:45'!
addToSummary: aSummary

	aSummary addTranferenceOutTo:self.!

!methodRemoval: Withdraw #addToSummary: stamp: 'pau 6/1/2023 10:36:45'!
addToSummary: aSummary

	aSummary addWithdrawTo: self.!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:37:22'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:37:22'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:37:22'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:37:22'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:37:22'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:37:22'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:37:22'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:37:22'!
PASSED!
!ReportGenerator methodsFor: 'nil' stamp: 'pau 6/1/2023 10:38:09'!
addDepositTo: aDeposited! !
!ReportGenerator methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:38:30'!
addWithdrawTo: aWithdraw
! !
!ReportGenerator methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:38:48'!
addTransferInTo: aTransferIn
! !
!ReportGenerator methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:38:53'!
addTransferOutTo: aTransferOut
! !
!ReceptiveAccount methodsFor: 'transfer net' stamp: 'pau 6/1/2023 10:39:41' prior: 50632991!
calculateTranferNet: aTranferNet

	transactions do: [:aTransaction | aTransaction addTo: aTranferNet]
	! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:40:32'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:40:35'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:40:35'!
ERROR!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:40:35'!
ERROR!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:40:35'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:40:35'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:40:35'!
ERROR!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:40:38'!
ERROR!
!TransferNet methodsFor: 'add tranference -private-' stamp: 'pau 6/1/2023 10:41:39'!
addTranferenceInTo: aTransferenceIn 
	tranferNet := tranferNet + aTransferenceIn amountReceived . ! !
!TransferenceIn methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:41:39' prior: 50633142!
addToTranferNet: aTranferNet
	aTranferNet addTranferenceInTo: self.! !

!methodRemoval: TransferNet #addTranferInTo: stamp: 'pau 6/1/2023 10:41:39'!
addTranferInTo: aTransferenceIn 
	tranferNet := tranferNet + aTransferenceIn amountReceived . !
!TransferNet methodsFor: 'add tranference -private-' stamp: 'pau 6/1/2023 10:41:54'!
addTranferenceOutTo: aTransferenceIn 
	tranferNet := tranferNet - aTransferenceIn amountSent. ! !
!TransferenceOut methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:41:54' prior: 50633160!
addToTranferNet: aTranferNet
	aTranferNet addTranferenceOutTo: self.! !

!methodRemoval: TransferNet #addTranferOutTo: stamp: 'pau 6/1/2023 10:41:54'!
addTranferOutTo: aTransferenceIn 
	tranferNet := tranferNet - aTransferenceIn amountSent. !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:41:58'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:41:58'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:41:58'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:41:58'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:41:58'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:41:58'!
PASSED!
!Portfolio methodsFor: 'summary' stamp: 'pau 6/1/2023 10:46:17'!
visitTransactions: aSummary

	accounts do: [ :anAccount | anAccount addTransactionsToSummary: aSummary ].
	

	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'pau 6/1/2023 10:46:17'!
visitTransactions: aSummary

	transactions do:[:aTransaction| aTransaction addTo: aSummary]! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:46:17' prior: 50632998!
printSummary
	| balance final_summary |
	account visitTransactions: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string, ((Character numericValue: 10) asString)].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:46:17' prior: 50633015!
addTransactionsToSummary: aSummary

	accounts do: [ :anAccount | anAccount visitTransactions: aSummary ].
	

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:46:17' prior: 50633462!
visitTransactions: aSummary

	accounts do: [ :anAccount | anAccount visitTransactions: aSummary ].
	

	! !

!methodRemoval: Portfolio #addTransactionsToSummary: stamp: 'pau 6/1/2023 10:46:17'!
addTransactionsToSummary: aSummary

	accounts do: [ :anAccount | anAccount visitTransactions: aSummary ].
	

	!

!methodRemoval: ReceptiveAccount #addTransactionsToSummary: stamp: 'pau 6/1/2023 10:46:17'!
addTransactionsToSummary: aSummary

	transactions do:[:aTransaction| aTransaction addTo: aSummary]!
!TransferNet methodsFor: 'tranfer net' stamp: 'pau 6/1/2023 10:46:43' prior: 50632771!
tranferNet
	account visitTransactions: self. 
	^tranferNet ! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:46:48'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:46:48'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:46:48'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:46:48'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:46:48'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:46:48'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:46:51'!
PASSED!

!methodRemoval: ReceptiveAccount #calculateTranferNet: stamp: 'pau 6/1/2023 10:47:01'!
calculateTranferNet: aTranferNet

	transactions do: [:aTransaction | aTransaction addTo: aTranferNet]
	!

!methodRemoval: Portfolio #calculateTranferNet: stamp: 'pau 6/1/2023 10:48:16'!
calculateTranferNet: aSummary
	accounts do:[:anAccount| anAccount calculateTranferNet: aSummary]!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 10:48:19'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:48:23'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:48:23'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:48:23'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:48:23'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:48:23'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:48:23'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 10:48:26'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 6/1/2023 10:48:26'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 10:48:26'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 10:48:26'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 10:48:26'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 6/1/2023 10:48:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 10:48:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 10:48:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 10:48:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 10:48:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 10:48:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 10:48:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 10:48:28'!
PASSED!

!methodRemoval: Deposit #addToTranferNet: stamp: 'pau 6/1/2023 10:49:22'!
addToTranferNet: aTranferNet
	aTranferNet addDepositToTranferNet: self.!

!methodRemoval: TransferenceIn #addToTranferNet: stamp: 'pau 6/1/2023 10:49:31'!
addToTranferNet: aTranferNet
	aTranferNet addTranferenceInTo: self.!

!methodRemoval: TransferenceOut #addToTranferNet: stamp: 'pau 6/1/2023 10:49:34'!
addToTranferNet: aTranferNet
	aTranferNet addTranferenceOutTo: self.!

!methodRemoval: Withdraw #addToTranferNet: stamp: 'pau 6/1/2023 10:49:38'!
addToTranferNet: aTranferNet
	aTranferNet addWithdrawToTranferNet: self.!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 10:49:41'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 10:49:41'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 10:49:41'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 10:49:41'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 10:49:41'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 10:49:41'!
PASSED!

ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortofolioStructure category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 10:54:26'!
ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 10:54:53'!
TestCase subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #PortfolioStructure as: #PortfolioStructureTest stamp: 'pau 6/1/2023 10:55:01'!
Smalltalk renameClassNamed: #PortfolioStructure as: #PortfolioStructureTest!
!PortfolioStructureTest methodsFor: 'nil' stamp: 'pau 6/1/2023 10:56:12'!
test01emptyPortfolioOnlyHasThatPortfolio
	
	! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:58:28' prior: 50633764!
test01emptyPortfolioOnlyHasThatPortfolio
	|portfolio porfolioName portfolioName portfolioStructure |
	
	portfolioName := 'Soy el portfolio solitario'. 
	portfolio:= Portfolio named: porfolioName.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. ! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 10:58:43' prior: 50633769!
test01emptyPortfolioOnlyHasThatPortfolio
	|portfolio porfolioName portfolioName portfolioStructure |
	
	portfolioName := 'Soy el portfolio solitario'. 
	
	portfolio:= Portfolio named: porfolioName.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. ! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 10:58:54'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 10:59:01'!
named: anUndefinedObject 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: anUndefinedObject ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 10:59:20' prior: 50633800!
named: aName
	^self new initializeNamed: aName! !

Portfolio class
	instanceVariableNames: 'name'!

Portfolio class
	instanceVariableNames: 'portfolioName'!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 11:00:09'!
Portfolio class
	instanceVariableNames: 'portfolioName'!

Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 11:00:16'!
Portfolio class
	instanceVariableNames: ''!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 11:00:23'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'pau 6/1/2023 11:01:35'!
initializeNamed

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'pau 6/1/2023 11:01:35'!
initializeNamed
	
	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:01:35' prior: 50622696 overrides: 16920235!
initialize
	
	super initializeNamed.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:01:35' prior: 50633846!
initializeNamed
	
	super initializeNamed.
	transactions := OrderedCollection new.! !

!methodRemoval: Portfolio #initialize stamp: 'pau 6/1/2023 11:01:35'!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.!

!methodRemoval: ReceptiveAccount #initialize stamp: 'pau 6/1/2023 11:01:35'!
initialize
	
	super initializeNamed.
	transactions := OrderedCollection new.!
!Portfolio methodsFor: 'initialization' stamp: 'pau 6/1/2023 11:02:12'!
initializeNamed: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName.	! !

!methodRemoval: Portfolio #initializeNamed stamp: 'pau 6/1/2023 11:02:15'!
initializeNamed

	accounts := OrderedCollection new.
	parents := OrderedCollection new.!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'pau 6/1/2023 11:03:07' overrides: 16920235!
initialize
	
	super initialize.
	transactions := OrderedCollection new.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:03:25'!
ERROR!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:03:36'!
ERROR!
!PortofolioStructure class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 11:03:41'!
with: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aPortfolio ! !
!PortofolioStructure class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 11:03:52' prior: 50633899!
with: aPortfolio 
	^self new initializeWith: aPortfolio ! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:03:54'!
ERROR!

!classDefinition: #PortofolioStructure category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 11:04:05'!
ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortofolioStructure methodsFor: 'initialize' stamp: 'pau 6/1/2023 11:04:05'!
initializeWith: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!PortofolioStructure methodsFor: 'initialize' stamp: 'pau 6/1/2023 11:04:10' prior: 50633925!
initializeWith: aPortfolio 
	portfolio := aPortfolio.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:04:16'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:04:31'!
portfolioStructure
	self shouldBeImplemented.! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:04:41' prior: 50633940!
portfolioStructure
	^''! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:04:43'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:05:00' prior: 50633945!
portfolioStructure
	^portfolio name! !
!Portfolio methodsFor: 'nil' stamp: 'pau 6/1/2023 11:05:23' overrides: 16903442!
name
	^name! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:06:12'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:06:12'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:08:13'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:08:13'!
FAILURE!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:08:51' prior: 50633783!
test01emptyPortfolioOnlyHasThatPortfolio
	|portfolio portfolioName portfolioStructure |
	
	portfolioName := 'Soy el portfolio solitario'. 
	
	portfolio:= Portfolio named: portfolioName .
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. ! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:08:53'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:08:53'!
PASSED!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:09:53'!
test01emptyPortfolioOnlyHasTheNameOfThatPortfolio
	|portfolio portfolioName portfolioStructure |
	
	portfolioName := 'Soy el portfolio solitario'. 
	
	portfolio:= Portfolio named: portfolioName .
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. ! !

!methodRemoval: PortfolioStructureTest #test01emptyPortfolioOnlyHasThatPortfolio stamp: 'pau 6/1/2023 11:09:53'!
test01emptyPortfolioOnlyHasThatPortfolio
	|portfolio portfolioName portfolioStructure |
	
	portfolioName := 'Soy el portfolio solitario'. 
	
	portfolio:= Portfolio named: portfolioName .
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:19:06'!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioName portfolioStructure account |
	
	portfolioName := 'Portfolio de la familia'. 
	
	portfolio:= Portfolio named: portfolioName.
	account := ReceptiveAccount named: 'Cuenta de homero'.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. ! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:20:05' prior: 50634025!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioName portfolioStructure account |
	
	portfolioName := 'Portfolio de la familia'. 
	account := ReceptiveAccount named: 'Cuenta de homero'.
	
	portfolio:= Portfolio named: portfolioName with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 

	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. ! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:21:46' prior: 50634041!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioStructure account expectedPortfolioStructure |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
	'Portfolio de la familia
		Cuenta de Homero'.

	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure . ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:22:54'!
named: aName with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 11:23:41' prior: 50634076!
named: aName with: anAccount

	^self new 
		add: anAccount;
		initializeNamed: aName; 
		yourself! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:29:02'!
ERROR!
!ReceptiveAccount class methodsFor: 'nil' stamp: 'pau 6/1/2023 11:30:19'!
named: aName
	! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 11:31:12'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'pau 6/1/2023 11:32:47'!
initializeNamed: aName
	
	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !

!methodRemoval: ReceptiveAccount #initializeNamed stamp: 'pau 6/1/2023 11:32:55'!
initializeNamed
	
	super initializeNamed.
	transactions := OrderedCollection new.!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 11:33:42' prior: 50634058!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioStructure account expectedPortfolioStructure |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
	'Portfolio de la familia
		Cuenta de Homero'.

	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:34:10'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:34:29'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:34:39'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 11:36:05' prior: 50634082!
named: aName with: anAccount

	^self new 
		add: anAccount;
		initializeNamed: aName! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:36:20'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:36:20'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:36:20'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:36:20'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:36:37'!
ERROR!

portfolioStructure portfolioStructure!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:37:51'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:37:51'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:37:51'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:37:51'!
ERROR!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:37:55'!
PASSED!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 11:38:30' prior: 50634092!
named: aName
	^self new initializeNamed: aName ! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:38:49'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:39:10'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:39:32'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 11:40:26' prior: 50634151!
named: aName with: anAccount

	^self new;
		initializeNamed: aName;
		add: anAccount
		! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:40:33'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:41:04'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 11:41:40' prior: 50634214!
named: aName with: anAccount

	^self new initializeNamed: aName ;add: anAccount
		! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:41:51'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:42:41' prior: 50633953!
portfolioStructure
	^portfolio name! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:43:53' prior: 50634238!
portfolioStructure
	
	| newLine |
	newLine :=(Character numericValue: 10) asString.
	
	^portfolio name, newLine, portfolio addTo: self! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:44:06' prior: 50634243!
portfolioStructure
	
	| newLine |
	
	newLine :=(Character numericValue: 10) asString.
	
	^portfolio name, newLine, portfolio addTo: self! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:45:00' prior: 50634251!
portfolioStructure
	
	| newLine |
	
	newLine :=(Character numericValue: 10) asString.
	
	^portfolio name, newLine, portfolio visitNames: self! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 11:45:43'!
visitNames: aVisitor
	! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 11:46:24' prior: 50634266!
visitNames: aVisitor
	accounts do: [:anAccount| anAccount visitNames: aVisitor]! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 11:47:30' prior: 50634270!
visitNames: aVisitor
	accounts do: [:anAccount| aVisitor addNameTo: (anAccount name)]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'pau 6/1/2023 11:47:53' overrides: 16903442!
name
	^name! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:48:58'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:49:19' prior: 50634259!
portfolioStructure
	
	| newLine |
	
	newLine :=(Character numericValue: 10) asString.
	
	^portfolio name, newLine, (portfolio visitNames: self)! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:49:22'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:49:29'!
addNameTo: aRenameMe1 
	self shouldBeImplemented.! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:49:39' prior: 50634302!
addNameTo: aAccount
	self shouldBeImplemented.! !

!classDefinition: #PortofolioStructure category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 11:50:32'!
ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: 'portfolio portfolioStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortofolioStructure methodsFor: 'initialize' stamp: 'pau 6/1/2023 11:50:31' prior: 50633931!
initializeWith: aPortfolio 
	portfolio := aPortfolio.
	portfolioStructure:=''.! !
!PortofolioStructure methodsFor: 'initialize' stamp: 'pau 6/1/2023 11:50:33' prior: 50634321!
initializeWith: aPortfolio 
	portfolio := aPortfolio.
	portfolioStructure:=''.
	! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:50:57' prior: 50634290!
portfolioStructure
	
	
	! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:51:21' prior: 50634333!
portfolioStructure
	
	| newLine |
	
	newLine :=(Character numericValue: 10) asString.
	^portfolio name, newLine, (portfolio visitNames: self)
	! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:51:46' prior: 50634307!
addNameTo: anAccount
	anAccount name! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:51:55' prior: 50634338!
portfolioStructure
	
	| newLine |
	
	newLine :=(Character numericValue: 10) asString.
	^portfolio name, newLine, (portfolio visitNames: self)
	! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:52:12' prior: 50634346!
addNameTo: anAccount
	^'	',anAccount name! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:52:13'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:52:13'!
ERROR!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:52:24'!
ERROR!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 11:52:43'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 11:52:53'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 11:53:11' prior: 50634359!
addNameTo: anAccount
	^'	' , (anAccount name asString)! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:00:52'!
ERROR!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 12:01:25' prior: 50634276!
visitNames: aVisitor
	accounts ifEmpty: [^''].
	accounts do: [:anAccount| aVisitor addNameTo: (anAccount name)] ! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:01:29'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:01:29'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:03:08' prior: 50634351!
portfolioStructure
	
	| newLine |
	
	newLine :=(Character numericValue: 10) asString.
	 (portfolio visitNames: self) isEmpty ifTrue: [^portfolio name]. 
	
	^ newLine! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:03:24' prior: 50634407!
portfolioStructure
	
	| newLine |
	
	newLine :=(Character numericValue: 10) asString.
	 (portfolio visitNames: self) isEmpty ifTrue: [^portfolio name]. 
	
	^portfolio name, newLine, (portfolio visitNames: self)! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:03:29'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:03:29'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:03:29'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:03:29'!
ERROR!

(portfolio visitNames: self)!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:05:05'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:05:07'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:05:07'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:05:07'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:05:07'!
ERROR!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:05:12'!
PASSED!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:06:31' prior: 50634383!
addNameTo: anAccount
	^'	' , (anAccount name)! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:07:21' prior: 50634466!
addNameTo: anAccount
	^portfolioStructure ,
	'	', (anAccount name)! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:07:28'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:08:39' prior: 50634416!
portfolioStructure
	
	| newLine |
	portfolio visitNames: self. 
	
	newLine :=(Character numericValue: 10) asString.
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	^portfolio name, newLine, (portfolioStructure )! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 12:08:51' prior: 50634392!
visitNames: aVisitor
	accounts do: [:anAccount| aVisitor addNameTo: (anAccount name)] ! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:08:55'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:08:55'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:08:55'!
FAILURE!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:08:55'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:09:09'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:09:13'!
FAILURE!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:09:13'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:10:11' prior: 50634471!
addNameTo: anAccount
	portfolioStructure := portfolioStructure,
	'	', (anAccount name)! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:10:14'!
FAILURE!

anAccount name!
!PortofolioStructure methodsFor: 'initialize' stamp: 'pau 6/1/2023 12:13:19' prior: 50634327!
initializeWith: aPortfolio 
	portfolio := aPortfolio.
	portfolioStructure:= OrderedCollection new.
	! !

a := Character numericValue: 10.!

a := Character numericValue: 12.!

a := Character numericValue: 13.!

a := Character numericValue: 10.!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:14:24' prior: 50634525!
addNameTo: anAccount
	portfolioStructure add: ((Character numericValue: 10 asString), (anAccount name))! !

a := Character numericValue: 12. $!

a := Character numericValue: 12. !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:16:43' prior: 50634481!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	portfolio visitNames: self. 
	
	newLine :=(Character numericValue: 10) asString.
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , string].
	^portfolio name, newLine, (portfolioStructure )! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:16:55' prior: 50634556!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	portfolio visitNames: self. 
	
	newLine :=(Character numericValue: 10) asString.
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , string].
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:17:03' prior: 50634571!
portfolioStructure
	
	| finalPortfolioStructure|
	portfolio visitNames: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , string].
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:17:13' prior: 50634547!
addNameTo: anAccount
	portfolioStructure add: ((Character numericValue: 12 asString), (anAccount name))! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:17:33' prior: 50634586!
portfolioStructure
	
	| finalPortfolioStructure|
	portfolio visitNames: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | | newLine | finalStructure , newLine, string].
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:18:05' prior: 50634606!
portfolioStructure
	
	| finalPortfolioStructure newLine|
	portfolio visitNames: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= Character numericValue: 10. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , newLine, string].
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:18:10'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:18:10'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:18:10'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:18:10'!
ERROR!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:18:29'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:18:29'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:18:29'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:18:29'!
ERROR!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:19:19'!
PASSED!

Character numericValue: 12 asString!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:19:53'!
ERROR!

Character numericValue: 12 asString!

(Character numericValue: 12) asString!

(Character numericValue: 12) asString!

(Character numericValue: 13) asString !

(Character numericValue: 14) asString !

(Character numericValue: 17) asString !

 '' !

'	' asCharacterSet !

(Character numericValue: 9) asString!

(Character numericValue: 10) asString !

(Character numericValue: 8) asString!

(Character numericValue: 12) asString!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:21:48' prior: 50634599!
addNameTo: anAccount
	portfolioStructure add: ( (Character numericValue: 12) asString, (anAccount name))! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:21:56'!
ERROR!

'Cuenta de Homero', '   '!

----SNAPSHOT----(1 June 2023 12:24:09) CuisUniversity-5799.image priorSource: 9631888!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:24:30'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:24:49' prior: 50634620!
portfolioStructure
	
	| finalPortfolioStructure newLine|
	portfolio visitNames: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= Character numericValue: 10 asString. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , newLine, string].
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:24:54'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:25:17' prior: 50634706!
portfolioStructure
	
	| finalPortfolioStructure newLine|
	portfolio visitNames: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , newLine, string].
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:25:28'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:26:04' prior: 50634688!
addNameTo: anAccount
	portfolioStructure add: ( '    ', (anAccount name))! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:26:09'!
FAILURE!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:27:03'!
FAILURE!

----SNAPSHOT----(1 June 2023 12:28:12) CuisUniversity-5799.image priorSource: 9697537!

----QUIT----(1 June 2023 12:28:24) CuisUniversity-5799.image priorSource: 9699396!

----STARTUP---- (1 June 2023 12:47:33) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-summary/portfolio2/CuisUniversity-5799.image!


'sakjska', 'asajshaj'!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 12:50:08' prior: 50634491!
visitNames: aVisitor
	accounts do: [:anAccount| aVisitor addNameTo: anAccount] ! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:50:27'!
FAILURE!

Character numericValue: 32!

a:= Character numericValue: 32.!

a asString!

a:= Character numericValue: 9.!

a asString !

a:= Character numericValue: 32.!

a asString !

a:= Character numericValue: 9.!

a asString!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:54:15' prior: 50634744!
addNameTo: anAccount
	portfolioStructure add: ( (Character numericValue: 9), (anAccount name))! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:54:27'!
ERROR!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:54:27'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:54:37' prior: 50634785!
addNameTo: anAccount
	portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:54:41'!
FAILURE!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 12:55:14' prior: 50634121!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioStructure account expectedPortfolioStructure |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero'.

	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:55:15'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 12:55:15'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:55:15'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 12:55:31' prior: 50634810!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioStructure account expectedPortfolioStructure |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero'.

	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 12:57:26'!
visit: aSummary

	accounts do: [ :anAccount | anAccount visitTransactions: aSummary ].
	

	! !
!ReceptiveAccount methodsFor: 'visitors' stamp: 'pau 6/1/2023 12:57:26'!
visit: aSummary

	transactions do:[:aTransaction| aTransaction addTo: aSummary]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 12:57:27' prior: 50633495!
visitTransactions: aSummary

	accounts do: [ :anAccount | anAccount visit: aSummary ].
	

	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 12:57:27' prior: 50633475!
printSummary
	| balance final_summary |
	account visit: self. 
	
	final_summary := summary inject: '' into: [:finalSummary :string | finalSummary,string, ((Character numericValue: 10) asString)].
	
	balance := ('Balance = ', account balance asString) asString.
	
	^final_summary,balance! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 12:57:27' prior: 50633514!
tranferNet
	account visit: self. 
	^tranferNet ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 12:57:27' prior: 50634858!
visit: aSummary

	accounts do: [ :anAccount | anAccount visit: aSummary ].
	

	! !

!methodRemoval: Portfolio #visitTransactions: stamp: 'pau 6/1/2023 12:57:27'!
visitTransactions: aSummary

	accounts do: [ :anAccount | anAccount visit: aSummary ].
	

	!

!methodRemoval: ReceptiveAccount #visitTransactions: stamp: 'pau 6/1/2023 12:57:27'!
visitTransactions: aSummary

	transactions do:[:aTransaction| aTransaction addTo: aSummary]!

!methodRemoval: Portfolio #visitNames: stamp: 'pau 6/1/2023 12:57:51'!
visitNames: aVisitor
	accounts do: [:anAccount| aVisitor addNameTo: anAccount] !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:58:05' prior: 50634725!
portfolioStructure
	
	| finalPortfolioStructure newLine|
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , newLine, string].
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 12:58:22'!
addTo: anAccount
	portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))! !

!methodRemoval: PortofolioStructure #addNameTo: stamp: 'pau 6/1/2023 12:58:22'!
addNameTo: anAccount
	portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 12:58:50'!
FAILURE!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:00:06' prior: 50634895!
visit: aSummary

	accounts do: [ :anAccount | anAccount visit: aSummary ].
	

	! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:00:13' prior: 50634948!
visit: aVisitor

	accounts do: [ :anAccount | anAccount visit: aVisitor ].
	

	! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:01:09' prior: 50634954!
visit: aVisitor
	
	(aVisitor isKindOf: PortofolioStructure) ifTrue: [accounts do: [ :anAccount | anAccount visit: aVisitor ].]
	ifFalse:[accounts do: [ :anAccount | anAccount visit: aVisitor ].]
	
	
	

	! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:01:28' prior: 50634960!
visit: aVisitor
	
	(aVisitor isKindOf: PortofolioStructure) ifTrue: [accounts do: [ :anAccount | aVisitor addTo: anAccount].]
	ifFalse:[accounts do: [ :anAccount | anAccount visit: aVisitor ].]
	
	
	

	! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:01:40'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:01:40'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:01:40'!
PASSED!
!TransferNet methodsFor: 'add tranference -private-' stamp: 'pau 6/1/2023 13:10:59' prior: 50633420!
addTranferenceOutTo: aTransferenceOut 
	tranferNet := tranferNet - aTransferenceOut amountSent. ! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:17:22'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:17:22'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:17:22'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:17:41' prior: 50634840!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioStructure account expectedPortfolioStructure |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:17:41'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:17:41'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:17:41'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:21:19'!
test03
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:21:33' prior: 50635040!
test03
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio add: account2.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:21:47' prior: 50635059!
test03
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio add: account2.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:21:56' prior: 50635079!
test03
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio add: account2.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test03 stamp: 'pau 6/1/2023 13:21:58'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:21:58'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:21:58'!
PASSED!

!testRun: #PortfolioStructureTest #test03 stamp: 'pau 6/1/2023 13:21:58'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:23:17'!
test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio add: account2.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!methodRemoval: PortfolioStructureTest #test03 stamp: 'pau 6/1/2023 13:23:21'!
test03
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio add: account2.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. !

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 13:23:23'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:23:49'!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio add: account2.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:24:46' prior: 50635178!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure account expectedPortfolioStructure emptyPortfolio |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	emptyPortfolio:= Portfolio named: 'Portfolio de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:25:06' prior: 50635201!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure account expectedPortfolioStructure emptyPortfolio |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	emptyPortfolio:= Portfolio named: 'Portfolio de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio  add: emptyPortfolio . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:25:20' prior: 50635223!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure account expectedPortfolioStructure emptyPortfolio |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	emptyPortfolio:= Portfolio named: 'Portfolio de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio  add: emptyPortfolio . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:25:21'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:25:21'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:25:21'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 13:25:21'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:25:21'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:26:24' prior: 50635246!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure account expectedPortfolioStructure emptyPortfolio accountMarge |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	emptyPortfolio:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio  add: emptyPortfolio . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:26:31' prior: 50635291!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure emptyPortfolio accountMarge |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	emptyPortfolio:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: emptyPortfolio . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:27:02' prior: 50635317!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 13:27:20' prior: 50635344!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:27:21'!
FAILURE!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:28:11' prior: 50634970!
visit: aVisitor
	accounts do: [ :anAccount | anAccount visit: aVisitor ]
	"(aVisitor isKindOf: PortofolioStructure) ifTrue: [accounts do: [ :anAccount | aVisitor addTo: anAccount].]
	ifFalse:[.]"
	
	
	

	! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:28:25' prior: 50635403!
visit: aVisitor
	accounts do: [ :anAccount | anAccount visit: aVisitor]
	"(aVisitor isKindOf: PortofolioStructure) ifTrue: [accounts do: [ :anAccount | aVisitor addTo: anAccount].]
	ifFalse:[.]"
	
	
	

	! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:28:35'!
FAILURE!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:30:32' prior: 50635413!
visit: aVisitor
	accounts do: [ :anAccount | anAccount visit: aVisitor].
	"(aVisitor isKindOf: PortofolioStructure) ifTrue: [accounts do: [ :anAccount | aVisitor addTo: anAccount].]
	ifFalse:[.]"
	
	
	

	! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 13:32:20' prior: 50634932!
addTo: anAccount
	(anAccount isKindOf: Portfolio) ifTrue: [anAccount visit: self]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:32:27'!
FAILURE!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 13:35:22' prior: 50635427!
visit: aVisitor
	
	(aVisitor isKindOf: PortofolioStructure) ifTrue: [accounts do: [ :anAccount | aVisitor addTo: anAccount].]
	ifFalse:[	accounts do: [ :anAccount | anAccount visit: aVisitor].]
	
	
	

	! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:35:58'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 13:37:15' prior: 50635437!
addTo: anAccount
	(anAccount isKindOf: Portfolio) ifTrue: 
	[portfolioStructure add:(anAccount name). 
		anAccount visit: self]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 13:40:36' prior: 50635466!
addTo: anAccount
	(anAccount isKindOf: Portfolio) ifTrue: 
	[|portfolioStructureSubPortfolio|
	portfolioStructure add:(anAccount name). 
	portfolioStructureSubPortfolio := PortofolioStructure with: anAccount]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 13:42:49' prior: 50635477!
addTo: anAccount
	(anAccount isKindOf: Portfolio) ifTrue: 
	[|portfolioStructureSubPortfolio|
	portfolioStructureSubPortfolio := PortofolioStructure with: anAccount.
	portfolioStructure add: portfolioStructureSubPortfolio ]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:42:52'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:42:52'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 13:42:52'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:42:52'!
ERROR!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:42:52'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 13:43:35' prior: 50634917!
portfolioStructure
	
	| finalPortfolioStructure newLine|
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , newLine, string].
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 13:43:58' prior: 50635490!
addTo: anAccount
	(anAccount isKindOf: Portfolio) ifTrue: 
	[|portfolioStructureSubPortfolio|
	portfolioStructureSubPortfolio := PortofolioStructure with: anAccount.
	portfolioStructure add: (portfolioStructureSubPortfolio portfolioStructure)]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:44:04'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:44:04'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 13:44:04'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:44:04'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:44:04'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 13:44:20'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 13:44:20'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 13:44:20'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:44:20'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 13:44:20'!
FAILURE!

o := OrderedCollection new. !

'Port 
	Port' collect: [:something| o add: something ].!

o!

a:= 'Port
Port'. !

a findString: (Character numericValue: 10) startingAt: 0.!

oracion := 'holaa a a a assa' collect: [:l | (l = $a) ifTrue: [$b]
                             ifFalse:[l]].!

oracion := 'holaa a a a assa' collect: [:l | (l = $a) ifTrue: ['aha']
                             ifFalse:[l]]. !

oracion asString !

'asa' asArray!

oracion := 'holaa a a a assa' collect: [:l | (l = $a) ifTrue: ['aha' asArray]
                             ifFalse:[l]].  
!

a findString: (Character numericValue: 10) startingAt: 0.!

a findString: (Character numericValue: 10 asString) startingAt: 0.!

a findString: ((Character numericValue: 10) asString) startingAt: 0.!

oracion := 'holaa a a a assa' do: [:l | (l = $a) ifTrue: ['aha' asArray]
                             ifFalse:[l]].  !

oracion := 'holaa a a a assa'. !

a findString: ((Character numericValue: 10) asString) startingAt: 0.!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:02:13' prior: 50635541!
addTo: anAccount
	(anAccount isKindOf: Portfolio) ifTrue: 
	[|portfolioStructureSubPortfolio|
	portfolioStructureSubPortfolio := PortofolioStructure with: anAccount.
	portfolioStructure add: (portfolioStructureSubPortfolio)]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !

oracion := String new.!

'holaa a a a assa' do: [:l | (l = $a) ifTrue: [oracion := oracion, 'AA'.]
                             ifFalse:[oracion:= oracion, l asString]]. !

oracion!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:05:22' prior: 50635526!
portfolioStructure
	
	| finalPortfolioStructure newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	"finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , newLine, string]."
	res := String new. 
	finalPortfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: []]
	
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:08:28' prior: 50635650!
portfolioStructure
	
	| finalPortfolioStructure newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	"finalPortfolioStructure := portfolioStructure inject: '' into: [:finalStructure :string | finalStructure , newLine, string]."
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [ | portStructure |
			portStructure := string portfolioStructure. 
			portStructure do: [:char | (char = Character numericValue: 10) 
								ifTrue: [portStructure := portStructure, ((Character numericValue: 9) asString).]
                             										ifFalse:[portStructure := portStructure,char asString]]. 
			 ]]
	
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:11:00' prior: 50635669!
portfolioStructure
	
	| finalPortfolioStructure newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							string portfolioStructure  do: [:char | (char = Character numericValue: 10) 
												ifTrue: [res := res, ((Character numericValue: 9) asString).]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, string]].
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:11:13' prior: 50635698!
portfolioStructure
	
	| newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							string portfolioStructure  do: [:char | (char = Character numericValue: 10) 
												ifTrue: [res := res, ((Character numericValue: 9) asString).]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, string]].
	
	^portfolio name, res! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:11:33'!
ERROR!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:12:44' prior: 50635721!
portfolioStructure
	
	| newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							string portfolioStructure  do: [:char | (char = Character numericValue: 10) 
												ifTrue: [res := res, newLine, (Character numericValue: 9) asString.]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, string]].
	
	^portfolio name, res! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:12:48'!
ERROR!

Character numericValue: 10!

Character numericValue: 10!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:13:41' prior: 50635748!
portfolioStructure
	
	| newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							string portfolioStructure  do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [res := res, newLine, (Character numericValue: 9) asString.]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, string]].
	
	^portfolio name, res! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:13:50'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:14:33' prior: 50635777!
portfolioStructure
	
	| newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							string portfolioStructure  do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [res := res, newLine, (Character numericValue: 9) asString.]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, newLine,string]].
	
	^portfolio name, res! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:14:38'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:15:17' prior: 50635804!
portfolioStructure
	
	| newLine res |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							res := res,newLine.
							string portfolioStructure  do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [res := res, newLine, (Character numericValue: 9) asString.]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, newLine,string]].
	
	^portfolio name, res! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:15:22'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:16:36' prior: 50635831!
portfolioStructure
	
	| newLine res tab |
	portfolio visit: self. 
	 (portfolioStructure ) isEmpty ifTrue: [^portfolio name]. 
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							res := res,newLine, tab.
							string portfolioStructure  do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [res := res, newLine,tab.]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, newLine,string]].
	
	^portfolio name, res! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:16:44'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 14:16:44'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 14:16:44'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 14:16:44'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:16:44'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 14:17:40'!
test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 14:19:04' prior: 50635904!
test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge accountLisa1 accountLisa2 portfolioLisa |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	accountLisa1 := ReceptiveAccount named: 'Cuenta de Lisa'.
	accountLisa2 := ReceptiveAccount named: 'Cuenta de Lisa para la universidad'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	portfolioLisa:= Portfolio named: 'Portfolio de Lisa' with: accountLisa1.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 14:20:08' prior: 50635931!
test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge accountLisa1 accountLisa2 portfolioLisa |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	accountLisa1 := ReceptiveAccount named: 'Cuenta de Lisa'.
	accountLisa2 := ReceptiveAccount named: 'Cuenta de Lisa para la universidad'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	
	portfolioLisa:= Portfolio named: 'Portfolio de Lisa' with: accountLisa1.
	portfolioLisa add: accountLisa2. 
	portfolioMarge add: portfolioLisa. 
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 14:20:09'!
FAILURE!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 14:21:05' prior: 50635966!
test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge accountLisa1 accountLisa2 portfolioLisa |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	accountLisa1 := ReceptiveAccount named: 'Cuenta de Lisa'.
	accountLisa2 := ReceptiveAccount named: 'Cuenta de Lisa para la universidad'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	
	portfolioLisa:= Portfolio named: 'Portfolio de Lisa' with: accountLisa1.
	portfolioLisa add: accountLisa2. 
	portfolioMarge add: portfolioLisa. 
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge
		Portfolio de Lisa
			Cuenta de Lisa
			Cuenta de Lisa para la universidad'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 14:21:06'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 14:21:06'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 14:21:06'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 14:21:06'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:21:06'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 14:21:06'!
PASSED!
!AccountSummary methodsFor: 'log transactions -private' stamp: 'pau 6/1/2023 14:26:33'!
addTo: anAccount

	anAccount visit: self.
	! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 14:27:01' prior: 50635451!
visit: aVisitor
	
	accounts do: [ :anAccount | aVisitor addTo: anAccount]
	
	
	

	! !
!TransferNet methodsFor: 'nil' stamp: 'pau 6/1/2023 14:27:23'!
addTo: anAccount
	anAccount visit: self! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 14:27:34'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 14:27:34'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 14:27:34'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 14:27:34'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:27:34'!
ERROR!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 14:27:34'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:27:39'!
ERROR!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 14:27:01' prior: 50636077!
visit: aVisitor
	
	accounts do: [ :anAccount | aVisitor addTo: anAccount]
	
	
	

	! !

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 14:28:55'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 14:28:55'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 14:28:55'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 14:28:55'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:28:55'!
ERROR!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 14:28:55'!
ERROR!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:28:57'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'pau 6/1/2023 14:29:48' overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:29:55'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 14:29:55'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 14:29:55'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 14:29:55'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 14:29:55'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:29:55'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 14:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:00'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 14:30:06'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 6/1/2023 14:30:06'!
PASSED!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:30:46' prior: 50635630!
addTo: anAccount

	(anAccount isKindOf: Portfolio) ifTrue: 
	[|portfolioStructureSubPortfolio|
	portfolioStructureSubPortfolio := PortofolioStructure with: anAccount.
	portfolioStructure add: (portfolioStructureSubPortfolio)]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 14:33:08'!
addTo: aVisitor
	
	aVisitor addPortfolio: self. ! !
!ReceptiveAccount methodsFor: 'visitors' stamp: 'pau 6/1/2023 14:33:35'!
addTo: aVisitor
	aVisitor addAccount: self.! !
!PortofolioStructure methodsFor: 'nil' stamp: 'pau 6/1/2023 14:33:53'!
addAccount: anAccount 
! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 14:34:01'!
addPortfolio: aPortfolio! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:34:18' prior: 50636397!
addTo: anAccount

	(anAccount isKindOf: Portfolio) ifTrue: 
	[]
			ifFalse:[portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))]
	
	! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 14:34:38' prior: 50636422!
addPortfolio: aPortfolio
	|portfolioStructureSubPortfolio|
	
	portfolioStructureSubPortfolio := PortofolioStructure with: aPortfolio.
	portfolioStructure add: (portfolioStructureSubPortfolio)! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:34:51' prior: 50636427!
addTo: anAccount

	! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 14:35:02' prior: 50636418!
addAccount: anAccount 
	portfolioStructure add: ( (Character numericValue: 9) asString , (anAccount name))! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:35:37' prior: 50636446!
addTo: anAccount

	anAccount addTo: self. ! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 14:36:11'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 6/1/2023 14:36:11'!
PASSED!
!Portfolio methodsFor: 'visitors' stamp: 'pau 6/1/2023 14:37:20' prior: 50636410!
addTo: aVisitor
	
	aVisitor addPortfolio: self. ! !

'algo', (String new)!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:38:44' prior: 50635859!
portfolioStructure
	
	| newLine res tab |
	portfolio visit: self. 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	res := String new. 
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [
							res := res,newLine, tab.
							string portfolioStructure  do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [res := res, newLine,tab.]
				                             										ifFalse:[res := res,char asString]]. ]
							ifFalse:[res := res, newLine,string]].
	
	^portfolio name, res! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 14:38:50'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 6/1/2023 14:38:50'!
PASSED!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:40:10' prior: 50636650!
portfolioStructure
	
	| newLine finalPortfolioStructure tab |
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [ ]
							ifFalse:[finalPortfolioStructure := finalPortfolioStructure, newLine,string]].
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'nil' stamp: 'pau 6/1/2023 14:42:31'!
addTabsToPortolioStructure: aPorfolioStructure
	|finalPortfolioStructure tab newLine string| 
	
	finalPortfolioStructure := finalPortfolioStructure,newLine, tab.
	string portfolioStructure  do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [finalPortfolioStructure := finalPortfolioStructure, newLine,tab.]
				                             										ifFalse:[finalPortfolioStructure := finalPortfolioStructure,char asString]].! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:43:01' prior: 50636854!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	
	portfolioStructure do: [:string| (string isKindOf: PortofolioStructure) ifTrue: [ ]
							ifFalse:[finalPortfolioStructure := finalPortfolioStructure, newLine,string]].
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 14:49:11' prior: 50636871!
addTabsToPortolioStructure: aPorfolioStructure
	|finalPortfolioStructure tab newLine string| 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	finalPortfolioStructure := aPorfolioStructure,newLine, tab.
	string portfolioStructure do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [finalPortfolioStructure := finalPortfolioStructure, newLine,tab.]
				                             										ifFalse:[finalPortfolioStructure := finalPortfolioStructure,char asString]].! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 14:49:26' prior: 50636905!
addTabsToPortolioStructure: aPorfolioStructure
	|finalPortfolioStructure tab newLine string| 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	finalPortfolioStructure := aPorfolioStructure,newLine, tab.
	portfolioStructure do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [finalPortfolioStructure := finalPortfolioStructure, newLine,tab.]
				                             										ifFalse:[finalPortfolioStructure := finalPortfolioStructure,char asString]].! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 14:49:38' prior: 50636926!
addTabsToPortolioStructure: aPorfolioStructure
	|finalPortfolioStructure tab newLine| 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	finalPortfolioStructure := aPorfolioStructure,newLine, tab.
	portfolioStructure do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [finalPortfolioStructure := finalPortfolioStructure, newLine,tab.]
				                             										ifFalse:[finalPortfolioStructure := finalPortfolioStructure,char asString]].! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:49:58' prior: 50636889!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	
	portfolioStructure do: [:aName| (aName isKindOf: PortofolioStructure) ifTrue: [ ]
							ifFalse:[finalPortfolioStructure := finalPortfolioStructure, newLine,aName]].
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:51:43' prior: 50636967!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	"
	portfolioStructure do: [:aName| aName portfolioStructure: finalPortfolioStructure. 
							finalPortfolioStructure := finalPortfolioStructure, newLine,aName]."
	
	^portfolio name, finalPortfolioStructure! !

ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: 'portfolio accountNames porfoliosNames portfolioStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortofolioStructure category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 14:52:08'!
ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: 'portfolio accountNames porfoliosNames portfolioStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortofolioStructure methodsFor: 'initialize' stamp: 'pau 6/1/2023 14:52:44' prior: 50634536!
initializeWith: aPortfolio 
	portfolio := aPortfolio.
	portfolioStructure:= OrderedCollection new.
	accountNames := OrderedCollection new.
	porfoliosNames := OrderedCollection new.
	! !
!PortofolioStructure methodsFor: 'add-private-' stamp: 'pau 6/1/2023 14:52:59' prior: 50636450!
addAccount: anAccount 
	accountNames add: ( (Character numericValue: 9) asString , (anAccount name))! !
!PortofolioStructure methodsFor: 'add-private-' stamp: 'pau 6/1/2023 14:53:29' prior: 50636436!
addPortfolio: aPortfolio
	|portfolioStructureSubPortfolio|
	
	portfolioStructureSubPortfolio := PortofolioStructure with: aPortfolio.
	porfoliosNames add: portfolioStructureSubPortfolio. ! !
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:55:12' prior: 50636983!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	accountNames do: [:aName| finalPortfolioStructure := finalPortfolioStructure, newLine,aName].
	
	porfoliosNames do: [:aPortfolioStructure| aPortfolioStructure addTabsToPortolioStructure: finalPortfolioStructure ].
	
	^portfolio name, finalPortfolioStructure! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 14:57:05'!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab.
	portfolioStructure do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !

!methodRemoval: PortofolioStructure #addTabsToPortolioStructure: stamp: 'pau 6/1/2023 14:57:19'!
addTabsToPortolioStructure: aPorfolioStructure
	|finalPortfolioStructure tab newLine| 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	finalPortfolioStructure := aPorfolioStructure,newLine, tab.
	portfolioStructure do: [:char | (char = (Character numericValue: 10)) 
												ifTrue: [finalPortfolioStructure := finalPortfolioStructure, newLine,tab.]
				                             										ifFalse:[finalPortfolioStructure := finalPortfolioStructure,char asString]].!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:57:42' prior: 50637041!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	accountNames do: [:aName| finalPortfolioStructure := finalPortfolioStructure, newLine,aName].
	
	porfoliosNames do: [:aPortfolioStructure| finalPortfolioStructure := finalPortfolioStructure, aPortfolioStructure addTabsToPortolioStructure ].
	
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 14:57:44'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 14:57:44'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 14:57:44'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:57:44'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 14:57:44'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:57:48'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:58:02'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 14:59:21' prior: 50637098!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	accountNames do: [:aName| finalPortfolioStructure := finalPortfolioStructure, newLine,aName].
	
	porfoliosNames do: [:aPortfolioStructure| finalPortfolioStructure := finalPortfolioStructure, (aPortfolioStructure addTabsToPortolioStructure) ].
	
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 14:59:30'!
FAILURE!
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:01:22' prior: 50637058!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab.
	accountNames do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !
!PortofolioStructure methodsFor: 'add-private-' stamp: 'pau 6/1/2023 15:02:17' prior: 50637031!
addPortfolio: aPortfolio
	|portfolioStructureSubPortfolio|
	
	portfolioStructureSubPortfolio := PortofolioStructure with: aPortfolio.
	aPortfolio visit: portfolioStructureSubPortfolio. 
	porfoliosNames add: portfolioStructureSubPortfolio. ! !

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:02:27'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:02:27'!
FAILURE!
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:03:28' prior: 50637170!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab.
	accountNames do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^portfolio name, tabbedPortfolioStructure.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:03:30'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:03:30'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:03:30'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:03:30'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:03:30'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:03:33'!
FAILURE!
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:03:58' prior: 50637211!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab, portfolio name.
	accountNames do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:04:02' prior: 50637257!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab, (portfolio name).
	accountNames do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:04:04'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:04:04'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:04:04'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:04:04'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:04:04'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:04:06'!
FAILURE!
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:04:32' prior: 50637278!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab, (portfolio name), newLine, tab.
	accountNames do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:04:33'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:04:33'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:04:33'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:04:33'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:04:33'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:04:33'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:05:52'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:05:52'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:05:52'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:05:52'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:05:52'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:05:52'!
FAILURE!
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:10:12' prior: 50637325!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure portfolioStruct | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab, (portfolio name), newLine, tab.
	portfolioStruct := self portfolioStructure. 
	
	portfolioStruct do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:10:18'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:10:18'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:10:18'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:10:18'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:10:18'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:10:21'!
FAILURE!
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:10:50' prior: 50637397!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure portfolioStruct | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab.
	portfolioStruct := self portfolioStructure. 
	
	portfolioStruct do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:10:51'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:10:51'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:10:51'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:10:51'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:10:51'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:10:53'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:11:20'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:20:30'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:20:30'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:20:30'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:20:30'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:20:30'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:20:32'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:21:03'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 15:28:28' prior: 50637147!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	
	finalPortfolioStructure := String new. 
	accountNames do: [:aName| finalPortfolioStructure := finalPortfolioStructure, newLine,aName].
	
	porfoliosNames do: [:aPortfolioStructure| finalPortfolioStructure := finalPortfolioStructure, (aPortfolioStructure addTabsToPortolioStructure) ].
	
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:28:29'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:28:29'!
FAILURE!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:28:29'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:28:29'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:28:29'!
FAILURE!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:28:38'!
FAILURE!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:28:55'!
FAILURE!
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:30:12' prior: 50637446!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure portfolioStruct | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab.
	portfolio visit: self.
	portfolioStruct := self portfolioStructure. 
	
	portfolioStruct do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !
!PortofolioStructure methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 15:31:51' prior: 50637575!
addTabsToPortolioStructure
	|tab newLine tabbedPortfolioStructure portfolioStruct | 
	
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	tabbedPortfolioStructure := String new,newLine, tab.
	portfolioStruct := self portfolioStructure. 
	
	portfolioStruct do: [:char | (char = (Character numericValue: 10)) 
									ifTrue: [tabbedPortfolioStructure := tabbedPortfolioStructure, newLine,tab.]
				                             					ifFalse:[tabbedPortfolioStructure:= tabbedPortfolioStructure,char asString]].
	^tabbedPortfolioStructure.! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:31:52'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:31:52'!
FAILURE!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:31:52'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:31:52'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:31:52'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:31:56'!
FAILURE!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:32:16'!
FAILURE!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 15:32:59' prior: 50637529!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	portfolio visit: self. 
	finalPortfolioStructure := String new. 
	accountNames do: [:aName| finalPortfolioStructure := finalPortfolioStructure, newLine,aName].
	
	porfoliosNames do: [:aPortfolioStructure| finalPortfolioStructure := finalPortfolioStructure, (aPortfolioStructure addTabsToPortolioStructure) ].
	
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:33:03'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:33:03'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:33:03'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:33:03'!
FAILURE!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:33:03'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:33:06'!
FAILURE!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:33:07'!
FAILURE!
!PortofolioStructure methodsFor: 'add-private-' stamp: 'pau 6/1/2023 15:36:36' prior: 50637190!
addPortfolio: aPortfolio
	|portfolioStructureSubPortfolio|
	
	portfolioStructureSubPortfolio := PortofolioStructure with: aPortfolio.
	porfoliosNames add: portfolioStructureSubPortfolio. ! !

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:36:37'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:36:37'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:36:37'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:36:37'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:36:37'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:36:42'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:36:42'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:36:42'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:36:42'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:36:42'!
PASSED!
!PortofolioStructure methodsFor: 'portfolio structure' stamp: 'pau 6/1/2023 15:36:55' prior: 50637650!
portfolioStructure
	
	| newLine finalPortfolioStructure|
	newLine:= (Character numericValue: 10) asString. 
	portfolio visit: self. 
	
	finalPortfolioStructure := String new. 
	accountNames do: [:aName| finalPortfolioStructure := finalPortfolioStructure, newLine,aName].
	
	porfoliosNames do: [:aPortfolioStructure| finalPortfolioStructure := finalPortfolioStructure, (aPortfolioStructure addTabsToPortolioStructure) ].
	
	^portfolio name, finalPortfolioStructure! !

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:37:19'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:37:19'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:37:19'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:37:19'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:37:19'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:37:19'!
PASSED!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 15:38:26'!
test06
	
	|portfolioLisa portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	portfolioLisa:= Portfolio named: 'Portfolio de Lisa' with: accountMarge.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge; add: portfolioLisa. 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge
	Portfolio de Lisa'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test06 stamp: 'pau 6/1/2023 15:38:27'!
ERROR!
!PortfolioStructureTest methodsFor: 'tests' stamp: 'pau 6/1/2023 15:39:03' prior: 50637794!
test06
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge portfolioLisa|
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	portfolioLisa:= Portfolio named: 'Portfolio de Lisa'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge; add: portfolioLisa. 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge
	Portfolio de Lisa'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !

!testRun: #PortfolioStructureTest #test06 stamp: 'pau 6/1/2023 15:39:04'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:39:04'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:39:04'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:39:04'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:39:04'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:39:04'!
PASSED!

!testRun: #PortfolioStructureTest #test06 stamp: 'pau 6/1/2023 15:39:04'!
PASSED!

!methodRemoval: PortfolioStructureTest #test06 stamp: 'pau 6/1/2023 15:39:08'!
test06
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge portfolioLisa|
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	portfolioLisa:= Portfolio named: 'Portfolio de Lisa'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge; add: portfolioLisa. 
	
	portfolioStructure := PortofolioStructure with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge
	Portfolio de Lisa'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. !
!ReceptiveAccount methodsFor: 'visitors' stamp: 'pau 6/1/2023 15:39:51' prior: 50634864!
visit: aVisitor

	transactions do:[:aTransaction| aTransaction addTo: aVisitor]! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:40:06'!
PASSED!

ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: 'portfolio accountNames porfoliosNames'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortofolioStructure category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 15:40:16'!
ReportGenerator subclass: #PortofolioStructure
	instanceVariableNames: 'portfolio accountNames porfoliosNames'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'nil' stamp: 'pau 6/1/2023 15:40:51'!
visit: aVisitor
	self subclassResponsibility. ! !

!classRenamed: #ReportGenerator as: #ReportVisitor stamp: 'pau 6/1/2023 15:44:23'!
Smalltalk renameClassNamed: #ReportGenerator as: #ReportVisitor!
!TransferNet methodsFor: 'add tranference -private-' stamp: 'pau 6/1/2023 15:46:26' overrides: 50633319!
addDepositTo: aDeposit! !
!TransferNet methodsFor: 'add tranference -private-' stamp: 'pau 6/1/2023 15:46:43' overrides: 50633323!
addWithdrawTo: aWithdraw! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 15:46:56'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 6/1/2023 15:46:56'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'pau 6/1/2023 15:50:22'!
test07AccountWithMoreTransactionsOnlyAddTranferences
	| portfolio transferNet receptiveAccont1 receptiveAccont2 tranference |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	portfolio add: receptiveAccont1. 
	
	tranference := Transference from:  receptiveAccont1  transfer: 100  to:receptiveAccont2 . 

	transferNet := TransferNet for: portfolio. 

	self assert: (transferNet tranferNet) equals: -100.! !
!TransferNetTest methodsFor: 'tests' stamp: 'pau 6/1/2023 15:51:42' prior: 50638161!
test07AccountWithMoreTransactionsOnlyAddTranferences
	| portfolio transferNet receptiveAccont1 receptiveAccont2 tranference deposit1 deposit2 |
	
	portfolio := Portfolio new.
	receptiveAccont1 := ReceptiveAccount new.
	receptiveAccont2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: receptiveAccont1.
	deposit2 := Deposit register: 100 on: receptiveAccont2.
	
	portfolio add: receptiveAccont1. 
	
	tranference := Transference from:  receptiveAccont1  transfer: 100  to:receptiveAccont2 . 

	transferNet := TransferNet for: portfolio. 
	
	
	self assert: (transferNet tranferNet) equals: -100.! !

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 15:52:06'!
PASSED!

!classRenamed: #PortofolioStructure as: #PortfolioStructureReport stamp: 'pau 6/1/2023 16:02:55'!
Smalltalk renameClassNamed: #PortofolioStructure as: #PortfolioStructureReport!
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:02:56' prior: 50635010!
test02PortfolioWithOneAccountHasTheNameOfBoths
	
	|portfolio portfolioStructure account expectedPortfolioStructure |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:02:56' prior: 50636007!
test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge accountLisa1 accountLisa2 portfolioLisa |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	accountLisa1 := ReceptiveAccount named: 'Cuenta de Lisa'.
	accountLisa2 := ReceptiveAccount named: 'Cuenta de Lisa para la universidad'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	
	portfolioLisa:= Portfolio named: 'Portfolio de Lisa' with: accountLisa1.
	portfolioLisa add: accountLisa2. 
	portfolioMarge add: portfolioLisa. 
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge
		Portfolio de Lisa
			Cuenta de Lisa
			Cuenta de Lisa para la universidad'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:02:56' prior: 50633997!
test01emptyPortfolioOnlyHasTheNameOfThatPortfolio
	|portfolio portfolioName portfolioStructure |
	
	portfolioName := 'Soy el portfolio solitario'. 
	
	portfolio:= Portfolio named: portfolioName .
	
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	
	self assert:  portfolioStructure portfolioStructure equals: portfolioName. ! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:02:56' prior: 50635371!
test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios
	
	|portfolio portfolioStructure accountHomero expectedPortfolioStructure portfolioMarge accountMarge |
	
	accountHomero := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'. 
	
	portfolioMarge:= Portfolio named: 'Portfolio de Marge' with: accountMarge.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomero.
	portfolio  add: portfolioMarge . 
	
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Portfolio de Marge
		Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:02:56' prior: 50635132!
test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio
	
	|portfolio portfolioStructure account expectedPortfolioStructure account2 |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	account2 := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	portfolio add: account2.
	
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	
	expectedPortfolioStructure := 
'Portfolio de la familia
	Cuenta de Homero
	Cuenta de Marge'.
	
	self assert:  portfolioStructure portfolioStructure equals: expectedPortfolioStructure. ! !
!PortfolioStructureReport methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:02:56' prior: 50637699!
addPortfolio: aPortfolio
	|portfolioStructureSubPortfolio|
	
	portfolioStructureSubPortfolio := PortfolioStructureReport with: aPortfolio.
	porfoliosNames add: portfolioStructureSubPortfolio. ! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!testRun: #TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 6/1/2023 16:03:09'!
PASSED!

!methodRemoval: TransferenceTest #test02TransferenceKnowsItsSenderAndReceiver stamp: 'pau 6/1/2023 16:08:10'!
test02TransferenceKnowsItsSenderAndReceiver

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference receivedTransaction senderAccount) equals: senderAccount .
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount .!
!TransferenceTest methodsFor: 'test' stamp: 'pau 6/1/2023 16:08:19'!
test02SenderAndReceiverHaveRegisteredTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount hasRegistered: (transference sentTransaction)).
	self assert: (receivingAccount hasRegistered: (transference receivedTransaction )).! !

!methodRemoval: TransferenceTest #test03SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:08:19'!
test03SenderAndReceiverHaveRegisteredTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (senderAccount hasRegistered: (transference sentTransaction)).
	self assert: (receivingAccount hasRegistered: (transference receivedTransaction )).!
!TransferenceTest methodsFor: 'test' stamp: 'pau 6/1/2023 16:08:25'!
test03SenderAndReceiverOfTransferenceKnowEachOther

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount.
	self assert: (transference receivedTransaction senderAccount) equals: senderAccount.! !

!methodRemoval: TransferenceTest #test04SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 16:08:25'!
test04SenderAndReceiverOfTransferenceKnowEachOther

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount.
	self assert: (transference receivedTransaction senderAccount) equals: senderAccount.!
!TransferenceTest methodsFor: 'test' stamp: 'pau 6/1/2023 16:08:32'!
test04CanNavigateToAndFromBothEndsOfTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverTransaction) equals: transference receivedTransaction.
	self assert: (transference receivedTransaction senderTransaction) equals: transference sentTransaction.! !

!methodRemoval: TransferenceTest #test05CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:08:32'!
test05CanNavigateToAndFromBothEndsOfTransference

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverTransaction) equals: transference receivedTransaction.
	self assert: (transference receivedTransaction senderTransaction) equals: transference sentTransaction.!
!TransferenceTest methodsFor: 'test' stamp: 'pau 6/1/2023 16:08:38'!
test05CanNotTransferToYourself

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference canNotTransferToYourselfErrorMessage equals: anError messageText.]! !

!methodRemoval: TransferenceTest #test06CanNotTransferToYourself stamp: 'pau 6/1/2023 16:08:38'!
test06CanNotTransferToYourself

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transference from: account transfer: 10 to: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Transference canNotTransferToYourselfErrorMessage equals: anError messageText.]!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferenceTest #test02SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferenceTest #test03SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!testRun: #TransferenceTest #test05CanNotTransferToYourself stamp: 'pau 6/1/2023 16:08:41'!
PASSED!

!methodRemoval: TransferenceTest #test03SenderAndReceiverOfTransferenceKnowEachOther stamp: 'pau 6/1/2023 16:09:16'!
test03SenderAndReceiverOfTransferenceKnowEachOther

	|senderAccount receivingAccount transference|
	
	senderAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	transference := Transference from: senderAccount transfer: 10 to: receivingAccount.
	
	self assert: (transference sentTransaction receiverAccount) equals: receivingAccount.
	self assert: (transference receivedTransaction senderAccount) equals: senderAccount.!

!methodRemoval: TransferenceIn #senderAccount stamp: 'pau 6/1/2023 16:09:38'!
senderAccount

	^sender !

!methodRemoval: TransferenceOut #receiverAccount stamp: 'pau 6/1/2023 16:09:48'!
receiverAccount

	^receiver !
!TransferenceOut methodsFor: 'initialization' stamp: 'pau 6/1/2023 16:10:36' prior: 50622270!
initializeSendTo: aReceivingAccount inTransference: aTransference.

	transference := aTransference .! !

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferenceTest #test02SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:10:40'!
PASSED!

!testRun: #TransferenceTest #test05CanNotTransferToYourself stamp: 'pau 6/1/2023 16:10:40'!
PASSED!
!TransferenceOut methodsFor: 'initialization' stamp: 'pau 6/1/2023 16:11:01'!
initializeWith: aTransference.

	transference := aTransference.! !
!TransferenceIn methodsFor: 'initalization' stamp: 'pau 6/1/2023 16:11:20'!
initializeWith: aTransference.

	transference := aTransference.! !
!TransferenceIn class methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:12:20'!
for: aTransference

	^self new initializeWith: aTransference .! !
!TransferenceOut class methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:12:35'!
for: aTransference

	^self new initializeWith: aTransference .! !
!Transference methodsFor: 'initialization' stamp: 'pau 6/1/2023 16:13:13' prior: 50627596!
initializeSend: anAmount from: senderAccount to: receivingAccount

	(senderAccount = receivingAccount ) ifTrue: [self error: self class canNotTransferToYourselfErrorMessage].

	value := anAmount.
	
	receivedTransaction := TransferenceIn for: self.
	sentTransaction := TransferenceOut for: self.
	
	senderAccount register: sentTransaction.
	receivingAccount register: receivedTransaction.
! !

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 16:13:14'!
PASSED!

!testRun: #TransferenceTest #test02SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:13:14'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:13:14'!
PASSED!

!testRun: #TransferenceTest #test05CanNotTransferToYourself stamp: 'pau 6/1/2023 16:13:14'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferenceTest #test02SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!testRun: #TransferenceTest #test05CanNotTransferToYourself stamp: 'pau 6/1/2023 16:13:17'!
PASSED!

!methodRemoval: TransferenceIn class #fromSenderAccount:inTransference: stamp: 'pau 6/1/2023 16:13:37'!
fromSenderAccount: aSenderAccount inTransference: aTransference

	^self new initializeReceiveFrom: aSenderAccount inTransference: aTransference .!

!methodRemoval: TransferenceOut class #toReceiverAccount:inTransference: stamp: 'pau 6/1/2023 16:13:49'!
toReceiverAccount: aReceiverAccount inTransference: aTransference

	^self new initializeSendTo: aReceiverAccount inTransference: aTransference .!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferenceTest #test02SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!testRun: #TransferenceTest #test05CanNotTransferToYourself stamp: 'pau 6/1/2023 16:13:53'!
PASSED!

!methodRemoval: TransferenceOut #initializeSendTo:inTransference: stamp: 'pau 6/1/2023 16:14:00'!
initializeSendTo: aReceivingAccount inTransference: aTransference.

	transference := aTransference .!

!methodRemoval: TransferenceIn #initializeReceiveFrom:inTransference: stamp: 'pau 6/1/2023 16:14:04'!
initializeReceiveFrom: aSenderAccount inTransference: aTransference.

	transference := aTransference .
	sender := aSenderAccount.!

ReportVisitor subclass: #IndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IndentedReport category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 16:14:43'!
ReportVisitor subclass: #IndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----QUIT----(1 June 2023 16:14:54) CuisUniversity-5799.image priorSource: 9699484!

----STARTUP---- (1 June 2023 16:15:00) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/portfolio2-summary/portfolio2/CuisUniversity-5799.image!


TestCase subclass: #IndentedReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IndentedReportTest category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 16:15:16'!
TestCase subclass: #IndentedReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IndentedReportTest methodsFor: 'nil' stamp: 'pau 6/1/2023 16:18:04'!
test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount
	! !
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:19:55' prior: 50639567!
test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport account expectedReport |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Balance = 0'.
	
	self assert:  indentedReport report equals: expectedReport. ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:19:57'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:20:05'!
ERROR!
!IndentedReport class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 16:20:10'!
with: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aPortfolio ! !
!IndentedReport class methodsFor: 'instance creation' stamp: 'pau 6/1/2023 16:20:15' prior: 50639599!
with: aPortfolio 
	^self new initializeWith: aPortfolio ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:20:18'!
ERROR!

!classDefinition: #IndentedReport category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 16:20:27'!
ReportVisitor subclass: #IndentedReport
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IndentedReport methodsFor: 'initialize' stamp: 'pau 6/1/2023 16:20:27'!
initializeWith: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!IndentedReport methodsFor: 'initialize' stamp: 'pau 6/1/2023 16:20:31' prior: 50639625!
initializeWith: aPortfolio
	portfolio := aPortfolio.! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:20:32'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:20:32'!
ERROR!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:20:44'!
report
	self shouldBeImplemented.! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:22:05' prior: 50639644!
report
	! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:23:31' prior: 50639648!
report
	
	| summary |
	summary := AccountSummary for: portfolio. 
	
	^portfolio name, summary. ! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:23:38' prior: 50639652!
report
	
	| summary |
	
	summary := AccountSummary for: portfolio. 
	
	^portfolio name, summary. ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:23:40'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:23:40'!
ERROR!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:23:53' prior: 50639658!
report
	
	| summary |
	
	summary := AccountSummary for: portfolio. 
	
	^portfolio name, summary printSummary . ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:23:54'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:23:54'!
FAILURE!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:24:51' prior: 50639673!
report
	
	| summary portfolioStructure |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport for: portfolio. 
	
	^portfolio name, summary printSummary . ! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:25:23' prior: 50639689!
report
	
	| summary portfolioStructure |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport for: portfolio. 
	
	
	^portfolioStructure portfolioStructure , summary printSummary. ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:25:26'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:25:26'!
ERROR!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:25:47' prior: 50639698!
report
	
	| summary portfolioStructure |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	
	
	^portfolioStructure portfolioStructure , summary printSummary. ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:25:48'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:25:48'!
FAILURE!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:26:05' prior: 50639717!
report
	
	| summary portfolioStructure |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	
	
	^portfolioStructure portfolioStructure , summary printSummary. ! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:26:19' prior: 50639736!
report
	
	| summary portfolioStructure newLine |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	newLine:= (Character numericValue: 10) asString. 
	
	^portfolioStructure portfolioStructure , summary printSummary. ! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:26:27' prior: 50639746!
report
	
	| summary portfolioStructure newLine |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	newLine:= (Character numericValue: 10) asString. 
	
	^portfolioStructure portfolioStructure , newLine, summary printSummary. ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:26:28'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:26:28'!
FAILURE!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:26:57' prior: 50639758!
report
	
	| summary portfolioStructure newLine tab |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	^portfolioStructure portfolioStructure , newLine, summary printSummary. ! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:27:06' prior: 50639779!
report
	
	| summary portfolioStructure newLine tab |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	^portfolioStructure portfolioStructure , newLine,tab, tab summary printSummary. ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:27:09'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:27:09'!
ERROR!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:27:17' prior: 50639793!
report
	
	| summary portfolioStructure newLine tab |
	
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	^portfolioStructure portfolioStructure , newLine,tab, tab,  summary printSummary. ! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:27:17'!
PASSED!
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:27:59'!
test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport account expectedReport accountMarge |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'.
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Balance = 0'.
	
	self assert:  indentedReport report equals: expectedReport. ! !
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:28:08' prior: 50639835!
test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport accountHomer expectedReport accountMarge |
	
	accountHomer := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'.
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomer.
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Balance = 0'.
	
	self assert:  indentedReport report equals: expectedReport. ! !
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:29:22' prior: 50639855!
test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport accountHomer expectedReport accountMarge |
	
	accountHomer := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomer.
	portfolio add: accountMarge. 
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Balance = 0
	Cuenta de Marge
		Balance =0'.
	
	self assert:  indentedReport report equals: expectedReport. ! !

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:29:23'!
FAILURE!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:30:21' prior: 50639816!
report
	
	| summary portfolioStructure newLine tab |
	portfolio visit: self.
	"
	summary := AccountSummary for: portfolio. 
	portfolioStructure := PortfolioStructureReport with: portfolio. 
	newLine:= (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	^portfolioStructure portfolioStructure , newLine,tab, tab,  summary printSummary. "! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:30:33'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:30:33'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:30:35'!
ERROR!
!IndentedReport methodsFor: 'nil' stamp: 'pau 6/1/2023 16:31:01'!
addTo: anAccount
	! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:31:58' prior: 50639931!
addTo: anAccount
	anAccount addTo: self.! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:32:01' prior: 50639935!
addTo: anAccount
	anAccount addTo: self.! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:32:38'!
addAccount: aReceptiveAccount
	! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:33:25' prior: 50639944!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.! !

!classDefinition: #IndentedReport category: 'Portfolio-Solucion' stamp: 'pau 6/1/2023 16:34:18'!
ReportVisitor subclass: #IndentedReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:34:17' prior: 50639948!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.
	report := report, newLine,aReceptiveAccount name, tab, summary.! !
!IndentedReport methodsFor: 'initialize' stamp: 'pau 6/1/2023 16:34:28' prior: 50639631!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := ''. ! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:35:10' prior: 50639903!
report
	
	| newLine |
	portfolio visit: self.
	^portfolio name, newLine, report! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:35:28' prior: 50639983!
report
	
	| newLine |
	portfolio visit: self.
	newLine := (Character numericValue: 10) asString. 
	^portfolio name, newLine, report! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:35:29'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:35:29'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:35:30'!
ERROR!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:35:47' prior: 50639966!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.
	report := report, newLine,(aReceptiveAccount name), tab, summary.! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:35:48'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:35:48'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:35:50'!
ERROR!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:36:21' prior: 50640010!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.
	report := report, newLine,(aReceptiveAccount name), tab, (summary printSummary).! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:36:22'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:36:22'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:36:26'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:36:26'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:36:28'!
FAILURE!
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:37:03' prior: 50639989!
report
	
	| newLine |
	portfolio visit: self.
	newLine := (Character numericValue: 10) asString. 
	^portfolio name, report! !
!IndentedReport methodsFor: 'report' stamp: 'pau 6/1/2023 16:37:16' prior: 50640070!
report
	portfolio visit: self.
	^portfolio name, report! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:37:17'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:37:17'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:37:19'!
FAILURE!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:37:46' prior: 50640035!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.
	report := report, newLine,(aReceptiveAccount name), newLine, tab, (summary printSummary).! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:37:47'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:37:47'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:37:49'!
FAILURE!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:38:05' prior: 50640096!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.
	report := report, newLine,tab, (aReceptiveAccount name), newLine, tab, (summary printSummary).! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:06'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:06'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:08'!
FAILURE!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:38:26' prior: 50640122!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.
	report := report, newLine,tab, (aReceptiveAccount name), newLine, tab, tab, (summary printSummary).! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:27'!
PASSED!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:27'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:27'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:45'!
PASSED!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:45'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:38:45'!
FAILURE!
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:39:02'!
test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport accountHomer expectedReport accountMarge |
	
	accountHomer := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomer.
	portfolio add: accountMarge. 
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Balance = 0
	Cuenta de Marge
		Balance =0'.
	
	self assert:  indentedReport report equals: expectedReport. ! !

!methodRemoval: IndentedReportTest #test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:39:02'!
test01PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport accountHomer expectedReport accountMarge |
	
	accountHomer := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomer.
	portfolio add: accountMarge. 
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Balance = 0
	Cuenta de Marge
		Balance =0'.
	
	self assert:  indentedReport report equals: expectedReport. !
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:39:07' prior: 50640188!
test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport accountHomer expectedReport accountMarge |
	
	accountHomer := ReceptiveAccount named: 'Cuenta de Homero'.
	accountMarge := ReceptiveAccount named: 'Cuenta de Marge'.
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: accountHomer.
	portfolio add: accountMarge. 
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Balance = 0
	Cuenta de Marge
		Balance = 0'.
	
	self assert:  indentedReport report equals: expectedReport. ! !

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:39:08'!
PASSED!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:39:08'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:39:08'!
PASSED!
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 16:40:44'!
test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport account expectedReport |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	Deposit register:  10 on: account; register: 100 on:account.  
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Depósito por 10
		Depósito por 100
		Balance = 0'.
	
	self assert:  indentedReport report equals: expectedReport. ! !

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:40:46'!
FAILURE!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:42:07' prior: 50640148!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount . 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString.
	report := report, newLine,tab, (aReceptiveAccount name), newLine, tab, tab, (summary printSummary).
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [report  := report, newLine,tab.]
                             					ifFalse:[report:= report,char asString]].! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:43:22' prior: 50640297!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := AccountSummary for: aReceptiveAccount printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [report  := report, newLine,tab.]
                             					ifFalse:[report:= report,char asString]].
				
	report := report, newLine,tab, (aReceptiveAccount name), newLine, tab, tab, summary.
	
	! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:23'!
ERROR!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:23'!
ERROR!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:24'!
ERROR!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:30'!
ERROR!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:43:47' prior: 50640316!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [report  := report, newLine,tab.]
                             					ifFalse:[report:= report,char asString]].
				
	report := report, newLine,tab, (aReceptiveAccount name), newLine, tab, tab, summary.
	
	! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:48'!
FAILURE!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:48'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:48'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:43:50'!
FAILURE!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:44:10'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:45:15'!
FAILURE!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:45:15'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:45:15'!
FAILURE!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:45:17'!
FAILURE!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:47:37' prior: 50640354!
addAccount: aReceptiveAccount
	
	| newLine summary tab |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [report  := report, newLine,tab.]
                             					ifFalse:[report:= report,char asString]].
				
	report := newLine,tab, (aReceptiveAccount name), newLine, tab, tab, report.
	
	! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:47:40'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:47:40'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:47:40'!
FAILURE!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:47:43'!
FAILURE!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:48:41' prior: 50640415!
addAccount: aReceptiveAccount
	
	| newLine summary tab tabbedSummary |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	tabbedSummary := String new.
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [report  := report, newLine,tab.]
                             					ifFalse:[report:= report,char asString]].
				
	report := newLine,tab, (aReceptiveAccount name), newLine, tab, tab, report.
	
	! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:49:07' prior: 50640453!
addAccount: aReceptiveAccount
	
	| newLine summary tab tabbedSummary |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	tabbedSummary := String new.
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [tabbedSummary := tabbedSummary, newLine,tab.]
                             					ifFalse:[tabbedSummary := tabbedSummary,char asString]].
				
	report := newLine,tab, (aReceptiveAccount name), newLine, tab, tab, report.
	
	! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:49:24' prior: 50640473!
addAccount: aReceptiveAccount
	
	| newLine summary tab tabbedSummary |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	tabbedSummary := String new.
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [tabbedSummary := tabbedSummary, newLine,tab.]
                             					ifFalse:[tabbedSummary := tabbedSummary,char asString]].
				
	report := newLine,tab, (aReceptiveAccount name), newLine, tab, tab, tabbedSummary .
	
	! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:49:24'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:49:24'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:49:24'!
FAILURE!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:49:26'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:49:43'!
FAILURE!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:10'!
FAILURE!

!testRun: #AccountSummaryTest #test01EmptyAccountSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountWithDepositPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountWithDepositAndWithdrawalPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountWithTransferenceInPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountWithTransferenceOutPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #AccountSummaryTest #test06EmptyPortfolioSummaryHasOnlyBalance0 stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #AccountSummaryTest #test07PortfolioWithOneAccountPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioWithTwoAccountsPrintsSummaryCorrectly stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:36'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:36'!
FAILURE!

!testRun: #PortfolioStructureTest #test01emptyPortfolioOnlyHasTheNameOfThatPortfolio stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioStructureTest #test02PortfolioWithOneAccountHasTheNameOfBoths stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioStructureTest #test03PortfolioWithTwoAccountsHasTheNameOfBothAccountsAndPortfolio stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioStructureTest #test04PortfolioWithAccountAndPortfolioHasTheNameOfBothAccountAndPortfolios stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioStructureTest #test05PortfolioWithAccountAndPortfoliosHasTheNameOfThem stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferNetTest #test01AccountWithNoTransferenceGivesZero stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferNetTest #test02ReceivingAccountOfOnlyOneTranferenceThenTranferNetIsTheAmountOfThanTransference stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferNetTest #test03SenderAccountOfOnlyOneTranferenceThenTranferNetTheNegativeOfTheTransferedAmount stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferNetTest #test04TranferNetOfAccountWithMultipleTranferencesIsTheSumOfAllTransferences stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferNetTest #test05TranferNetOfAnEmptyPortfolioIs0 stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferNetTest #test06TranferNetOfAnPortfolioThatHasOneAccountWithTranference stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferNetTest #test07AccountWithMoreTransactionsOnlyAddTranferences stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferenceTest #test01TransactionChangesAccountBalancesCorrectly stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferenceTest #test02SenderAndReceiverHaveRegisteredTransference stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateToAndFromBothEndsOfTransference stamp: 'pau 6/1/2023 16:50:36'!
PASSED!

!testRun: #TransferenceTest #test05CanNotTransferToYourself stamp: 'pau 6/1/2023 16:50:36'!
PASSED!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:50:53' prior: 50640494!
addAccount: aReceptiveAccount
	
	| newLine summary tab tabbedSummary |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	tabbedSummary := String new.
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [tabbedSummary := tabbedSummary, newLine,tab.]
                             					ifFalse:[tabbedSummary := tabbedSummary,char asString]].
				
	report := report,newLine,tab, (aReceptiveAccount name), newLine, tab, tab, tabbedSummary .
	
	! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:54'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:54'!
PASSED!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:54'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:50:54'!
FAILURE!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:51:03'!
PASSED!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:51:05'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:51:05'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:53:02'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:53:04'!
PASSED!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:53:45' prior: 50640737!
addAccount: aReceptiveAccount
	
	| newLine summary tab tabbedSummary |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	tabbedSummary := String new.
	self halt
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [tabbedSummary := tabbedSummary, newLine,tab.]
                             					ifFalse:[tabbedSummary := tabbedSummary,char asString]].
				
	report := report,newLine,tab, (aReceptiveAccount name), newLine, tab, tab, tabbedSummary .
	
	! !
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 16:53:57' prior: 50640804!
addAccount: aReceptiveAccount
	
	| newLine summary tab tabbedSummary |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	tabbedSummary := String new.
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [tabbedSummary := tabbedSummary, newLine,tab.]
                             					ifFalse:[tabbedSummary := tabbedSummary,char asString]].
				
	report := report,newLine,tab, (aReceptiveAccount name), newLine, tab, tab, tabbedSummary .
	
	! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:53:57'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:53:57'!
PASSED!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:53:57'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:53:57'!
FAILURE!

sumary := 'asjkasj
as
sakj'
!

d := ''.!

newLine:= (Character numericValue: 10).!

sumary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [d := d, newLine.]
                             					ifFalse:[d:= d,char asString]].!

newLine:= (Character numericValue: 10) asString.!

sumary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [d := d, newLine.]
                             					ifFalse:[d:= d,char asString]].!

sumary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [d := d, newLine , 'aasasa'.]
                             					ifFalse:[d:= d,char asString]]. !

d!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:57:21'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:57:21'!
PASSED!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:57:21'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:57:21'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 16:58:55'!
FAILURE!
!IndentedReport methodsFor: 'add-private' stamp: 'pau 6/1/2023 17:01:04' prior: 50640826!
addAccount: aReceptiveAccount
	
	| newLine summary tab tabbedSummary |
	summary := (AccountSummary for: aReceptiveAccount) printSummary. 
	newLine := (Character numericValue: 10) asString. 
	tab := (Character numericValue: 9) asString. 
	tabbedSummary := String new.
	
	summary do: [:char | (char = (Character numericValue: 10)) 
					ifTrue: [tabbedSummary := tabbedSummary, newLine,tab,tab.]
                             					ifFalse:[tabbedSummary := tabbedSummary,char asString]].
				
	report := report,newLine,tab, (aReceptiveAccount name), newLine, tab, tab, tabbedSummary .
	
	! !

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:07'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:07'!
PASSED!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:07'!
FAILURE!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:07'!
FAILURE!
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 17:01:28' prior: 50640270!
test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport account expectedReport |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	Deposit register:  10 on: account; register: 100 on:account.  
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Depósito por 10
		Depósito por 100
		Balance = 110'.
	
	self assert:  indentedReport report equals: expectedReport. ! !

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:29'!
FAILURE!
!IndentedReportTest methodsFor: 'as yet unclassified' stamp: 'pau 6/1/2023 17:01:47' prior: 50640954!
test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount
	
	|portfolio indentedReport account expectedReport |
	
	account := ReceptiveAccount named: 'Cuenta de Homero'.
	Deposit register:  10 on: account; register: 100 on:account.  
	
	portfolio:= Portfolio named: 'Portfolio de la familia' with: account.
	
	indentedReport := IndentedReport with: portfolio. 
	
	expectedReport := 
'Portfolio de la familia
	Cuenta de Homero
		Depósito por 10.
		Depósito por 100.
		Balance = 110'.
	
	self assert:  indentedReport report equals: expectedReport. ! !

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:48'!
PASSED!

!testRun: #IndentedReportTest #test01PortfolioWithOneAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:48'!
PASSED!

!testRun: #IndentedReportTest #test02PortfolioWithTwoAccountHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:48'!
PASSED!

!testRun: #IndentedReportTest #test03PortfolioWithOneAccountWithMultipleTransactionsHasCorrectlyIndentedTheReportOfThatAccount stamp: 'pau 6/1/2023 17:01:48'!
PASSED!

----QUIT----(1 June 2023 17:02:07) CuisUniversity-5799.image priorSource: 9852708!