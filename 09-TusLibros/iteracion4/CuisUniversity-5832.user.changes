

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (15 June 2023 20:48:31) as /home/clinux01/Documentos/linux64/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Documentos/linux64/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/WebClient.pck.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/TusLibros-Tests Ejercicio it4.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/clinux01/Documentos/linux64/linux64/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/clinux01/Descargas/PinkTheme.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 20:54:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 20:54:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 20:54:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:54:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:54:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:54:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 20:54:16'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 20:54:18'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'cart session management' stamp: 'pau 6/15/2023 20:58:10' prior: 50664409!
withCartSessionIdentifiedAs: aCartId do: aBlock

	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self signalInvalidCartId ].
	^cartSession do: aBlock
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'pau 6/15/2023 20:59:27' prior: 50664418!
add: anAmount of: aBook toCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: ([ :cartSession | cartSession addToCart: anAmount of: aBook ] fork)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:59:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 20:59:42'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:59:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 20:59:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 20:59:58'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'pau 6/15/2023 21:00:44' prior: 50664902!
add: anAmount of: aBook toCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession addToCart: anAmount of: aBook ] ! !
!TusLibrosSystemFacade methodsFor: 'cart session management' stamp: 'pau 6/15/2023 21:01:01' prior: 50664893!
withCartSessionIdentifiedAs: aCartId do: aBlock

	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self signalInvalidCartId ].
	^cartSession do: (aBlock fork)
! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:01:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:01:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:01:02'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'cart session management' stamp: 'pau 6/15/2023 21:02:05' prior: 50665218!
withCartSessionIdentifiedAs: aCartId do: aBlock

	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self signalInvalidCartId ].
	^cartSession do: aBlock 
! !
!CartSession methodsFor: 'session management' stamp: 'pau 6/15/2023 21:03:29' prior: 50663820!
do: aBlock

	| now |

	now := self now.
	self assertIsNotExpirtedAt: now.
	
	^ [ aBlock fork value: self ] ensure: [ lastUsedTime := now  ]! !
!CartSession methodsFor: 'session management' stamp: 'pau 6/15/2023 21:03:34' prior: 50665316!
do: aBlock

	| now |

	now := self now.
	self assertIsNotExpirtedAt: now.
	
	^ [ aBlock value: self ] ensure: [ lastUsedTime := now  ]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:08:02' prior: 50664494!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	totalSales := [self totalSalesOf: anItem] fork.
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	[bookPerformance at: 'quantity' put: totalSales] fork.
	[bookPerformance at: 'total' put: totalMoney] fork. 
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:08:19' prior: 50665332!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	totalSales := [self totalSalesOf: anItem] fork.
	totalMoney := [self totalMoneyRaisedBy: anItem] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:08:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:08:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:08:23'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:08:32'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:12:29' prior: 50665351!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	totalSales := [self totalSalesOf: anItem] fork.
	totalMoney := [self totalMoneyRaisedBy: anItem] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:14:29' prior: 50665454!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  semaphore|

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	totalSales := [self totalSalesOf: anItem] fork.
	totalMoney := [self totalMoneyRaisedBy: anItem] fork.
	
	semaphore wait. 
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:16:14' prior: 50665474!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier|

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	totalSales := [:semaphore| self totalSalesOf: anItem. semaphore signal] fork.
	totalMoney := [:semaphore| self totalMoneyRaisedBy: anItem. semaphore signal] fork.
	
	barrier wait. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:16:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:16:15'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:19:08' prior: 50665495!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier|

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	totalSales := [:semaphore| [self totalSalesOf: anItem.] fork. semaphore signal] .
	totalMoney := [:semaphore| [self totalMoneyRaisedBy: anItem.] fork.  semaphore signal].
	
	barrier wait. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:19:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:19:11'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:20:11' prior: 50665590!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier|

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	totalSales := [:semaphore| [self totalSalesOf: anItem.] fork. semaphore signal] value: barrier.
	totalMoney := [:semaphore| [self totalMoneyRaisedBy: anItem.] fork.  semaphore signal] value: barrier.
	
	barrier wait. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:20:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:20:15'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:20:17'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 21:20:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:20:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:20:50'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:20:52'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:21:01'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:23:02' prior: 50665685!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier|

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	totalSales := [:semaphore| |total|  total := [self totalSalesOf: anItem.] fork. semaphore signal. total] value: barrier.
	totalMoney := [:semaphore| [self totalMoneyRaisedBy: anItem.] fork.  semaphore signal] value: barrier.
	
	barrier wait. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:23:09'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:27:13'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:29:37' prior: 50666011!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier|

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	 [:semaphore| [totalSales := self totalSalesOf: anItem.] fork. semaphore signal.] value: barrier.
	 [:semaphore| [totalMoney := self totalMoneyRaisedBy: anItem.] fork.  semaphore signal] value: barrier.
	
	barrier wait. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:29:39'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:29:43'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:33:30' prior: 50666043!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier|

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	 [:semaphore| [totalSales := self totalSalesOf: anItem.] fork. semaphore signal.] value: barrier.
	 totalMoney := self totalMoneyRaisedBy: anItem.
	
	barrier wait. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:33:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:33:33'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:33:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:33:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:33:45'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:34:56' prior: 50666074!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier|

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem. barrier signal.] fork. 
	 totalMoney := self totalMoneyRaisedBy: anItem.
	
	barrier wait. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:35:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:35:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:35:06'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:35:08'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:36:39' prior: 50664535!
storePerformance

	| totalMoney totalSales performance barrier |
	
	performance := Dictionary new.
	barrier := Semaphore new.
	
	[totalSales := self totalSales. barrier signal] fork. 
	totalMoney := self totalMoneyRaised.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:36:45' prior: 50666289!
storePerformance

	| totalMoney totalSales performance barrier |
	
	performance := Dictionary new.
	barrier := Semaphore new.
	
	[totalSales := self totalSales. barrier signal] fork. 
	totalMoney := self totalMoneyRaised.
	
	barrier wait. 
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:36:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:36:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:36:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:37:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:37:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:37:07'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:45:38'!
updateQuantity: aQuantity total: aTotal andSummary: aMessageBlock on: performance

	performance at: 'quantity' put: aQuantity.
	performance at: 'total' put: aTotal.
	performance at: 'summary' put: (aMessageBlock value: aQuantity value: aTotal).
	

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:46:57' prior: 50666308!
storePerformance

	| totalMoney totalSales performance barrier messageBlock|
	
	performance := Dictionary new.
	barrier := Semaphore new.
	
	[totalSales := self totalSales. barrier signal] fork. 
	totalMoney := self totalMoneyRaised.
	
	barrier wait. 
	
	messageBlock := [:aQuantity :aTotal| 
		'The store selled a total of ', aQuantity asString, ' books and raised a total amount of money equal to: ', 
		aTotal asString.] 
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:47:41' prior: 50666498!
storePerformance

	| totalMoney totalSales performance barrier messageBlock|
	
	performance := Dictionary new.
	barrier := Semaphore new.
	
	[totalSales := self totalSales. barrier signal] fork. 
	totalMoney := self totalMoneyRaised.
	
	barrier wait. 
	
	messageBlock := [:aQuantity :aTotal| 
		'The store selled a total of ', aQuantity asString, ' books and raised a total amount of money equal to: ', 
		aTotal asString.].
	
	self updateQuantity: totalSales total: totalMoney andSummary: messageBlock on: performance 
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:47:45' prior: 50666515!
storePerformance

	| totalMoney totalSales performance barrier messageBlock|
	
	performance := Dictionary new.
	barrier := Semaphore new.
	
	[totalSales := self totalSales. barrier signal] fork. 
	totalMoney := self totalMoneyRaised.
	
	barrier wait. 
	
	messageBlock := [:aQuantity :aTotal| 
		'The store selled a total of ', aQuantity asString, ' books and raised a total amount of money equal to: ', 
		aTotal asString.].
	
	self updateQuantity: totalSales total: totalMoney andSummary: messageBlock on: performance.
	
	^performance
	

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:47:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:47:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:47:56'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:50:15' prior: 50666184!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  barrier messageBlock |

	bookPerformance := Dictionary new.
	
	barrier := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem. barrier signal.] fork. 
	 totalMoney := self totalMoneyRaisedBy: anItem.
	
	barrier wait. 
	
	messageBlock := 	anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	self updateQuantity: totalSales total: totalMoney andSummary: messageBlock on: bookPerformance.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:50:19' prior: 50666535!
storePerformance

	| totalMoney totalSales performance barrier messageBlock|
	
	performance := Dictionary new.
	barrier := Semaphore new.
	
	[totalSales := self totalSales. barrier signal] fork. 
	totalMoney := self totalMoneyRaised.
	
	barrier wait. 
	
	messageBlock := 		'The store selled a total of ', totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	self updateQuantity: totalSales total: totalMoney andSummary: messageBlock on: performance.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:50:37' prior: 50666487!
updateQuantity: aQuantity total: aTotal andSummary: aMessage on: performance

	performance at: 'quantity' put: aQuantity.
	performance at: 'total' put: aTotal.
	performance at: 'summary' put: aMessage.
	

	

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:50:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:50:43'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:53:16'!
updateQuantity: aQuantity total: aTotal andSummary: aMessage

	| performance |
	performance := Dictionary new.

	performance at: 'quantity' put: aQuantity.
	performance at: 'total' put: aTotal.
	performance at: 'summary' put: aMessage.
	

	

! !

!methodRemoval: TusLibrosSystemFacade #updateQuantity:total:andSummary:on: stamp: 'pau 6/15/2023 21:53:21'!
updateQuantity: aQuantity total: aTotal andSummary: aMessage on: performance

	performance at: 'quantity' put: aQuantity.
	performance at: 'total' put: aTotal.
	performance at: 'summary' put: aMessage.
	

	

!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:53:29' prior: 50666905!
updateQuantity: aQuantity total: aTotal andSummary: aMessage

	| performance |
	performance := Dictionary new.

	performance at: 'quantity' put: aQuantity.
	performance at: 'total' put: aTotal.
	performance at: 'summary' put: aMessage.
	
	^performance

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:53:53' prior: 50666705!
bookPerformance: anItem

	| totalMoney totalSales  barrier messageBlock |
	
	barrier := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem. barrier signal.] fork. 
	 totalMoney := self totalMoneyRaisedBy: anItem.
	
	barrier wait. 
	
	messageBlock := 	anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^self updateQuantity: totalSales total: totalMoney andSummary: messageBlock.
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:54:54' prior: 50666938!
bookPerformance: anItem

	| totalMoney totalSales  barrier |
	
	barrier := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem. barrier signal.] fork. 
	 totalMoney := self totalMoneyRaisedBy: anItem.
	
	barrier wait.
	
	^self updateQuantity: totalSales 
		 total: totalMoney 
		 andSummary: (anItem,			' was selled ',totalSales asString, 
					' times and raised a total amount of money equal to: ', totalMoney asString).
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:55:59' prior: 50666726!
storePerformance

	| totalMoney totalSales performance barrier |
	
	barrier := Semaphore new.
	
	[totalSales := self totalSales. barrier signal] fork. 
	totalMoney := self totalMoneyRaised.
	
	barrier wait. 
	
	^self updateQuantity: totalSales 
		 total: totalMoney 
		 andSummary: ('The store selled a total of ', totalSales asString, 
					 ' books and raised a total amount of money equal to: ', totalMoney asString).
	

	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:56:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:56:06'!
PASSED!

----SNAPSHOT----(15 June 2023 21:58:47) CuisUniversity-5832.image priorSource: 9366758!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:58:49'!
parallelRun: aFirstBlock and: aSecondBlock

	| barrier |
	barrier := Semaphore new.
	
	[aFirstBlock. barrier signal] fork. 
	aSecondBlock.
	
	barrier wait.
	

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:59:44' prior: 50666956!
bookPerformance: anItem

	| totalMoney totalSales  |
	
	self parallelRun: [totalSales := self totalSalesOf: anItem.] 
		and: [ totalMoney := self totalMoneyRaisedBy: anItem.].
	
	^self updateQuantity: totalSales 
		 total: totalMoney 
		 andSummary: (anItem,			' was selled ',totalSales asString, 
					' times and raised a total amount of money equal to: ', totalMoney asString).
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 21:59:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:59:48'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:59:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 21:59:49'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'pau 6/15/2023 21:53:53' prior: 50667081!
bookPerformance: anItem

	| totalMoney totalSales  barrier messageBlock |
	
	barrier := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem. barrier signal.] fork. 
	 totalMoney := self totalMoneyRaisedBy: anItem.
	
	barrier wait. 
	
	messageBlock := 	anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^self updateQuantity: totalSales total: totalMoney andSummary: messageBlock.
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 22:01:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 22:01:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 22:01:05'!
PASSED!

----SNAPSHOT----(15 June 2023 22:01:08) CuisUniversity-5832.image priorSource: 10733394!

----SNAPSHOT----(15 June 2023 22:01:26) CuisUniversity-5832.image priorSource: 10740086!

----QUIT----(15 June 2023 22:01:36) CuisUniversity-5832.image priorSource: 10740176!

----STARTUP---- (15 June 2023 22:02:08) as /home/clinux01/Documentos/linux64/linux64/CuisUniversity-5832.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pau 6/15/2023 22:02:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 22:02:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pau 6/15/2023 22:02:45'!
PASSED!

----QUIT----(15 June 2023 22:03:03) CuisUniversity-5832.image priorSource: 10740266!

----STARTUP---- (21 June 2023 16:12:24) as /home/lucy/Documents/TusLibrosIter4/linux64/CuisUniversity-5832.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:16:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:16:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:16:02'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lucy 6/21/2023 16:23:05'!
executeTwoClosuresSimultaneouslyUntilFinsihed: closure1 and: closure2	
	|barrier|
	
	barrier := Semaphore new.
	
	closure1 fork. 
	closure2.
	
	barrier wait. 

! !

!methodRemoval: TusLibrosSystemFacade #executeTwoClosuresSimultaneouslyUntilFinsihed:and: stamp: 'lucy 6/21/2023 16:23:22'!
executeTwoClosuresSimultaneouslyUntilFinsihed: closure1 and: closure2	
	|barrier|
	
	barrier := Semaphore new.
	
	closure1 fork. 
	closure2.
	
	barrier wait. 

!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lucy 6/21/2023 16:23:52'!
parallelRunAndWairUntilFinished: aFirstBlock and: aSecondBlock

	| barrier |
	barrier := Semaphore new.
	
	[aFirstBlock. barrier signal] fork. 
	aSecondBlock.
	
	barrier wait.
	

	

! !

!methodRemoval: TusLibrosSystemFacade #parallelRun:and: stamp: 'lucy 6/21/2023 16:23:52'!
parallelRun: aFirstBlock and: aSecondBlock

	| barrier |
	barrier := Semaphore new.
	
	[aFirstBlock. barrier signal] fork. 
	aSecondBlock.
	
	barrier wait.
	

	

!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lucy 6/21/2023 16:28:26' prior: 50666973!
storePerformance

	| totalMoney totalSales |
	
	self parallelRunAndWairUntilFinished: [totalSales := self totalSales]
							    and: [totalMoney := self totalMoneyRaised].
	
	^self updateQuantity: totalSales 
		 total: totalMoney 
		 andSummary: ('The store selled a total of ', totalSales asString, 
					 ' books and raised a total amount of money equal to: ', totalMoney asString).
	

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lucy 6/21/2023 16:29:13' prior: 50667614!
parallelRunAndWairUntilFinished: aFirstBlock and: aSecondBlock

	| barrier |
	barrier := Semaphore new.
	
	[aFirstBlock value. barrier signal] fork. 
	aSecondBlock.
	
	barrier wait.
	

	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:29:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:29:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:29:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:29:22'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lucy 6/21/2023 16:32:56' prior: 50667647!
parallelRunAndWairUntilFinished: aFirstBlock and: aSecondBlock

	| barrier |
	barrier := Semaphore new.
	
	[aFirstBlock value. barrier signal] fork. 
	aSecondBlock value.
	
	barrier wait.
	

	

! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:33:05'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:33:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:33:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:33:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:33:14'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lucy 6/21/2023 16:34:13' prior: 50667181!
bookPerformance: anItem

	| totalMoney totalSales  messageBlock |
	
	self parallelRunAndWairUntilFinished: [totalSales := self totalSalesOf: anItem.] 
							    and: [totalMoney := self totalMoneyRaisedBy: anItem.].

	messageBlock := 	anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^self updateQuantity: totalSales total: totalMoney andSummary: messageBlock.
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:34:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:34:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:34:19'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lucy 6/21/2023 16:37:25'!
parallelRunAndWaitUntilFinished: aFirstBlock and: aSecondBlock

	| barrier |
	barrier := Semaphore new.
	
	[aFirstBlock value. barrier signal] fork. 
	aSecondBlock value.
	
	barrier wait.
	

	

! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 16:37:25' prior: 50667909!
bookPerformance: anItem

	| totalMoney totalSales  messageBlock |
	
	self parallelRunAndWaitUntilFinished: [totalSales := self totalSalesOf: anItem.] 
							    and: [totalMoney := self totalMoneyRaisedBy: anItem.].

	messageBlock := 	anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^self updateQuantity: totalSales total: totalMoney andSummary: messageBlock.
	

! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 16:37:25' prior: 50667631!
storePerformance

	| totalMoney totalSales |
	
	self parallelRunAndWaitUntilFinished: [totalSales := self totalSales]
							    and: [totalMoney := self totalMoneyRaised].
	
	^self updateQuantity: totalSales 
		 total: totalMoney 
		 andSummary: ('The store selled a total of ', totalSales asString, 
					 ' books and raised a total amount of money equal to: ', totalMoney asString).
	

	

! !

!methodRemoval: TusLibrosSystemFacade #parallelRunAndWairUntilFinished:and: stamp: 'lucy 6/21/2023 16:37:25'!
parallelRunAndWairUntilFinished: aFirstBlock and: aSecondBlock

	| barrier |
	barrier := Semaphore new.
	
	[aFirstBlock value. barrier signal] fork. 
	aSecondBlock value.
	
	barrier wait.
	

	

!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 16:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:41:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 16:41:34'!
PASSED!

----SNAPSHOT----(21 June 2023 16:42:00) CuisUniversity-5832.image priorSource: 10745247!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open !

Object subclass: #TusLibrosClientRequestHandler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #TusLibrosClientRequestHandler category: 'TusLibrosREST' stamp: 'lucy 6/21/2023 17:39:50'!
Object subclass: #TusLibrosClientRequestHandler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

TusLibrosClientTestWindow open !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 17:57:19' prior: 50663243!
createCartFor: aUser password: aPassword

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	
	
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]
		"! !
!TusLibrosClientRestInterface methodsFor: 'initialization' stamp: 'lucy 6/21/2023 17:58:13' overrides: 16920235!
initialize
! !

!classDefinition: #TusLibrosClientRestInterface category: 'TusLibrosREST' stamp: 'lucy 6/21/2023 17:58:51'!
Object subclass: #TusLibrosClientRestInterface
	instanceVariableNames: 'port requestHandler'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosClientRestInterface methodsFor: 'initialization' stamp: 'lucy 6/21/2023 17:58:48' prior: 50668246 overrides: 16920235!
initialize

	requestHandler := TusLibrosClientRequestHandler new.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 17:59:39' prior: 50668231!
createCartFor: aUser password: aPassword

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]
		"! !
!TusLibrosClientRequestHandler methodsFor: 'nil' stamp: 'lucy 6/21/2023 18:01:36'!
addRequestToQueue: aUrlRequest withFields: fieldDict.

! !
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:03:11' prior: 50668283!
addRequestToQueue: aUrlRequest withFields: fieldDict
	
	|resp|

	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict] fork.
	
	^resp! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:03:34' prior: 50668266!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict."
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

WebServer reset
TusLibrosServerRestInterface installForDefaultSystem 
TusLibrosClientTestWindow open!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

resp !

resp!

resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:10:36' prior: 50668297!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	self halt.
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict."
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.!

resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.!
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:12:23' prior: 50668289!
addRequestToQueue: aUrlRequest withFields: fieldDict
	
	|resp|

	resp := [WebClient htmlSubmit: aUrlRequest fields: fieldDict] fork.
	
	^resp! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:12:42' prior: 50668324!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict."
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:13:23' prior: 50668347!
addRequestToQueue: aUrlRequest withFields: fieldDict
	
	^[WebClient htmlSubmit: aUrlRequest fields: fieldDict] fork.! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:14:45' prior: 50668359!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict."
	
	(Delay forSeconds: 10) wait.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:15:45' prior: 50668377!
addRequestToQueue: aUrlRequest withFields: fieldDict
	
	^WebClient htmlSubmit: aUrlRequest fields: fieldDict.! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:18:26' prior: 50668410!
addRequestToQueue: aUrlRequest withFields: fieldDict
		
	| barrier resp|
	barrier := Semaphore new.
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.. barrier signal] fork. 
		
	barrier wait.
	
	^resp! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:19:00' prior: 50668388!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict."
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'lucy 6/21/2023 18:19:36' prior: 50663533!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest ! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'lucy 6/21/2023 18:19:39' prior: 50668456!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 5) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest ! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:21:50' prior: 50668435!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]"! !
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:22:04' prior: 50668421!
addRequestToQueue: aUrlRequest withFields: fieldDict
		
	| barrier resp|
	barrier := Semaphore new.
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
		resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]. barrier signal] fork. 
		
	barrier wait.
	
	^resp! !
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:22:11' prior: 50668509!
addRequestToQueue: aUrlRequest withFields: fieldDict
		
	| barrier resp|
	barrier := Semaphore new.
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
		resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]. barrier signal] fork. 
		
	barrier wait.! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

(WebUtils jsonDecode: ((resp content) readStream))!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:39:16' prior: 50668491!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := requestHandler addRequestToQueue: (self url,'/createCart') withFields: fieldDict.
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict."
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:49:22'!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aBlock
		
	| barrier resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
		resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]. barrier signal] fork. 
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

(WebUtils jsonDecode: ((resp content) readStream))!

resp content!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:52:33' prior: 50668546!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	self halt.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'lucy 6/21/2023 18:55:06' prior: 50668472!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 18:55:28' prior: 50663258!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	self halt.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:57:43' prior: 50668563!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
	| barrier resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
		resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]. barrier signal] fork. 
	! !
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 18:59:21' prior: 50668641!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[^self error: resp content].] fork. 
	! !
!TusLibrosClientRequestHandler methodsFor: 'as yet unclassified' stamp: 'lucy 6/21/2023 19:01:24' prior: 50668655!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[^self error: resp content].] fork. 
	! !

!methodRemoval: TusLibrosClientRequestHandler #addRequestToQueue:withFields: stamp: 'lucy 6/21/2023 19:01:26'!
addRequestToQueue: aUrlRequest withFields: fieldDict
		
	| barrier resp|
	barrier := Semaphore new.
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
		resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]. barrier signal] fork. 
		
	barrier wait.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 19:03:50'!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock.
	
	"resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	self halt.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]"! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 19:05:25' prior: 50663377!
createCart
	
	restInterface createCartFor: 'hernan' 
			     password: 'smalltalk' 
			     andDoWhenSuccess: [:newCartId | 
									cartIds add: newCartId.
									self triggerEvent: #newCartIdArrived]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'lucy 6/21/2023 19:06:40' prior: 50668607!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 4) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest ! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'lucy 6/21/2023 19:07:03' prior: 50668743!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest ! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password: stamp: 'lucy 6/21/2023 19:07:14'!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	self halt.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 19:08:27'!
listCart: cartId andDoWhenSuccess: aSuccessBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	self halt.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 19:09:08' prior: 50668792!
listCart: cartId andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	requestHandler executeRequest: (self url,'/listCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 19:10:57' prior: 50663386!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId andDoWhenSuccess: [:cartList | 
			currentSelectedCartContent := cartList.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]].! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

!methodRemoval: TusLibrosClientRestInterface #listCart: stamp: 'lucy 6/21/2023 19:13:03'!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	self halt.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 19:13:27' prior: 50668709!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 19:14:30'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId andDoWhenSuccess: aSuccessBlock

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	requestHandler executeRequest: (self url,'/addToCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock.	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 19:20:34' prior: 50663364!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId andDoWhenSuccess: [:respContent|
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs: stamp: 'lucy 6/21/2023 19:23:09'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]!
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lucy 6/21/2023 19:27:18'!
informError: anErrorMessage

	self inform: anErrorMessage 
	
! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'lucy 6/21/2023 19:29:52' prior: 50663133!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #anErrorOcurred send: #informError to: self.! !
!TusLibrosClientRequestHandler methodsFor: 'handleRequest' stamp: 'lucy 6/21/2023 19:32:22' prior: 50668671!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #bookAddedToCart withArguments: (Array with: resp content)].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:33:58' prior: 50668938!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #bookAddedToCart withArguments: resp content].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:34:28' prior: 50668965!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[self triggerEvent: #bookAddedToCart withArguments: resp content"|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent."] 
		ifFalse:[self triggerEvent: #bookAddedToCart withArguments: resp content].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:35:53' prior: 50668991!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[self triggerEvent: #bookAddedToCart withArguments: resp"|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent."] 
		ifFalse:[self triggerEvent: #bookAddedToCart withArguments: resp content].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:37:03' prior: 50669023!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #bookAddedToCart withArguments: resp content].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:38:23' prior: 50669054!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'lucy 6/21/2023 19:44:06' prior: 50663549!
listCart: aRequest

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self error: 'lloransdkndasjk'.
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'lucy 6/21/2023 19:45:33' prior: 50669114!
listCart: aRequest

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:49:30' prior: 50669084!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebResponse protocol: 3  code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:51:34' prior: 50669142!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebResponse protocol: '' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:51:48' prior: 50669170!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'sdasd' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !

WebServer reset 
TusLibrosServerRestInterface installForDefaultSystem
TusLibrosClientTestWindow open!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:53:53' prior: 50669198!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebResponse protocol: '' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:55:51' prior: 50669233!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebResponse protocol:  'HTTP/1.1'  code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:55:53' prior: 50669261!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebResponse protocol:  'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:58:58' prior: 50669289!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp content].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

resp asString!

resp content!

----SNAPSHOT----(21 June 2023 20:00:36) CuisUniversity-5832.image priorSource: 10769909!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:00:44' prior: 50669322!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp asString].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:01:47' prior: 50669358!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:02:28' prior: 50669390!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	"resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404."
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:03:30' prior: 50669422!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork. 
	
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:01:24' prior: 50669457!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[^self error: resp content].] fork. 
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:06:55' prior: 50669489!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork.
	! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'lucy 6/21/2023 20:07:27' prior: 50668915!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #anErrorOccurred send: #informError to: self.! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:07:39' prior: 50669524!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: (resp asString)].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:08:00' prior: 50669573!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:08:54' prior: 50669599!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:09:30' prior: 50669625!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	resp := WebClient htmlSubmit: ('http://localhost:9999/listCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:09:36' prior: 50669654!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	resp := WebClient htmlSubmit: ('http://localhost:9999/listCort') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.
!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:10:27' prior: 50669683!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:11:22'!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: bloque
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:11:39' prior: 50669743!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: bloque
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[bloque value: resp content].] fork.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:12:18' prior: 50668848!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock 
	error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:12:43' prior: 50669800!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:13:18'!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock error: anError

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: anError.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:13:37' prior: 50669818!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 20:14:01' prior: 50668729!
createCart
	
	restInterface createCartFor: 'hernan' 
			     password: 'smalltalk' 
			     andDoWhenSuccess: [:newCartId | 
									cartIds add: newCartId.
									self triggerEvent: #newCartIdArrived]
				error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 20:14:48' prior: 50669860!
createCart
	
	restInterface createCartFor: 'hernan' 
			     password: 'smalltalk' 
			     andDoWhenSuccess: [:newCartId | 
									cartIds add: newCartId.
									self triggerEvent: #newCartIdArrived]
			     error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:15:19' prior: 50669772!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: bloque
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	self halt.
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[bloque value: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

----STARTUP---- (21 June 2023 20:16:38) as /home/lucy/Documents/TusLibrosIter4/linux64/CuisUniversity-5832.image!

!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:00:44' prior: 50669322!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: resp asString].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:01:47' prior: 50669924!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:02:28' prior: 50669953!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	"resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404."
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:03:30' prior: 50669982!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebRequest new newResponse protocol: 'HTTP/1.1' code: 404.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork. 
	
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 19:01:24' prior: 50670011!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[^self error: resp content].] fork. 
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:06:55' prior: 50670040!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOcurred withArguments: (resp asString)].] fork.
	! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'lucy 6/21/2023 20:07:27' prior: 50668915!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #anErrorOccurred send: #informError to: self.! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:07:39' prior: 50670065!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: (resp asString)].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:08:00' prior: 50670114!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:08:54' prior: 50670140!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:09:30' prior: 50670166!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	resp := WebClient htmlSubmit: ('http://localhost:9999/listCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:09:36' prior: 50670195!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	resp := WebClient htmlSubmit: ('http://localhost:9999/listCort') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:10:27' prior: 50670224!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:11:22'!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: bloque
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:11:39' prior: 50670281!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: bloque
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[bloque value: resp content].] fork.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:12:18' prior: 50668848!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock 
	error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:12:43' prior: 50670338!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:13:18'!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock error: anError

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: anError.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lucy 6/21/2023 20:13:37' prior: 50670353!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 20:14:01' prior: 50668729!
createCart
	
	restInterface createCartFor: 'hernan' 
			     password: 'smalltalk' 
			     andDoWhenSuccess: [:newCartId | 
									cartIds add: newCartId.
									self triggerEvent: #newCartIdArrived]
				error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 20:14:48' prior: 50670395!
createCart
	
	restInterface createCartFor: 'hernan' 
			     password: 'smalltalk' 
			     andDoWhenSuccess: [:newCartId | 
									cartIds add: newCartId.
									self triggerEvent: #newCartIdArrived]
			     error: [:args | self triggerEvent: #anErrorOcurred withArguments: args].! !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:15:19' prior: 50670310!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: bloque
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	self halt.
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[bloque value: resp content].] fork.
	! !

!methodRemoval: TusLibrosClientRequestHandler #executeRequest:withFields:andDoWhenSuccess:error: stamp: 'lucy 6/21/2023 20:17:00'!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: bloque
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	self halt.
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[bloque value: resp content].] fork.
	!

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password:andDoWhenSuccess:error: stamp: 'lucy 6/21/2023 20:17:04'!
createCartFor: aUser password: aPassword andDoWhenSuccess: aSuccessBlock error: anError

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	requestHandler executeRequest: (self url,'/createCart') withFields: fieldDict andDoWhenSuccess: aSuccessBlock error: anError.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lucy 6/21/2023 20:17:11' prior: 50670408!
createCart
	
	restInterface createCartFor: 'hernan' 
			     password: 'smalltalk' 
			     andDoWhenSuccess: [:newCartId | 
									cartIds add: newCartId.
									self triggerEvent: #newCartIdArrived]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:17:37' prior: 50670253!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	"resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict."
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[self triggerEvent: #anErrorOccurred withArguments: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

----SNAPSHOT----(21 June 2023 20:18:12) CuisUniversity-5832.image priorSource: 10806490!

PopUpMenu inform: 'a'!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:26:28' prior: 50670506!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	"resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict."
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:["self triggerEvent: #anErrorOccurred withArguments: resp content" PopUpMenu inform: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:26:50' prior: 50670542!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:["self triggerEvent: #anErrorOccurred withArguments: resp content" PopUpMenu inform: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:29:08' prior: 50670575!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:["self triggerEvent: #anErrorOccurred withArguments: resp content" TusLibrosClientTestWindowModel inform: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:29:32' prior: 50670608!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[TusLibrosClientTestWindowModel inform: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open. !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:30:11' prior: 50670642!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add esta por verse,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	"PARA PROBAR EL ERRORPOP UP 
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict."
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[TusLibrosClientTestWindowModel inform: resp content].] fork.
	! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lucy 6/21/2023 20:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 20:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lucy 6/21/2023 20:31:58'!
PASSED!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:35:11' prior: 50670674!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add no lo usa,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	"se puede parametrizar el error pero es siempre el mismo mensaje, me parece que no hace falta"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	"PARA PROBAR EL ERRORPOP UP 
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict."
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[TusLibrosClientTestWindowModel inform: resp content].] fork.
	! !

----SNAPSHOT----(21 June 2023 20:35:15) CuisUniversity-5832.image priorSource: 10844364!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open. !
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'lucy 6/21/2023 20:37:52' prior: 50670858!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock
		
		
	"respContent tiene el contenido de la respuesta del servidor, que en el create es el id, en el list es la lista de libros y en el add no lo usa,
	despues el successblock es lo que hace si el server respondio, o sea, hace el trigger en el thread que forkeaste, puede hacer varios triggers a la vez"
	"se puede parametrizar el error pero es siempre el mismo mensaje, me parece que no hace falta"
	
	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	"PARA PROBAR EL ERROR POP UP 
	resp := WebClient htmlSubmit: 'http://localhost:9999/listCdsart' fields: fieldDict."
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[TusLibrosClientTestWindowModel inform: resp content].] fork.
	! !

----SNAPSHOT----(21 June 2023 20:38:34) CuisUniversity-5832.image priorSource: 10855631!

----QUIT----(21 June 2023 20:38:51) CuisUniversity-5832.image priorSource: 10856976!

----STARTUP---- (22 June 2023 14:49:31) as /home/paula/Documents/COMPUTACION/Inge1-1c2023/TusLibrosIter4/linux64/CuisUniversity-5832.image!


WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!
!TusLibrosClientRequestHandler methodsFor: 'handle request' stamp: 'pua 6/22/2023 15:03:25' prior: 50670900!
executeRequest: aUrlRequest withFields: fieldDict andDoWhenSuccess: aSuccessBlock

	| resp|
	
	[resp := WebClient htmlSubmit: aUrlRequest fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[|respContent|
			   respContent := (WebUtils jsonDecode: ((resp content) readStream)).
			   aSuccessBlock value: respContent.] 
		ifFalse:[TusLibrosClientTestWindowModel inform: resp content].] fork.
	! !
!TusLibrosClientTestWindow methodsFor: 'GUI building' stamp: 'pua 6/22/2023 15:23:19' prior: 50663023!
build2ndColumn1stRow

	| secondColumnLayoutMorphOfFirstRow |
	
	cartIdsListMorph := PluggableListMorph model: self model listGetter: #cartIds indexGetter: #cartIdsIndex indexSetter: #cartIdsIndex:.
	cartIdsListMorph  borderColor: Color magenta; borderWidth: 1; morphWidth:300.
		
	secondColumnLayoutMorphOfFirstRow := LayoutMorph newColumn.
	secondColumnLayoutMorphOfFirstRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Carts Created');
	addMorph: cartIdsListMorph.
	
	secondColumnLayoutMorphOfFirstRow layoutSpec fixedWidth: 390.
	cartIdsListMorph layoutSpec proportionalWidth: 1.
	cartIdsListMorph layoutSpec proportionalHeight: 1.
		
	^secondColumnLayoutMorphOfFirstRow.! !

TusLibrosClientTestWindow open. !
!TusLibrosClientTestWindow methodsFor: 'GUI building' stamp: 'pua 6/22/2023 15:24:08' prior: 50663049!
build2ndColumn2ndRow

	| secondColumnLayoutMorphOfSecondRow |

	cartContentListMorph := PluggableListMorph model: self model listGetter: #cartContent indexGetter: nil indexSetter: nil.
	cartContentListMorph  borderColor: Color magenta; borderWidth: 1; morphWidth:300.
	
	selectedCartLabelMorph := LabelMorph contents:'Books in CartId: '.
		
	secondColumnLayoutMorphOfSecondRow := LayoutMorph newColumn.
	secondColumnLayoutMorphOfSecondRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: selectedCartLabelMorph;
	addMorph: cartContentListMorph.
	
	secondColumnLayoutMorphOfSecondRow layoutSpec fixedWidth: 390.
	cartContentListMorph layoutSpec proportionalWidth: 1.
	cartContentListMorph layoutSpec proportionalHeight: 1.
		
	^secondColumnLayoutMorphOfSecondRow.! !
!TusLibrosClientTestWindow methodsFor: 'GUI building' stamp: 'pua 6/22/2023 15:24:21' prior: 50663092!
build3rdColumn1stRow

	| thirdColumnLayoutMorphOfFirstRow |
	
	booksCatalogListMorph := PluggableListMorph model: self model listGetter: #booksCatalog indexGetter: #booksCatalogIndex indexSetter: #booksCatalogIndex:.
	booksCatalogListMorph borderColor: Color magenta; borderWidth: 1; morphWidth:300.
		
	thirdColumnLayoutMorphOfFirstRow  := LayoutMorph newColumn.
	thirdColumnLayoutMorphOfFirstRow  separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Book Catalog');
	addMorph: booksCatalogListMorph.
	
	thirdColumnLayoutMorphOfFirstRow layoutSpec fixedWidth: 390.
		
	^thirdColumnLayoutMorphOfFirstRow.! !
!TusLibrosClientTestWindow methodsFor: 'GUI building' stamp: 'pua 6/22/2023 15:25:13' prior: 50671017!
build3rdColumn1stRow

	| thirdColumnLayoutMorphOfFirstRow |
	
	booksCatalogListMorph := PluggableListMorph model: self model listGetter: #booksCatalog indexGetter: #booksCatalogIndex indexSetter: #booksCatalogIndex:.
	booksCatalogListMorph borderColor: Color magenta; borderWidth: 1; morphWidth:300;		fillColor: Color magenta.
		
	thirdColumnLayoutMorphOfFirstRow  := LayoutMorph newColumn.
	thirdColumnLayoutMorphOfFirstRow  separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Book Catalog');
	addMorph: booksCatalogListMorph.
	
	thirdColumnLayoutMorphOfFirstRow layoutSpec fixedWidth: 390.
		
	^thirdColumnLayoutMorphOfFirstRow.! !

TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindow methodsFor: 'GUI building' stamp: 'pua 6/22/2023 15:25:35' prior: 50671040!
build3rdColumn1stRow

	| thirdColumnLayoutMorphOfFirstRow |
	
	booksCatalogListMorph := PluggableListMorph model: self model listGetter: #booksCatalog indexGetter: #booksCatalogIndex indexSetter: #booksCatalogIndex:.
	booksCatalogListMorph borderColor: Color magenta; borderWidth: 1; morphWidth:300.
		
	thirdColumnLayoutMorphOfFirstRow  := LayoutMorph newColumn.
	thirdColumnLayoutMorphOfFirstRow  separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Book Catalog');
	addMorph: booksCatalogListMorph.
	
	thirdColumnLayoutMorphOfFirstRow layoutSpec fixedWidth: 390.
		
	^thirdColumnLayoutMorphOfFirstRow.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'pua 6/22/2023 15:25:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'pua 6/22/2023 15:25:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'pua 6/22/2023 15:25:45'!
PASSED!